#!/usr/bin/perl

##*****************************************************************************
##
##  Project Name:	AALocCommand
##     File Name:	AALocCommand
##        Author:	Stanley Au-Yeung
##          Date:	Tuesday, August 23, 2005
##
##   Description:	What it does...
##
##                            Copyright Apple Inc.
##                            All rights reserved.
##
##*****************************************************************************
##                       A U T H O R   I D E N T I T Y
##*****************************************************************************
##
##	Initials	Name
##	--------	-----------------------------------------------
##	SA			Stanley Au-Yeung (stanleyauyeung@asia.apple.com)
##
##*****************************************************************************
##                      R E V I S I O N   H I S T O R Y
##*****************************************************************************
##
##	Date		Time	Author	Description
##	--------	-----	------	---------------------------------------------
##	09/xx/06	21:00	SA		Reports folder naming convention changed to
##								_Reprots_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer

##	compile xib to nib			ibtool --errors --warning --notices --output-format human-readable-text --compile ~/Desktop/foo.nib ~/Desktop/foo.xib
##								find _OldLoc/ -name "*.nib" -type d -print -exec ibtool --plugin /AppleInternal/Developer/Plugins/ProKit.ibplugin {} \;

##	Appleglot xliff mode		-x

##	09/22/11	12:00	SA		Changed /Developer/Evolution/evolution/Apps/AppleGlot.app/Contents/Resources/appleglot to
##                                      /usr/local/bin/appleglot to appleglot
##	06/12/11	12:00	SA		Added -n /Developer/usr/bin/ibtool3 to appleglot for Barolo


##	10/14/09	12:00	SA		Added sudo path
##	10/14/09	12:00	SA		Added resetAGEnv
##	09/08/09	12:00	SA		Added checkConductorLocEnv
##	09/08/09	12:00	SA		Added checkConductorTar
##	09/08/09	12:00	SA		Added pcx2 and fpcx path
##	04/10/09	14:00	SA		version 1.9.8
##	04/10/08	14:00	SA		$gAppleGlotCLPath uses AppleGlot in Evolution
##	04/10/08	14:00	SA		Check hidden files
##	04/06/08	12:00	SA		Added -leverageWGFromOtherFolder
##	03/05/09	12:00	SA		version 1.9.7
##	03/05/09	12:00	SA		Speical version for ProApp, modified $gProKitFramework and $gAppleGlotIBPlugins
##	02/09/09	12:00	SA		version 1.9.6
##	02/09/09	12:00	SA		Added -F /System/Library/PrivateFrameworks/ProKit.framework for AppleGlot
##	02/09/09	12:00	SA		Fixed -prepGlossaryForTM of handling path with space
##	02/09/09	12:00	SA		Added ibplugins for flidentifier
##	02/05/09	12:00	SA		version 1.9.5
##	02/05/09	12:00	SA		Added /AppleInternal/Developer/Plugins/ProKit.ibplugin for PCX
##	01/09/09	12:00	SA		version 1.9.4
##	01/09/09	16:00	SA		Added /AppleInternal/Developer/Plugins/ProKit.ibplugin for AppleGlot
##	12/15/08	01:00	SA		Added GenerateOnlyNotTranslatedStringsWG
##	12/05/08	01:00	SA		Added GenerateChangedAD
##	11/28/08	12:00	SA		Added uncompressed tiff checking
##	09/02/08	21:00	SA		version 1.9.3
##	09/02/08	21:00	SA		Added -prepGlossaryForTM
##	09/03/08	14:00	SA		Fixed FilterFLVerifierReport
##	09/02/08	21:00	SA		Added -xliffToWGAD
##	09/01/08	10:00	SA		version 1.9.2
##	09/01/08	10:00	SA		AAflverifier a component
##	08/30/08	01:00	SA		version 1.9.1
##	08/30/08	01:00	SA		checktarfile report checks .properties.strings, .js.strings and .plist.strings in GlotEnv:_NewBase
##	08/30/08	01:00	SA		JavaPropertiesPostProcess remove .properties.strings files in GlotEnv:_NewBase
##								WidgetJSPostProcess remove .js.strings files in GlotEnv:_NewBase
##								FCPPlistPostProcess remove .plist.strings files in GlotEnv:_NewBase
##	08/30/08	01:00	SA		Added -leverageWGFromOther
##	07/03/08	01:00	SA		version 1.9
##	07/03/08	01:00	SA		Support PAR and 019 loc env
##	05/13/08	01:00	SA		version 1.8.9
##	05/13/08	01:00	SA		Fixed a bug in CreateLocEnv
##	05/11/08	22:00	SA		version 1.8.8
##	05/11/08	15:00	SA		Added -buildALAScoreLog
##	05/10/08	12:00	SA		Uses AALoc Libs
##	05/08/08	22:00	SA		Compare _NewBase and _OldBase when CopyLXRip for MacSWPDS LocEnv
##	05/06/08	14:00	SA		version 1.8.7
##	05/06/08	14:00	SA		AACheckLocFiles no need to check AD for MacSWPDS
##	05/06/08	14:00	SA		CheckNibFiles displays partial file name log
##	05/05/08	18:00	SA		version 1.8.6
##	05/05/08	18:00	SA		Added -submission
##	05/02/08	12:00	SA		version 1.8.5
##	05/02/08	12:00	SA		Support Loc Environment using MacSWPDSLocEnv_
##	04/25/08	00:30	SA		Fixed CheckXMLFiles with no "Font Face"
##	04/25/08	00:30	SA		Fixed CheckSUDescriptionHTMLFiles with no "Font Face"
##	04/20/08	20:00	SA		Fixed GetHTMLFileCharset with no charset HTML
##	04/20/08	20:00	SA		Fixed CheckLocversionPlistWithinThisLproj with short lproj language
##	04/17/08	20:00	SA		CopyMacHelpLocKit added Diff Report of NB and OB
##	04/03/08	15:00	SA		PrepareLocEngDoneImage - J LocEngDoneImage changed to same as other lanugages
##	03/15/08	08:00	SA		version 1.8.4
##	03/15/08	08:00	SA		Fixed UpdateMailNotifyFromLocEnvInfo() bug that locsubmits.apple.com and xautosubmit.apple.com
##								incorreCtly added to MailNotify and MailNotify.SHSR
##	03/11/08	10:00	SA		version 1.8.3
##	03/11/08	10:00	SA		CopyLXRipEnv() reports error if addGlotEnvToLocEnv encountered problem
##	02/22/08	23:00	SA		version 1.8.2
##	02/15/08	11:00	SA		Added more Help functions
##	01/22/08	23:00	SA		version 1.8.1
##	02/01/08	23:00	SA		Fixed CopyLXRipEnv of folder with space
##	01/30/08	23:00	SA		Added some Help functions
##	01/22/08	23:00	SA		version 1.8
##	01/22/08	23:00	SA		Fixed RemoveComponentFromFileList() if there is no file list
##	01/22/08	23:00	SA		CopyBackupForBugFix() to handle manually zip file
##	01/15/08	22:00	SA		Fixed -autoLayout cannot run on Tiger
##	01/13/08	11:00	SA		version 1.7.9
##	01/13/08	11:00	SA		Added -compareBugFixTarballs
##	01/12/08	11:00	SA		Fixed BackupLocEnv reports folder issue of loc env with '.'
##								and backup History
##	01/04/08	11:00	SA		Loctar() added GlotEnv checking
##	01/03/08	17:00	SA		CopyBackupForBugFix() added _LKCXInfo folder
##	01/03/08	17:00	SA		Fixed FixDataDependency() only copy English.lproj or en.lproj and handle short form lproj
##	01/01/08	23:00	SA		version 1.7.8
##	01/01/08	23:00	SA		Added -bugFixPreProcess and -selectBugFixComponents
##	12/21/07	13:00	SA		Added MacSWBugFixLocEnv, -copyBackupForBugFix
##	12/21/07	13:00	SA		Fixed copyLXRipEnv, missed GlotEnv/_NewBase and GlotEnv/.OutboundGlossaries
##	12/14/07	17:00	SA		version 1.7.7
##	12/14/07	17:00	SA		Fixed the copyLXRipEnv flidentifier issue
##	12/14/07	00:00	SA		version 1.7.6
##	12/14/07	00:00	SA		Modified copyLXRipEnv to use addGlotEnvToLocEnv
##	12/11/07	16:00	SA		version 1.7.5
##	12/11/07	16:00	SA		Don't run fix translation kit in PrepareTranslationKitLX() since there
##								is problem in Intel machine
##	12/11/07	16:00	SA		PrepareTranslationKit includes _OldLoc of non-glottables
##	12/11/07	12:00	SA		Added copyLXRipEnv
##	12/05/07	12:00	SA		Support Loc Environment using MacSWLocEnv_
##	10/18/07	12:00	SA		Fixed CheckLocversionPlist error messge
##	10/13/07	16:00	SA		SplitLocEnv removes BugFixComment and GlotEnv
##	10/13/07	16:00	SA		RemoveComponent removes BugFixComment and GlotEnv
##	10/07/07	01:00	SA		version 1.7.4
##	10/07/07	01:00	SA		Added checkHTMLFiles
##	09/28/07	11:00	SA		Add addGlotEnvToLocEnv in CopyLocKit()
##	09/21/07	11:00	SA		version 1.7.3
##	09/21/07	11:00	SA		Fixed AALocUtilities::kLprojLongForm, AALocUtilities::kLprojShortForm and AALocUtilities::kWG2LprojLanguageCode
##	09/19/07	11:00	SA		Added upgrade plist checking
##	09/06/07	18:00	SA		version 1.7.2
##	09/06/07	18:00	SA		Fixed CopyFile of file path with '
##	09/06/07	18:00	SA		Fixed NewBaseToNewLocFilePath to support en.lproj
##	08/27/07	09:00	SA		Update to support short form of .lproj in BuildFileList and AACheckLocFiles
##	08/22/07	16:00	SA		AutoLayout can specify component
##	08/22/07	15:00	SA		version 1.7.1
##	08/22/07	15:00	SA		Fixed ALA and FixContaminatedNibs parameters bug
##	08/22/07	10:00	SA		version 1.7
##	08/22/07	10:00	SA		Added the following ibplugs to AppleGlot CL
##								/System/Library/Frameworks/OSAKit.framework/Resources/
##								/System/Library/Frameworks/QTKit.framework/Resources/
##								/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Resources/
##								/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Resources/
##								/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Resources/
##	08/21/07	09:00	SA		Update to support short form of .lproj
##	08/19/07	01:00	SA		version 1.6.9
##	08/19/07	12:00	SA		Added -compareNewBaseNewLoc and compareOldBaseOldLoc
##	08/19/07	01:00	SA		Fixed a bug of AppleGlot calling Assistant ibplugin
##	08/17/07	13:00	SA		Fix AppleGlot Env permission when copy loc kit
##	08/15/07	20:30	SA		version 1.6.8
##	08/15/07	17:30	SA		Added -compareWGFile, -compareWGFolder and -compareTarballFolder
##	08/14/07	20:30	SA		Added -compareOldBaseNewBase, -compareOldLocNewLoc and -compareFolder
##	08/14/07	20:30	SA		Fixed FindString
##	08/14/07	09:30	SA		version 1.6.7
##	08/14/07	09:30	SA		AppleGlot, autolayoutadjuster and fix_contaminated_nibs use new IB plug-ins
##	08/12/07	12:00	SA		version 1.6.6
##	08/12/07	12:00	SA		Modified GenerateNotTranslatedStringsWG()
##	08/08/07	12:00	SA		Check AD folder in AACheckLocFiles
##	08/08/07	12:00	SA		Copy fixContaminatedNibs reports to Reports folder
##	08/08/07	09:00	SA		version 1.6.5
##	08/08/07	09:00	SA		fixContaminatedNibs uses multiple IB plugin directories
##	08/07/07	12:00	SA		Added -checkAllLocKitsComponentPlist
##	08/05/07	23:00	SA		Word count in HTML format
##	08/02/07	23:00	SA		Fixed a bug in RerunAppleGlotPass1
##								BuildAllFileList($newAppleGlotEnvPath); => BuildAllFileList($inAppleGlotEnvPath);
##	08/01/07	23:00	SA		version 1.6.4
##	08/01/07	23:00	SA		fix_contaminated_nibs don't include Automator and AddressBook IB Plugin
##	08/01/07	12:00	SA		-fixContaminatedNibs supports -comp
##	08/01/07	12:00	SA		BuildFileList include xib as nib
##	07/31/07	23:00	SA		version 1.6.3
##	07/31/07	10:30	SA		fix_contaminated_nibs includes Automator and AddressBook IB Plugin
##	07/31/07	09:00	SA		Fixed CheckLocversionPlistWithinThisLproj to handle locversion.plist path has space
##								Also rewrite using diff to compare instead of cmp
##	07/28/07	09:00	SA		version 1.6.2
##	07/28/07	09:00	SA		AACheckLocFiles() don't check nibs attributes
##	07/28/07	09:00	SA		Added -fixChangedOID
##	07/28/07	09:00	SA		Added -runAppleGlotPass1ForceUpdate and -rerunAppleGlotPass1ForceUpdate
##	07/24/07	09:00	SA		version 1.6.1
##	07/24/07	09:00	SA		Rewrite -generateNotTranslatedStringsWG don't use insight2wg and wg2insight
##	07/23/07	23:00	SA		version 1.6
##	07/23/07	23:00	SA		Added -generateNotTranslatedStringsWG
##	07/23/07	15:00	SA		version 1.5.9
##	07/23/07	15:00	SA		Fixed fix_contaminated_nibs to use ib_plugin-dir.
##	07/19/07	10:00	SA		version 1.5.8
##	07/19/07	14:00	SA		Modified CheckProblemNibs to use fix_contaminated_nibs
##	07/19/07	14:00	SA		Added -fixContaminatedNibs
##	07/19/07	10:00	SA		Uses IB plug-in directory for AppleGlot and AutoLayout
##	07/18/07	03:00	SA		version 1.5.7
##	07/18/07	03:00	SA		Added IB plug-in for AppleGlot and AutoLayout
##	07/03/07	12:00	SA		Loctar() added check resource fork
##	07/03/07	12:00	SA		version 1.5.6
##	07/03/07	12:00	SA		Open _ProblemNibs.rpt instead of _ProblemNibs.html
##	07/01/07	23:00	SA		version 1.5.5
##	07/01/07	09:00	SA		Added -checkProblemNibs
##	06/19/07	22:00	SA		version 1.5.4
##	06/19/07	22:00	SA		Loctar() added Bug Fix Comments to checkLoctar report
##	06/18/07	10:00	SA		CheckWGFileContent() added CFBundleHelpBookFolder checking
##	06/15/07	14:00	SA		CopyLocKit() check whether loc kit country code is equal to loc env or not
##	06/12/07	14:00	SA		Loctar() added ComponentData.plist checking
##	06/12/07	12:00	SA		version 1.5.3
##	06/12/07	12:00	SA		CheckWGFileContent() added check URL
##	05/19/07	22:00	SA		version 1.5.2
##	05/19/07	22:00	SA		Fixed TarballsChecksumToFLVerifierReport() on Intel Machine problem
##	05/18/07	22:00	SA		Added -mergeInHouseTranslationEnv
##	05/10/07	16:00	SA		version 1.5.1
##	05/10/07	16:00	SA		CovertADFileToTMX skip empty string
##	05/08/07	16:00	SA		Fixed PrepareTranslationKit of missing AD
##	05/08/07	13:00	SA		version 1.5
##	05/08/07	13:00	SA		Fixed WidgetJSPreProcess
##	05/07/07	09:00	SA		Added -copyLocKitDontRunFlidentifier
##	05/06/07	13:00	SA		version 1.4.9
##	05/06/07	12:00	SA		Not support LKCX Loc Kits
##	05/06/07	12:00	SA		Rewrite RerunAppleGlotPass1()
##	04/22/07	10:00	SA		CheckTarballChecksumInFLVerifierReport handle UTF-16 filtered flverifier reports
##	04/19/07	10:00	SA		Save filtered flverifier reports in UTF-16
##	04/16/07	00:30	SA		Rename backupForRegion to prepareLocEngDoneImage
##	04/09/07	20:00	SA		Rewirte CheckWGFileSyntax()
##	04/01/07	19:00	SA		Fixed RemoveComponentFromAppeleGlotEnvironment(), _WorkGlossary_Org, Reviewed_WG
##	03/31/07	19:00	SA		Added -loctarBugFix
##	03/23/07	01:00	SA		Fixed %AALocUtilities::kLprojLanguageCode2RegionCode of pt_PT and pl
##	03/23/07	01:00	SA		CheckLocversionPlist() checks LprojLocale localized or not
##	03/22/07	13:00	SA		Check .strings encoding result displays English encoding first
##	03/15/07	13:00	SA		version 1.4.8
##	03/15/07	13:00	SA		Hanlde en.lproj in CheckLocversionPlistWithinThisLproj()
##	03/12/07	01:00	SA		version 1.4.7
##	03/12/07	01:00	SA		Rewite -splitLocEnv to make it faster
##	03/11/07	22:00	SA		DittoProj copy .rsrc files with resource fork after dittoProj with sanitize
##	03/11/07	01:00	SA		AACheckLocFiles calls CheckNibFilesAttributes
##	03/07/07	01:00	SA		Added -dittoProjDontSanitize
##	03/06/07	23:00	SA		version 1.4.6
##	03/06/07	23:00	SA		Fixed a bug in IsLXTranslationKit()
##	02/24/07	18:00	SA		version 1.4.5
##	02/24/07	10:00	SA		Added CheckLocversionPlist() and CheckLocversionPlistWithinThisLproj()
##	02/15/07	23:00	SA		Added CheckTarballChecksumInFLVerifierReport()
##								Added -checkTarballChecksum
##	02/15/07	23:00	SA		Added TarballsChecksumToFLVerifierReport()
##								Call TarballsChecksumToFLVerifierReport after loctar
##	02/14/07	23:00	SA		Don't create _WorkGlossary_Candidates.tmx if no _WorkGlossary_Candidates file
##	02/12/07	18:00	SA		Run FixDataDependency before AAFLVerifier 
##	02/11/07	14:00	SA		version 1.4.4
##	02/11/07	14:00	SA		Receive Japanese translation kit checks AD changes
##	02/11/07	07:00	SA		Added checking of translation kit and fixing for (tran not equal to base)
##	02/11/07	00:45	SA		DittoProj checks project specific files
##	02/11/07	00:45	SA		FCPPlistPostProcess, WidgetJSPostProcess and JavaPropertiesPostProcess
##								process on Projects folder in LocEnv instead of AppleGlot _NewLoc
##	02/10/07	12:00	SA		MergeLocEnv removes reports and merge ALA log
##	02/09/07	23:30	SA		AACheckLocFiles checks .plist.strings
##	02/09/07	23:00	SA		Added -fcpPlistPreProcess and -fcpPlistPostProcess
##	02/08/07	17:00	SA		Added FixDataDependency()
##	02/08/07	17:00	SA		MergeLocEnv() create command line file after merging
##	02/03/07	12:00	SA		version 1.4.3
##	02/03/07	12:00	SA		Added CreateALAChangesLog() when copy loc kit
##	01/24/07	19:00	SA		MergeLocEnv() merges translation kit submission log
##	01/22/07	19:00	SA		Check WG/AD files - &amp;
##	01/22/07	01:00	SA		version 1.4.3b1
##	01/22/06	01:00	SA		Added -filterFLVerifierReport
##	01/16/06	15:00	SA		LocalizeLocversionPlist lists those locversion.plist that can't handled by check_locfiles
##	01/13/06	15:00	SA		receivedTranslationKit supports 2 path of translation kit submission
##	01/13/06	15:00	SA		AACheckLocFiles checks .js.strings and .properties.strings
##	01/13/06	15:00	SA		Added -widgetJSPreProcess and -widgetJSPostProcess
##	01/06/06	12:00	SA		Added -javaPropertiesPreProcess and -javaPropertiesPostProcess
##	01/01/07	12:00	SA		CreateLocEnv() Set permission of new created loc env to 777
##	12/13/06	12:00	SA		Fixed CheckSUDescriptionHTMLFiles() if there is no "FONT FACE" in .html
##	12/10/06	12:00	SA		version 1.4.2b12
##	12/09/06	22:00	SA		Added -mergeLocEnv
##	12/04/06	12:00	SA		version 1.4.2b11
##	12/03/06	13:00	SA		CheckNibFiles only report updated object IDs
##	11/27/06	11:00	SA		Rewrite some `find xxx | grep "xxx"
##	11/27/06	11:00	SA		Fixed BuildFileList() for .rtfd
##	11/26/06	12:00	SA		version 1.4.2b10
##	11/26/06	12:00	SA		Display "NEW" in check nib file report if error is new in this build
##	11/25/06	23:45	SA		Fixed CheckInfoFiles() find files bug
##	11/24/06	20:30	SA		Check AppleGlot Enviroment permission when receive Japan LEP submission
##	11/21/06	20:30	SA		Added -fixAGEnvPermission
##	11/20/06	00:30	SA		ReceiveTranslationKitJapan() checks WG files syntax
##	11/18/06	10:00	SA		Added GetBootVolume() and print boot volume in GetLocToolsEnvInfo
##	11/18/06	10:00	SA		Changed TranslationKit_ to TransEnv_
##	11/10/06	10:00	SA		CopyLocKit run verificator
##	11/10/06	10:00	SA		Added -verificator
##	11/04/06	10:00	SA		-backupLocEnv folder name changed to CountryCode_Localizer_SubmitNumber_Pre#
##	11/04/06	10:00	SA		-removeComponent removes component in the file lists.
##	11/03/06	15:00	SA		Added Polish (PL) and Portuguese (PO) support
##	11/02/06	10:00	SA		version 1.4.2b9
##	11/01/06	22:00	SA		added -allNibScreenshot
##	10/22/06	22:00	SA		mergeGlossaries changed from allowEmptyTranslations to allowUntranslatedEntries
##	10/18/06	10:00	SA		-receiveTranslationKit supports J submission using LK format
##	09/30/06	10:00	SA		version 1.4.2b8
##	09/30/06	10:00	SA		-aaCheckLocFiles don't check RTF files
##	09/30/06	10:00	SA		Added RS support
##	09/26/06	17:00	SA		Fixed a bug that NibScreenshot() removed the existing screenshots
##	09/26/06	10:00	SA		version 1.4.2b7
##	09/26/06	10:00	SA		-backupLocEnv zip each project
##	09/26/06	10:00	SA		Added -nibNewBaseScreenshot, -nibNewLocScreenshot,
##								-updatedNibNewBaseScreenshot and -updatedNibNewLocScreenshot
##								Removed -nibScreenshot and -updatedNibScreenshot
##	09/25/06	22:00	SA		-checkWGFileSyntax supports -folder to check folder
##	09/24/06	13:30	SA		version 1.4.2b6
##	09/24/06	13:30	SA		BuildAllFileList build .rsrc
##	09/23/06	01:00	SA		version 1.4.2b5
##	09/21/06	23:30	SA		Added -backupForRegion
##	09/20/06	23:30	SA		Added -buildAllFileList
##	09/19/06	01:00	SA		Modified read URL in .rtf
##	09/18/06	19:00	SA		Added AALocUtilities::kLprojLanguageCode2XMLLangFont for Package XML
##	09/17/06	22:00	SA		CopyLocKit () checks Loc Kit before locuntar
##	09/17/06	21:00	SA		Default $gTimer = 1
##	09/17/06	02:00	SA		WG word count log uses tab format
##	09/17/06	02:00	SA		Modified "Checking WG/AD files" message
##	09/15/06	10:30	SA		Modified ' to " for system call to support iWork project which
##								contains ' in the path name
##	09/15/06	10:00	SA		Fixed cannot handle LoEnv name with AALocCommand
##	09/11/06	18:00	SA		version 1.4.2b4
##	09/11/06	14:30	SA		Added -nibScreenshot and -updatedNibScreenshot
##	09/10/06	00:30	SA		-loctar don't include .ad files
##								Removed -loctarWithoutGlossary and added -loctarWithGlossary
##	09/08/06	00:30	SA		Set AppleGlot Env language of splitted Loc Env
##	09/07/06	13:00	SA		version 1.4.2b3
##	09/07/06	13:00	SA		The file name of LocEngDone AG3 env modified to
##								LocEngDone_AG3Env_<CC>_<?PROJECT>_<?BuildNum>_<?Localizer>_<?Date>_<Num>.dmg
##	09/07/06	12:00	SA		Locuntar() move instead of copy Projects to Projects_US
##								remove files in Component folder
##	09/06/06	23:00	SA		Don't copy flidentifier report from AG to Reports folder
##	09/06/06	23:00	SA		Fixed receive Japan translation kit issue
##								Run flidentifier and Process non glottable files after received J LEP
##	09/06/06	22:00	SA		Fixed -loctarWithoutGlossary doestn't work
##	09/06/06	22:00	SA		RemoveComponent() removes _LKCXInfo
##	09/06/06	22:00	SA		SplitLocEnv() splits _LKCXInfo
##	09/06/06	22:00	SA		Fixed SplitLocEnv() for J loc environment since J loc environment
##								don't have nonGlotableLog.txt
##	09/05/06	15:00	SA		version 1.4.2b2
##	09/05/06	15:00	SA		Fixed -removeComponent doestn't work
##	09/05/06	14:00	SA		CovertWGFileToTMX() also export exact matched
##	09/05/06	09:00	SA		version 1.4.2b1
##	09/04/06	15:00	SA		CheckRTFFiles() only check whether display URL is same as actual URL
##								if cannot find English file
##	09/04/06	12:00	SA		-checkAppleGlotLog supports -locenv
##	09/01/06	17:00	SA		Added -checkWGFileSyntax
##	09/01/06	17:00	SA		Added -runAppleGlotPass1
##	09/01/06	17:00	SA		-createLocEnv create folders inside AppleGlot Environment
##	09/01/06	16:00	SA		Modified the check WG/AD report format
##	09/01/06	16:00	SA		Report error if can't find English .strings and .info files in
##								CheckStringsFiles() and CheckInfoFiles()
##	09/01/06	16:00	SA		Modified the URL checking in CheckSUDescriptionHTMLFiles() and CheckRTFFiles()
##	09/01/06	15:00	SA		Uses LocalizationCommandLineTemplate.rtf to create commnadLine file
##	08/31/06	22:00	SA		AALocUtilities::kLprojLanguageCode2LangFont zh_CN changed from 'STHeiti, Hei'
##								to 'STHeiti'
##	08/29/06	22:45	SA		Fixed flverifer doesn't work problem, missing -adview
##	08/29/06	13:00	SA		Recieve translation kit only copy the non-glottable files belong
##								to current loc env
##	08/29/06	13:00	SA		Fixed flidentifier not label new components
##	08/28/06	23:15	SA		Set default -splitTranslationKit component list to "ComponentListTranslationKit"
##								Set default -splitLocEnv component list to ComponentListLocEnv
##	08/28/06	23:00	SA		Added -loctarWithoutGlossary
##	08/28/06	13:00	SA		Fixed CheckLKCX() cannot find report problem
##	08/27/06	13:00	SA		-receiveTranslation can handle Japan submission
##	08/26/06	16:00	SA		Implemented SplitTranslationKit()
##	08/25/06	18:00	SA		Use $gAALocCommandPath if call AALocCommand
##	08/25/06	10:00	SA		version 1.4.1
##	08/25/06	10:00	SA		AALocUtilities::kLprojLanguageCode2LangFont zh_TW changed from 'LiHei Pro, Apple LiGothic'
##								to 'LiHei Pro'
##	08/25/06	10:00	SA		Log file name changed to _checkLocKitLog.txt
##	08/25/06	09:30	SA		Added -removeComponent
##	08/24/06	10:00	SA		CountAppleGlotWGFiles() also count _WorkGlossary_Candidates, _WorkGlossary_New
##								and _WorkGlossary_Review
##	08/22/06	18:00	SA		Rewrite function for copy report from AG to LocEnv
##	08/22/06	18:00	SA		Merged optionReceiveTranslationKit and optionReceiveTranslationKitWithAD
##	08/22/06	17:00	SA		Fixed CreateCommandLineFile() to add -restoreNonGlotableFiles
##	08/22/06	12:00	SA		-pseudoLoc can accept folder
##	08/21/06	21:00	SA		SplitTranslationKit() and SplitLocEnv() can handle
##								component list file with both unix and mac line feed
##	08/21/06	21:00	SA		Make disk image of splitted loc env
##	08/21/06	09:30	SA		Fixed -aaCheckAll open two flverifier reports
##	08/21/06	00:30	SA		version 1.4
##	08/20/06	22:00	SA		-receiveTranslationKit can accept parameter -file
##								for .zip or .dmg submission
##	08/20/06	13:00	SA		CheckPlistFiles(), CheckStringsFiles(), CheckXMLFiles(),
##								CheckSUDescriptionHTMLFiles(), CheckInfoFiles(),
##								CheckRTFFiles() and CheckNibFiles() can handle en.lproj.
##	08/20/06	13:00	SA		CheckStringsFiles() handle xml format .strings files
##	08/18/06	19:15	SA		call RestoreLocEnvInfo() before loctar
##	08/18/06	16:30	SA		swap the order of localizeLocversionPlist with
##								autoLayout in command line file
##	08/18/06	16:30	SA		changed "Check LKCX" to "Check Loc Kit"
##	08/18/06	15:30	SA		version 1.4b3
##	08/18/06	10:00	SA		Added -getLocToolsEnvInfo
##	08/17/06	14:00	SA		Added AALocCommand version to locToolsEnvInfo.txt
##	08/17/06	09:30	SA		version 1.4b2
##	08/16/06	23:00	SA		Added CovertWGFolderToTMX()
##	08/15/06	21:00	SA		Added -splitLocEnv
##	08/15/06	21:00	SA		Added -splitTranslationKit
##	08/15/06	21:00	SA		Loc environment naming convention changed to
##								LocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer
##	08/12/06	10:15	SA		Rename copyLKCX to copyLocKit
##	07/31/06	00:15	SA		CopyLKCX() run flidentifier
##	07/30/06	01:15	SA		Added CountAppleGlotWGFiles() to CopyLKCX()
##	07/23/06	00:15	SA		version 1.4b1
##	07/23/06	00:15	SA		Added prepGlossaryForTM to PrepareTranslationKit()
##								to remove similarity matches in WG files of LKCX Loc Kits
##	07/18/06	23:00	SA		Added IsLXAppleGlotEnvironment() to check whether the
##								Loc Kit is LK or not
##	07/08/06	11:00	SA		Added PrepareTranslationKitLX(), ReceiveTranslationKitLX()
##								and MergeWGFilesLX() for LX based Loc Kits
##	06/24/06	11:30	SA		Save Loc Tools Env Info when create loc env
##	06/16/06	10:30	SA		Added -autoLayout and -setLocEnvForceUpdate
##	06/12/06	21:30	SA		Added -extractNonGlotableFile and -extractAllNonGlotableFile
##	06/12/06	17:30	SA		Modified AALocUtilities::kCountryCode2Tier, zh_CN to Tier 1
##	06/12/06	17:30	SA		GetLprojLanguage() also handle en.lproj
##	05/16/06	23:30	SA		CreateLocEnv() - add _History folder
##	05/16/06	23:30	SA		CopyLKCX() calls Locuntar()
##	05/12/06	14:30	SA		CreateLocEnv() creates Globals file instead of copy Globals-<cc>
##	05/12/06	10:30	SA		Added -aaCheckAll runs
##								aaCheckLocFiles, checkUpdatedNibFiles and aaflverifier
##	05/12/06	12:30	SA		Ignore "style comment not preferred" warning in CheckStringsFiles()
##								Fixed the checking of compare_strings results in CheckStringsFiles()
##	05/12/06	10:30	SA		Added -flidentifier
##	05/07/06	00:30	SA		Added CheckSUDescriptionHTMLFiles(), CheckInfoFiles()
##								and CheckRTFFiles() to AACheckLocFiles()
##	05/02/06	14:30	SA		Added -backupLocEnv
##	05/01/06	00:30	SA		Added -localizeLocversionPlist
##	04/28/06	10:00	SA		RunAppleGlotPass3() run flidentifier
##	04/28/06	10:00	SA		CreateLocEnv() copies autoFtp-template to Reports folder
##	04/28/06	10:00	SA		CopyLKCX copies submission tarball to Components folder only
##	04/24/06	15:00	SA		AACheckLocFiles checks 'font face' in pkg xml files
##	04/24/06	09:00	SA		Fixed -aaCheckLocFiles
##	04/24/06	11:00	SA		Added -setLocEnv
##	04/24/06	10:00	SA		version 1.2.9
##	04/24/06	09:00	SA		Fixed RestoreLocEnvInfo()
##	04/24/06	09:00	SA		Added -getLocEnv
##	04/18/06	00:00	SA		ReceiveTranslationKit(): cannot find WG_Org and
##								Non-Glottable files in Translation Kit are not error.
##	04/17/06	01:00	SA		version 1.2.8
##	04/16/06	22:00	SA		Call BackupLocEnvInfo() in Locuntar()
##	04/16/06	22:00	SA		Call RestoreLocEnvInfo() in Loctar()
##	04/16/06	22:00	SA		Call MergeWGFiles if no error in ReceiveTranslationKit
##	04/16/06	22:00	SA		Modified CheckWGFileSyntax()
##	04/16/06	17:00	SA		UpdateAutoLayoutAdjustLog() fixed file path with space
##								doens't work
##	04/14/06	22:00	SA		-loctar also call CheckTarfile
##	04/14/06	22:00	SA		Modified report folder name to _Reports_<CC>
##	04/14/06	22:00	SA		-copyLKCX copy tarballs to Components folder 
##	04/14/06	22:00	SA		-copyLKCX also call AACheckLKCX
##	04/11/06	15:00	SA		Added CheckWGADFolder() to -receiveTranslationKitWithAD
##	04/11/06	15:00	SA		Added CheckWGADFolder() to MergeWGFiles()
##	04/11/06	15:00	SA		Added -restoreLocEnvInfo
##	04/04/06	11:00	SA		CheckAppleGlotLog() write error to log file
##	04/04/06	10:00	SA		Fixed CheckNibFiles() of Loc only error checking
##	04/03/06	12:00	SA		version 1.2.7
##	04/03/06	09:00	SA		Added CheckLocFiles to call check_locfiles
##	04/03/06	09:00	SA		Renamed CheckLocFiles to AACheckLocFiles
##	04/01/06	10:00	SA		Most of the commands can accept -locenv
##	04/01/06	10:00	SA		Added -backupAGEnv
##	04/01/06	10:00	SA		Added -backupNewLoc
##	04/01/06	10:00	SA		Added -backupReviewedWG
##	04/01/06	10:00	SA		Added -makeTranslationKitDmg
##	04/01/06	10:00	SA		Added -copyLKCX
##	03/31/06	23:30	SA		CheckWGADFiles() return error if the folder is empty
##	03/31/06	18:45	SA		Fixed FindString $inFolderPath with space
##	03/31/06	17:30	SA		CheckWGADFolder() log file renamed to
##								WG result: _checkWGFilesLog.txt
##								AD result: _checkADFilesLog.txt
##	03/31/06	10:00	SA		Added -checkLKCX
##	03/31/06	09:00	SA		Added -createLocEnv
##	03/31/06	10:00	SA		Backup Projects to Projects_US after locuntar
##	03/31/06	09:00	SA		Added -dittoProj
##	03/30/06	23:00	SA		version 1.2.6
##	03/30/06	21:00	SA		Added -checkTarfile
##	03/30/06	21:00	SA		Added -loctar
##	03/30/06	21:00	SA		Added -backupLocEnvInfo
##	03/30/06	21:00	SA		Added -locuntar
##	03/27/06	23:00	SA		version 1.2.5
##	03/27/06	23:00	SA		CheckWGFileContent() uses \b word boundary
##								to search product name
##	03/27/06	22:30	SA		CheckWGFileContent() can handle product name
##								file with both unix and mac line feed
##	03/27/06	21:45	SA		Fixed CheckXMLFiles() bug,
##								syntax error near unexpected token `|'
##	03/27/06	16:00	SA		version 1.2.4
##	03/27/06	14:00	SA		Added -findString
##	03/22/06	02:00	SA		Modified check nib file report format
##	03/19/06	19:00	SA		CheckWGFileContent() added check extra product
##								name in tran
##	03/19/06	19:00	SA		Added -copyLproj
##	03/19/06	18:00	SA		Added -expandPackage to extract files
##	03/19/06	14:00	SA		Added -expandTar to expand tar file or tar files
##								in a folder
##	03/13/06	22:00	SA		version 1.2.3
##	03/13/06	10:00	SA		Added AALocFileUtilities::GetFileURL() to modify all report format to fix
##								file path with space
##	03/10/06	14:00	SA		Added -checkWGFiles
##	03/10/06	12:00	SA		version 1.2.2
##	03/10/06	10:00	SA		Added -checkADFiles
##	03/09/06	22:30	SA		CheckLocFiles added .string and .xml files encoding checking
##	03/03/06	22:30	SA		Added -checkUpdatedNibFiles, only check updated and
##								new .nib files
##	03/03/06	15:00	SA		version 1.2.1
##	03/03/06	11:00	SA		fwStringVerifier check xml:lang
##	03/03/06	10:00	SA		fwStringVerifier support AG Env without .lproj and
##								more than one xml file
##	03/01/06	23:00	SA		restore $/ after undef
##	03/01/06	10:00	SA		Modified FW String Verifier report format
##	02/28/06	15:00	SA		version 1.2
##	02/27/06	22:30	SA		Added fwStringVerifier, flverifier for iPod FW AppleGlot Env 
##	02/17/06	09:30	SA		Modified Preprocess and Postprocess of Keynote 
##								SACountry.strings can handle UTF-16
##								Preprocess input is UTF-16
##								Postprocess output is UTF-16
##								Postprocess input can handle both Mac and Unix line feed.
##	02/07/06	15:00	SA		version 1.2b1
##	02/07/06	10:30	SA		Rewrite CompareWGFiles using ParseWGFile
##	02/07/06	09:30	SA		Added -pseudoLoc
##	02/06/06	22:30	SA		Added -receiveTranslationKitWithAD
##								modify ReceiveTranslationKit() to handle AD
##	02/06/06	22:00	SA		Call CheckLocFiles after AppleGlot pass 3
##	02/06/06	17:00	SA		Added -checkNibFiles
##	01/19/06	15:00	SA		Remove backup NewLoc after run AppleGlot pass 3
##	01/19/06	15:00	SA		Fixed CopyNewLocToNewBase() if there is no lproj
##	01/13/06	00:10	SA		Fixed after run MergeWGFiles has /tmp/tempWG problem
##	01/13/06	00:10	SA		Fixed -rerunAppleGlotPass1 with no lproj env
##	12/26/05	10:00	SA		version 1.1
##	12/26/05	10:00	SA		Modified IsWGNeedTranslate to treat the following string
##								is no need to translate
##								<base loc="en"                                ></base>
##								<tran loc="zh_TW" origin="OldLoc matched text"></tran>
##	12/26/05	10:00	SA		Fixed CheckWGNeedTranslate with inComp
##	11/27/05	15:00	SA		Added find NSNumberFormatter
##	11/24/05	09:00	SA		Added -timer
##	11/17/05	17:00	SA		version 1.1b7
##	11/23/05	09:00	SA		Rewrite the CompareWGFiles
##	11/18/05	13:00	SA		Added convert UTF-8 to UTF-16
##	11/17/05	17:00	SA		version 1.1b6
##	11/17/05	17:00	SA		Added Split and Merge 3 WG file
##	11/17/05	14:30	SA		Fixed Split and Merge WG file to handle file name
##								with more than one "."
##	11/17/05	04:00	SA		version 1.1b5
##	11/17/05	03:00	SA		Added Split and Merge WG file
##	11/10/05	18:00	SA		Added Preprocess and Postprocess of Keynote SACountry.strings
##	11/09/05	14:00	SA		version 1.1b4
##	11/09/05	11:00	SA		Added Preprocess and Postprocess of Keynote Themes files
##	11/08/05	18:00	SA		Added sudo in MakeDiskImage
##	11/08/05	16:00	SA		version 1.1b3
##	11/08/05	15:00	SA		Fixed the input path name no need to end with "/"
##	11/08/05	09:00	SA		Added -debug
##	11/06/05	09:00	SA		Added -makeDiskImage
##	11/04/05	18:00	SA		version 1.1b2
##	11/04/05	15:00	SA		Added -runAppleGlotPass2 and -runAppleGlotPass3
##	11/04/05	10:00	SA		Fixed RerunAppleGlotPass1 of BR. Modified GetLprojLanguage()
##								if can't find .lprog, display warning instead of error
##								since LKCX BR LK don't have .lproj in NewLoc
##	11/03/05	02:00	SA		version 1.1b1
##								Fixed MergeWGFiles
##								Fixed and modified RunAppleGlotPass2And3
##								Modified RerunAppleGlotPass1. copy NL to NB
##								Added IsWGNeedTranslate
##								Rewrote check need review WG
##								Added more checking on ReceiveTranslationKit
##								Modified PrepareTranslationKit. copy AD to TK
##	10/31/05	02:00	SA		version 1.0.3
##	10/29/05	22:00	SA		Modified MoveADWGToLG and RerunAppleGlotPass1
##	10/29/05	22:00	SA		Added PrepareTranslationKit and RunAppleGlotPass2And3
##	10/29/05	22:00	SA		Added WG Checking for receiveTranslationKit
##	10/29/05	00:00	SA		version 1.0.2
##	10/29/05	00:00	SA		Added checkAppleGlotLog and receiveTranslationKit
##	10/25/05	14:00	SA		Modified Merge WG
##	10/24/05	10:00	SA		version 1.0.1
##	10/24/05	09:00	SA		Added rerunAppleGlotPass1 option
##	10/03/05	10:00	SA		Added aaflverifier option
##	10/03/05	09:00	SA		Added $gDebug
##	08/23/05	12:00	SA		Original version
##
##*****************************************************************************

# The outer "while" loop echos the input to the output while we are processing it.
# Since "print" is the last statement we will only pass on input which we have
# successfully finished processing.

BEGIN
{
	# Unfortunately the PATH and PERL5LIB is not setup correctly within Automator
	# so some twists and turns to set up everything for the cli-tools we call later.
	
	my $PATH = $ENV{'PATH'};
	my $PERL5LIB = $ENV{'PERL5LIB'};
	my $EVOLUTIONPATH = `defaults read com.apple.ebs EVOLUTION`;
	chomp ($EVOLUTIONPATH);
	my $searchPath = "$EVOLUTIONPATH/LocEnv/locbin:$EVOLUTIONPATH/bin:/Developer/Tools:/System/Library/CoreServices:$PATH";
	my $locEnv = `defaults read com.apple.ebs LOCENV`;
	chomp ($locEnv);
	if (  $locEnv ne '' ) {
		$searchPath = "$locEnv/locbin:" . $searchPath;
	}
	$ENV{'PATH'} = "$searchPath";
	$ENV{'PERL5LIB'} = "$EVOLUTIONPATH/site_perl_local:$PERL5LIB";
	
	# now we have the same issue outselves as we need Evolution
	# more twists and turns
	
	unshift @INC, "$EVOLUTIONPATH/site_perl_local"; 
};




#=============================================================================================
#	Modules Used
#=============================================================================================

use lib `which "$0"` =~ m#^(.*)/[^/]+$#;

use Evolution;
use MatchBox::XML;
use Getopt::Long;
use Error qw(:try);
use File::Path;
use File::Path qw(make_path remove_tree);
use File::Find;
use File::stat;
use File::Spec;
use File::Copy;
use File::Basename;
use DiskImage;
use Archive::Zip qw( :ERROR_CODES :CONSTANTS );

# use Loc;
use Foundation;

use AALocUtilities;
use AALocFileUtilities;
use AALocEnvUtilities;
use AALocFileUtilities;
use AALocAppleGlotUtilities;
use AAXliffUtilities;


use XML::LibXML;
use Alter;

use POSIX qw(strftime);  



($gScriptName = $0) =~ s|(.+)/([^/]+)$|$2|;
my $gScriptFullPath = $0;
my $gScriptPath = dirname($gScriptFullPath) . "/";

my $gAALocCommandPath = $gScriptFullPath;
my $gAAProcessNonGlotableFilesPath = $gScriptPath . "AAProcessNonGlotableFiles";
my $gAACheckLKCXPath = $gScriptPath . "AACheckLKCX";
my $gAACheckConductorLocEnvPath = $gScriptPath . "AACheckConductorLocEnv";
my $gAAflverifierPath = $gScriptPath . "AAflverifier";
my $gAAflverifierProPath = $gScriptPath . "AAflverifier_Pro";
my $gAAflverifierFilterPath = $gScriptPath . "AAflverifierFilter";
my $gAAflverifierFilterProPath = $gScriptPath . "AAflverifierFilter_Pro";
my $gAAMergeGlossariesPath = $gScriptPath . "AAMergeGlossaries";
my $gAAProcessNibScorePath = $gScriptPath . "AAProcessNibScore";
my $gAACheckProblemNibsPath = $gScriptPath . "AACheckProblemNibs";
my $gNibImageRiperPath = $gScriptPath . "AANibImageRiper";
my $gVerificatorPath = $gScriptPath . "verificator";
my $gMaskNumberAndCountryInTarPath = $gScriptPath . "MaskNumberAndCountryInTar.pl";

my $gLocalizeRTLNibConfigFile = $gScriptPath . "ar.xml";

my $gCheckXliffParameterPath = $gScriptPath . "CheckXliffParameter";


## my $gAppleGlotCLPath = "/Developer/Applications/AppleGlot/AppleGlot.app/Contents/Resources/appleglot";
#my $gAppleGlotCLNonXliffPath = "/usr/local/bin/appleglot -n /Developer/usr/bin/ibtool3";
#my $gAppleGlotCLXliffPath = "/usr/local/bin/appleglot -x -n /Developer/usr/bin/ibtool3";
#my $gAppleGlotCLPath = "/usr/local/bin/appleglot -n /Developer/usr/bin/ibtool3";

my $gAppleGlotCLNonXliffPath = "/usr/local/bin/appleglot";
my $gAppleGlotCLXliffPath = "/usr/local/bin/appleglot -x";
my $gAppleGlotCLPath = "/usr/local/bin/appleglot";

# my $gAppleGlotIBPlugins = "-G '/System/Library/PrivateFrameworks/Assistant.framework/Resources' -G '/System/Library/Frameworks/DiscRecordingUI.framework/Resources' -G '/System/Library/Frameworks/Automator.framework/Resources' -G '/System/Library/Frameworks/AddressBook.framework/Resources' -G '/System/Library/Frameworks/OSAKit.framework/Resources/' -G '/System/Library/Frameworks/QTKit.framework/Resources/' -G '/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Resources/' -G '/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Resources/' -G '/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Resources/' -G '/AppleInternal/Developer/Plugins/'";
my $gAppleGlotProAppIBPlugins = "-G '/AppleInternal/Developer/Plugins/ProKit.ibplugin'";
my $gAppleGlotIBPlugins = "-G '/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources' -G '/System/Library/Frameworks/Automator.framework/Versions/A/Resources' -G '/System/Library/Frameworks/Automator.framework/Versions/A/Resources' -G '/System/Library/Frameworks/DiscRecordingUI.framework/Versions/A/Resources' -G '/System/Library/Frameworks/OSAKit.framework/Versions/A/Resources' -G '/System/Library/Frameworks/QTKit.framework/Versions/A/Resources' -G '/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/Resources' -G '/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/Resources' -G '/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/Resources' -G '/System/Library/PrivateFrameworks/Assistant.framework/Versions/A/Resources' -G '/AppleInternal/Developer/Plugins' -G '/Developer/Plugins'";

# Also need to update AAflverifier
my $gPCXIBPlugins = "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin:/System/Library/Frameworks/Automator.framework/Versions/A/Resources/Automator.ibplugin:/System/Library/Frameworks/Automator.framework/Versions/A/Resources/AutomatorPalette.ibplugin:/System/Library/Frameworks/DiscRecordingUI.framework/Versions/A/Resources/DiscRecordingPlugin.ibplugin:/System/Library/Frameworks/OSAKit.framework/Versions/A/Resources/OSAIBPlugin.ibplugin:/System/Library/Frameworks/QTKit.framework/Versions/A/Resources/QTKitIBPlugin.ibplugin:/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/Resources/ImageKitIBPlugin.ibplugin:/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/Resources/PDFKitIBPlugin.ibplugin:/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/Resources/QuartzComposer.ibplugin:/System/Library/PrivateFrameworks/Assistant.framework/Versions/A/Resources/Assistant Plugin.ibplugin:/AppleInternal/Developer/Plugins/QuicktimeKitUIPlugin.ibplugin";
my $gPCXIBPluginsWithProKit = "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin:/System/Library/Frameworks/Automator.framework/Versions/A/Resources/Automator.ibplugin:/System/Library/Frameworks/Automator.framework/Versions/A/Resources/AutomatorPalette.ibplugin:/System/Library/Frameworks/DiscRecordingUI.framework/Versions/A/Resources/DiscRecordingPlugin.ibplugin:/System/Library/Frameworks/OSAKit.framework/Versions/A/Resources/OSAIBPlugin.ibplugin:/System/Library/Frameworks/QTKit.framework/Versions/A/Resources/QTKitIBPlugin.ibplugin:/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/Resources/ImageKitIBPlugin.ibplugin:/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/Resources/PDFKitIBPlugin.ibplugin:/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/Resources/QuartzComposer.ibplugin:/System/Library/PrivateFrameworks/Assistant.framework/Versions/A/Resources/Assistant Plugin.ibplugin:/AppleInternal/Developer/Plugins/QuicktimeKitUIPlugin.ibplugin:/AppleInternal/Developer/Plugins/ProKit.ibplugin";

my $gProKitFrameworkPath = "-F /System/Library/PrivateFrameworks/ProKit.framework";
my $gProKitFramework = "";

my $gHelpLocTemplatesPath = "~/Locomation/HelpLocTemplates/_template";
my $gFCPPlistToolPath = $gScriptPath . "projSpecific/FCP_plisttool";
my $gJavaPropertiesToolPath = $gScriptPath . "projSpecific/JAVA_propertiestool";
my $gMoloPresetToolPath = $gScriptPath . "projSpecific/Molo_Presettool";
my $gWidgetJSToolPath = $gScriptPath . "projSpecific/Widget_jstool";
my $giMoviePlistToolPath = $gScriptPath . "projSpecific/iMovie_plisttool";
my $gBladeTemplatesToolPath = $gScriptPath . "projSpecific/bladetemplates_conv";


# my $gLocTemplatesFolderPath = "/Developer/WistronITS_Files/Templates Folder/";
my $gLocTemplatesFolderPath = $gScriptPath . "Templates/";
my $gTranslationKitNoteTemplateName = "TransEnv Note.rtf";
my $gLocalizationCommandLineTemplateFilePath = $gScriptPath . "LocalizationCommandLineTemplate.rtf";
my $gLocalizationPDSCommandLineTemplateFilePath = $gScriptPath . "LocalizationPDSCommandLineTemplate.rtf";
my $gLocalizationBugFixCommandLineTemplateFilePath = $gScriptPath . "LocalizationBugFixCommandLineTemplate.rtf";
my $gDNTFilePath = $gScriptPath . "AADNT";
my $gURLFilePath = $gScriptPath . "AAURLs";

my $gDefaultLocEnvInfoFilePath = $gScriptPath . "LocEnvInfo";

my $gLocCheckListFolderPath = $gScriptPath . "CheckList/";

my $gStartTime = 0;


my $kDefualtSplitLocEnvFileName = "ComponentListLocEnv";
my $kDefualtMergeLocEnvFileName = "LocEnvList";
my $kDefualtSplitTranslationKitFileName = "ComponentListTranslationKit";


# print "gScriptPath = $gScriptPath\n";
# print "gScriptFullPath = $gScriptFullPath\n";
# print "gScriptName = $gScriptName\n";
# print "gAALocCommandPath = $gAALocCommandPath\n";
# print "gAAProcessNonGlotableFilesPath = $gAAProcessNonGlotableFilesPath\n";
# print "gAACheckLKCXPath = $gAACheckLKCXPath\n";
# print "gAAflverifierPath = $gAAflverifierPath\n";
# print "gNibImageRiperPath = $gNibImageRiperPath\n";
# print "gLocTemplatesFolder = $gLocTemplatesFolderPath\n";
# print "gTranslationKitNoteTemplateName = $gTranslationKitNoteTemplateName\n";
# print "gLocalizationCommandLineTemplateFile = $gLocalizationCommandLineTemplateFilePath\n";
# print "gProductNameFilePath = $gDNTFilePath\n";
# print "gLocCheckListFolder = $gLocCheckListFolderPath\n";


# $gPcxPath = 'pcx';
# $gFpcxPath = 'fpcx';

# Figure out pcx and fpcx paths.
my $gPcxPath = '/usr/local/cbl/bin/pcx2';
my $gFpcxPath = '/usr/local/cbl/bin/fpcx';

unless ( -e $gPcxPath )
{
    $gPcxPath = `which pcx`;
    chomp $gPcxPath;
	
    $gFpcxPath = 'fpcx';
}

my $gflidentifierPath = '/Developer/Evolution/LocEnv/locbin/flidentifier';


# my $gSudoPath = "/usr/bin/sudo";
my $gSudoPath = $gScriptPath . "sudo";


unless (-d "/tmp")
{
	mkdir "/tmp";
}

unless (-d "/tmp/AALocBench")
{
	mkdir "/tmp/AALocBench";
}

unless (-d "/tmp/AALocBench/Compare")
{
	mkdir "/tmp/AALocBench/Compare";
	mkdir "/tmp/AALocBench/Compare/Old";
	mkdir "/tmp/AALocBench/Compare/New";
}


#---------------------------------------------------------------------------------------------
#	Constants
#---------------------------------------------------------------------------------------------

use constant kCheckWGandADFiles		=> 0;
use constant kCheckWGFiles			=> 1;
use constant kCheckADFiles			=> 2;

use constant kAll					=> 0;
use constant kUpdatedOnly			=> 1;

use constant kNotOpen				=> 0;
use constant kOpen					=> 1;

use constant kDontSanitize			=> 0;
use constant kSanitize				=> 1;

use constant kNotBugFix				=> 0;
use constant kBugFix				=> 1;

use constant kDontRunFlidentifier	=> 0;
use constant kRunFlidentifier		=> 1;

# Basically if NB = OB, the AppleGlot just copies OL to NL. This is called "clean population."
# If -f option is used, it disables clean population logic. Another way of saying, NL is force-updated from NB even if NB = OB. AppleGlot,
# however, tries to leverage as much as possible from OL.
# This force update mode option works only for CLI appleglot's populate command. In other words,
# it does nothing if you use it for 'update' or 'finalize' command.
# This is expected because AppleGlot's population logic works only when it populates (= pass 1) NL from NB/OB/OL.
# There are no ways to use this option from GUI AppleGlot.app. You have to use CLI appleglot as above.

use constant kDontForceUpdate		=> 0;
use constant kForceUpdate			=> 1;

use constant kInTXTFormat			=> 0;
use constant kInHTMLFormat			=> 1;

use constant kNotRunXliff			=> 0;
use constant kRunXliff				=> 1;



#=============================================================================================
#	Main Program
#=============================================================================================

# set version string
$version = "2.0";

%gFindLanguageResult = ();

$gDebug = 0;
$gTimer = 1;
$gCurrentLocEnvType = AALocEnvUtilities::kMacSWLocEnv;
$gLocEnvPath = "";
$gLKCXEnvironmentPath = "";
$gAGEnvironmentPath = "";
$gFilePath = "";
$gFile2Path = "";
$gFile3Path = "";
$gComponentName = "";
$gComponentNames = "";
$gLanguage = "";
$gTranslationKitPath = "";
$gFolderPath = "";
$gFolder2Path = "";
$gString = "";
$gLocVer = "1";



#---------------------------------------------------------------------------------------------
#	Setup Loc Environment Path
#---------------------------------------------------------------------------------------------

$gDefaultLocEnvPath =`defaults read com.apple.ebs LOCENV`;
chomp($gDefaultLocEnvPath);


#---------------------------------------------------------------------------------------------
#	
#---------------------------------------------------------------------------------------------

$optionGetLocToolsEnvInfo = undef;
$optionMergeInHouseTranslationEnv = undef;
$optionMergeWGFiles = undef;
$optionCheckWGFileSyntax = undef;
$optionGenerateNotTranslatedStringsWG = undef;
$optionGenerateOnlyTranslatedStringsAD = undef;
$optionLeverageWGFromOther = undef;
$optionLeverageWGFromOtherFolder = undef;
$optionXliffToWGAD = undef;
$optionPrepGlossaryForTM = undef;
$optionMoveADWGToLG = undef;
$optionFixAGEnvPermission = undef;
$optionCompareWGFile = undef;
$optionCompareWGFolder = undef;
$optionCompareTarballFolder = undef;
$optionCompareFolder = undef;
$optionCompareProFolder = undef;
$optionCompareOldBaseNewBase = undef;
$optionCompareOldLocNewLoc = undef;
$optionCompareNewBaseNewLoc = undef;
$optionCompareOldBaseOldLoc = undef;

$optionRerunAppleGlotPass1 = undef;
$optionRerunAppleGlotPass1ForceUpdate = undef;
$optionRunAppleGlotPass1 = undef;
$optionRunAppleGlotPass1ForceUpdate = undef;
$optionRunAppleGlotPass2And3 = undef;
$optionRunAppleGlotPass2 = undef;
$optionRunAppleGlotPass3 = undef;

$optionRerunAppleGlotPass1Xliff = undef;
$optionRerunAppleGlotPass1ForceUpdateXliff = undef;
$optionRunAppleGlotPass1Xliff = undef;
$optionRunAppleGlotPass1ForceUpdateXliff = undef;
$optionRunAppleGlotPass2And3Xliff = undef;
$optionRunAppleGlotPass2Xliff = undef;
$optionRunAppleGlotPass3Xliff = undef;

$optionAutoLayout = undef;
$optionAutoLayoutScore = undef;
$optionFixDataDependency = undef;
$optionAACheckAll = undef;
$optionAACheckAll_Pro = undef;
$optionFLIdentifier = undef;
$optionFLVerifier = undef;
$optionAAFLVerifier = undef;
$optionAAFLVerifier_Pro = undef;
$optionCheckXliffParameter = undef;
$optionFilterFLVerifierReport = undef;
$optionFilterFLVerifierReport_Pro = undef;
$optionFWStringVerifier = undef;
$optionUpdateFLVerifierLog = undef;
$optionUpdateAutoLayoutAdjustLog = undef;
$optionExtractWGNeedReview = undef;
$optionCreateThinWG = undef;
$optionFilterCheckLocFilesReport = undef;
$optionCheckAppleGlotLog = undef;
$optionSearchDontLocalizeComment = undef;

$optionNibNewBaseScreenshot = undef;
$optionNibNewLocScreenshot = undef;
$optionUpdatedNibNewBaseScreenshot = undef;
$optionUpdatedNibNewLocScreenshot = undef;
$optionAllNibScreenshot = undef;

$optionLocalizeRTLNewUpdatedNewLocNibs = undef;
$optionLocalizeRTLAllNewLocNibs = undef;
$optionLocalizeRTLNibs = undef;

$optionBuildAllFileList = undef;
$optionBuildALAScoreLog = undef;

$optionPrepareTranslationKit = undef;
$optionSplitTranslationKit = undef;
$optionSplitLocEnv = undef;
$optionMergeLocEnv = undef;

$optionReceiveTranslationKit = undef;
$optionReceiveTranslationKitWithAD = undef;

$optionAACheckLocFiles = undef;
$optionCheckWGFiles = undef;
$optionCheckADFiles = undef;
$optionCheckProblemNibs = undef;

$optionFixContaminatedNibs = undef;

$optionCheckNibFiles = undef;
$optionCheckUpdatedNibFiles = undef;

$optionSetLocEnv = undef;
$optionSetLocEnvForceUpdate = undef;
$optionGetLocEnv = undef;
$optionCreateLocEnv = undef;
$optionCopyLocKit = undef;
$optionCopyLXRipEnv = undef;
$optionCopyLocKitDontRunFlidentifier = undef;
$optionCopyBackupForBugFix = undef;
$optionSelectBugFixComponents = undef;
$optionBugFixPreProcess = undef;
$optionVerificator = undef;
$optionRemoveComponent = undef;
$optionCheckLKCX = undef;
$optionCheckConductorLocEnv = undef;
$optionCheckAllLocKitsComponentPlist = undef;
$optionMakeTranslationKitDmg = undef;
$optionBackupReviewedWG = undef;
$optionBackupNewLoc = undef;
$optionBackupAGEnv = undef;
$optionPrepareLocEngDoneImage = undef;
$optionBackupLocEnv = undef;
$optionExtractNonGlotableFiles = undef;
$optionExtractAllNonGlotableFiles = undef;
$optionRestoreNonGlotableFiles = undef;
$optionLocuntar = undef;
$optionCompareBugFixTarballs = undef;
$optionBackupLocEnvInfo = undef;
$optionRestoreLocEnvInfo = undef;
$optionLocalizeLocversionPlist = undef;
$optionDittoProj = undef;
$optionDittoProjDontSanitize = undef;
$optionLoctar = undef;
$optionLoctarBugFix = undef;
$optionLoctarWithGlossary = undef;
$optionSubmission = undef;
$optionCheckLocfiles = undef;
$optionCheckConductorTar = undef;
$optionCheckTarfile = undef;
$optionCheckTarballChecksum = undef;

$optionResetAGEnv = undef;
$optionCountWG = undef;

$optionExtractIndex = undef;
$optionBuildIndex = undef;
$optionChangeHTML = undef;
$optionSetKeyword = undef;
$optionMaterialMixer = undef;

$optionExpandTar = undef;
$optionExpandPackage = undef;
$optionPseudoLoc = undef;
$optionMakeDiskImage = undef;
$optionFCPPlistPreProcess = undef;
$optionFCPPlistPostProcess = undef;
$optionWidgetJSPreProcess = undef;
$optionWidgetJSPostProcess = undef;
$optionJavaPropertiesPreProcess = undef;
$optionJavaPropertiesPostProcess = undef;
$optionFindString = undef;
$optionFindStringInPlist = undef;
$optionPreprocessKeynoteThemes = undef;
$optionPostprocessKeynoteThemes = undef;
$optionPreprocessKeynoteSACountry = undef;
$optionPostprocessKeynoteSACountry = undef;
$optionSplitWGFile = undef;
$optionMergeSplittedWGFile = undef;
$optionSplit3WGFile = undef;
$optionMerge3SplittedWGFile = undef;
$optionConvetUTF8ToUTF16 = undef;
$optionFindNumberFormatter = undef;
$optionIBLockMode = undef;
$optionIBUnlockMode = undef;
$optionIBLock = undef;
$optionIBUnlock = undef;
$optionSelfTesting = undef;
$optionTesting = undef;
$optionHelp = undef;


GetOptions(
	"glot=s"									=> \$gAGEnvironmentPath,
	"lkcx=s"									=> \$gLKCXEnvironmentPath,
	"locenv=s"									=> \$gLocEnvPath,
	"file=s"									=> \$gFilePath,
	"file2=s"									=> \$gFile2Path,
	"file3=s"									=> \$gFile3Path,
	"comp=s"									=> \$gComponentName,
	"comps=s"									=> \$gComponentNames,
	"lang=s"									=> \$gLanguage,
	"translationKit=s"							=> \$gTranslationKitPath,
	"folder=s"									=> \$gFolderPath,
	"folder2=s"									=> \$gFolder2Path,
	"string=s"									=> \$gString,
	"locVer=s"									=> \$gLocVer,
	"debug"										=> \$gDebug,
	"timer"										=> \$gTimer,
	"getLocToolsEnvInfo"						=> \$optionGetLocToolsEnvInfo,
	"mergeInHouseTranslationEnv"				=> \$optionMergeInHouseTranslationEnv,
	"mergeWGFiles"								=> \$optionMergeWGFiles,
	"checkWGFileSyntax"							=> \$optionCheckWGFileSyntax,
	"moveADWGToLG"								=> \$optionMoveADWGToLG,
	"generateNotTranslatedStringsWG"			=> \$optionGenerateNotTranslatedStringsWG,
	"generateOnlyTranslatedStringsAD"			=> \$optionGenerateOnlyTranslatedStringsAD,
	"leverageWGFromOther"						=> \$optionLeverageWGFromOther,
	"leverageWGFromOtherFolder"					=> \$optionLeverageWGFromOtherFolder,
	"xliffToWGAD"								=> \$optionXliffToWGAD,
	"prepGlossaryForTM"							=> \$optionPrepGlossaryForTM,
	"fixAGEnvPermission"						=> \$optionFixAGEnvPermission,
	"rerunAppleGlotPass1"						=> \$optionRerunAppleGlotPass1,
	"rerunAppleGlotPass1ForceUpdate"			=> \$optionRerunAppleGlotPass1ForceUpdate,
	"runAppleGlotPass1"							=> \$optionRunAppleGlotPass1,
	"runAppleGlotPass1ForceUpdate"				=> \$optionRunAppleGlotPass1ForceUpdate,
	"runAppleGlotPass2And3"						=> \$optionRunAppleGlotPass2And3,
	"runAppleGlotPass2"							=> \$optionRunAppleGlotPass2,
	"runAppleGlotPass3"							=> \$optionRunAppleGlotPass3,
	"rerunAppleGlotPass1Xliff"					=> \$optionRerunAppleGlotPass1Xliff,
	"rerunAppleGlotPass1ForceUpdateXliff"		=> \$optionRerunAppleGlotPass1ForceUpdateXliff,
	"runAppleGlotPass1Xliff"					=> \$optionRunAppleGlotPass1Xliff,
	"runAppleGlotPass1ForceUpdateXliff"			=> \$optionRunAppleGlotPass1ForceUpdateXliff,
	"runAppleGlotPass2And3Xliff"				=> \$optionRunAppleGlotPass2And3Xliff,
	"runAppleGlotPass2Xliff"					=> \$optionRunAppleGlotPass2Xliff,
	"runAppleGlotPass3Xliff"					=> \$optionRunAppleGlotPass3Xliff,
	"fixChangedOID"								=> \$optionFixChangedOID,
	"autoLayout"								=> \$optionAutoLayout,
	"autoLayoutScore"							=> \$optionAutoLayoutScore,
	"fixDataDependency"							=> \$optionFixDataDependency,
	"aaCheckAll"								=> \$optionAACheckAll,
	"aaCheckAll_Pro"							=> \$optionAACheckAll_Pro,
	"flidentifier"								=> \$optionFLIdentifier,
	"flverifier"								=> \$optionFLVerifier,
	"aaflverifier"								=> \$optionAAFLVerifier,
	"aaflverifier_Pro"							=> \$optionAAFLVerifier_Pro,
	"checkXliffParameter"						=> \$optionCheckXliffParameter,
	"filterFLverifierReport"					=> \$optionFilterFLVerifierReport,
	"filterFLverifierReport_Pro"				=> \$optionFilterFLVerifierReport_Pro,
	"fwStringVerifier"							=> \$optionFWStringVerifier,
	"updateflverifierLog"						=> \$optionUpdateFLVerifierLog,
	"updateAutoLayoutAdjustLog"					=> \$optionUpdateAutoLayoutAdjustLog,
	"extractWGNeedReview"						=> \$optionExtractWGNeedReview,
	"createThinWG"								=> \$optionCreateThinWG,
	"filterCheckLocFilesReport"					=> \$optionFilterCheckLocFilesReport,
	"checkAppleGlotLog"							=> \$optionCheckAppleGlotLog,
	"searchDontLocalizeComment"					=> \$optionSearchDontLocalizeComment,
	"nibNewBaseScreenshot"						=> \$optionNibNewBaseScreenshot,
	"nibNewLocScreenshot"						=> \$optionNibNewLocScreenshot,
	"updatedNibNewBaseScreenshot"				=> \$optionUpdatedNibNewBaseScreenshot,
	"updatedNibNewLocScreenshot"				=> \$optionUpdatedNibNewLocScreenshot,
	"allNibScreenshot"							=> \$optionAllNibScreenshot,
	"buildAllFileList"							=> \$optionBuildAllFileList,
	"buildALAScoreLog"							=> \$optionBuildALAScoreLog,
	"localizeRTLNewUpdatedNewLocNibs"			=> \$optionLocalizeRTLNewUpdatedNewLocNibs,
	"localizeRTLAllNewLocNibs"					=> \$optionLocalizeRTLAllNewLocNibs,
	"localizeRTLNibs"							=> \$optionLocalizeRTLNibs,
	"prepareTranslationKit"						=> \$optionPrepareTranslationKit,
	"splitTranslationKit"						=> \$optionSplitTranslationKit,
	"splitLocEnv"								=> \$optionSplitLocEnv,
	"mergeLocEnv"								=> \$optionMergeLocEnv,
	"receiveTranslationKit"						=> \$optionReceiveTranslationKit,
	"receiveTranslationKitWithAD"				=> \$optionReceiveTranslationKitWithAD,
	"aaCheckLocFiles"							=> \$optionAACheckLocFiles,
	"checkWGFiles"								=> \$optionCheckWGFiles,
	"checkADFiles"								=> \$optionCheckADFiles,
	"checkProblemNibs"							=> \$optionCheckProblemNibs,
	"fixContaminatedNibs"						=> \$optionFixContaminatedNibs,
	"checkNibFiles"								=> \$optionCheckNibFiles,
	"checkUpdatedNibFiles"						=> \$optionCheckUpdatedNibFiles,
	"setLocEnv"									=> \$optionSetLocEnv,
	"setLocEnvForceUpdate"						=> \$optionSetLocEnvForceUpdate,
	"getLocEnv"									=> \$optionGetLocEnv,
	"createLocEnv"								=> \$optionCreateLocEnv,
	"copyLocKit"								=> \$optionCopyLocKit,
	"copyLocKitDontRunFlidentifier"				=> \$optionCopyLocKitDontRunFlidentifier,
	"copyLXRipEnv"								=> \$optionCopyLXRipEnv,
	"copyBackupForBugFix"						=> \$optionCopyBackupForBugFix,
	"selectBugFixComponents"					=> \$optionSelectBugFixComponents,
	"bugFixPreProcess"							=> \$optionBugFixPreProcess,
	"verificator"								=> \$optionVerificator,
	"removeComponent"							=> \$optionRemoveComponent,
	"checkLKCX"									=> \$optionCheckLKCX,
	"checkConductorLocEnv"						=> \$optionCheckConductorLocEnv,
	"checkAllLocKitsComponentPlist"				=> \$optionCheckAllLocKitsComponentPlist,
	"makeTranslationKitDmg"						=> \$optionMakeTranslationKitDmg,
	"backupReviewedWG"							=> \$optionBackupReviewedWG,
	"backupNewLoc"								=> \$optionBackupNewLoc,
	"backupAGEnv"								=> \$optionBackupAGEnv,
	"prepareLocEngDoneImage"					=> \$optionPrepareLocEngDoneImage,
	"backupLocEnv"								=> \$optionBackupLocEnv,
	"extractNonGlotableFile"					=> \$optionExtractNonGlotableFiles,
	"extractAllNonGlotableFile"					=> \$optionExtractAllNonGlotableFiles,
	"restoreNonGlotableFiles"					=> \$optionRestoreNonGlotableFiles,
	"locuntar"									=> \$optionLocuntar,
	"compareBugFixTarballs"						=> \$optionCompareBugFixTarballs,
	"backupLocEnvInfo"							=> \$optionBackupLocEnvInfo,
	"restoreLocEnvInfo"							=> \$optionRestoreLocEnvInfo,
	"localizeLocversionPlist"					=> \$optionLocalizeLocversionPlist,
	"dittoProj"									=> \$optionDittoProj,
	"dittoProjDontSanitize"						=> \$optionDittoProjDontSanitize,
	"loctar"									=> \$optionLoctar,
	"loctarBugFix"								=> \$optionLoctarBugFix,
	"loctarWithGlossary"						=> \$optionLoctarWithGlossary,
	"submission"								=> \$optionSubmission,
	"checkLocfiles"								=> \$optionCheckLocfiles,
	"checkTarfile"								=> \$optionCheckTarfile,
	"checkConductorTar"							=> \$optionCheckConductorTar,
	"checkTarballChecksum"						=> \$optionCheckTarballChecksum,
	"resetAGEnv"								=> \$optionResetAGEnv,
	"countWG"									=> \$optionCountWG,
	"extractIndex"								=> \$optionExtractIndex,
	"buildIndex"								=> \$optionBuildIndex,
	"changeHTML"								=> \$optionChangeHTML,
	"setKeyword"								=> \$optionSetKeyword,
	"materialMixer"								=> \$optionMaterialMixer,
	"expandTar"									=> \$optionExpandTar,
	"expandPackage"								=> \$optionExpandPackage,
	"copyLproj"									=> \$optionCopyLproj,
	"pseudoLoc"									=> \$optionPseudoLoc,
	"makeDiskImage"								=> \$optionMakeDiskImage,
	"fcpPlistPreProcess"						=> \$optionFCPPlistPreProcess,
	"fcpPlistPostProcess"						=> \$optionFCPPlistPostProcess,
	"widgetJSPreProcess"						=> \$optionWidgetJSPreProcess,
	"widgetJSPostProcess"						=> \$optionWidgetJSPostProcess,
	"javaPropertiesPreProcess"					=> \$optionJavaPropertiesPreProcess,
	"javaPropertiesPostProcess"					=> \$optionJavaPropertiesPostProcess,
	"findString"								=> \$optionFindString,
	"compareXliffFile"							=> \$optionCompareXliffFile,
	"compareXliffFolder"						=> \$optionCompareXliffFolder,
	"compareWGFile"								=> \$optionCompareWGFile,
	"compareWGFolder"							=> \$optionCompareWGFolder,
	"compareTarballFolder"						=> \$optionCompareTarballFolder,
	"compareFolder"								=> \$optionCompareFolder,
	"compareFolder_Pro"							=> \$optionCompareProFolder,
	"compareOldBaseNewBase"						=> \$optionCompareOldBaseNewBase,
	"compareOldLocNewLoc"						=> \$optionCompareOldLocNewLoc,
	"compareNewBaseNewLoc"						=> \$optionCompareNewBaseNewLoc,
	"compareOldBaseOldLoc"						=> \$optionCompareOldBaseOldLoc,
	"findStringInPlist"							=> \$optionFindStringInPlist,
	"preprocessKeynoteThemes"					=> \$optionPreprocessKeynoteThemes,
	"postprocessKeynoteThemes"					=> \$optionPostprocessKeynoteThemes,
	"preprocessKeynoteSACountry"				=> \$optionPreprocessKeynoteSACountry,
	"postprocessKeynoteSACountry"				=> \$optionPostprocessKeynoteSACountry,
	"splitWGFile"								=> \$optionSplitWGFile,
	"mergeSplittedWGFile"						=> \$optionMergeSplittedWGFile,
	"split3WGFile"								=> \$optionSplit3WGFile,
	"merge3SplittedWGFile"						=> \$optionMerge3SplittedWGFile,
	"convertUTF8ToUTF16"						=> \$optionConvetUTF8ToUTF16,
	"findNumberFormatter"						=> \$optionFindNumberFormatter,
	"ibLockMode"								=> \$optionIBLockMode,
	"ibUnlockMode"								=> \$optionIBUnlockMode,
	"ibLock"									=> \$optionIBLock,
	"ibUnlock"									=> \$optionIBUnlock,
	"selfTesting"								=> \$optionSelfTesting,
	"testing"									=> \$optionTesting,
	"h"											=> \$optionHelp,
	"help"										=> \$optionHelp,
)
or die "$!";


if ($gAGEnvironmentPath ne "")
{
	$gAGEnvironmentPath =~ s|/?$|/|;	# has to end with one slash
}

if ($gLocEnvPath ne "")
{
	$gLocEnvPath =~ s|/?$|/|;	# has to end with one slash
}

if ($gLKCXEnvironmentPath ne "")
{
	$gLKCXEnvironmentPath =~ s|/?$|/|;	# has to end with one slash
}

if ($gTranslationKitPath ne "")
{
	$gTranslationKitPath =~ s|/?$|/|;	# has to end with one slash
}

if ($gFolderPath ne "")
{
	$gFolderPath =~ s|/?$|/|;	# has to end with one slash
}

if ($gFolder2Path ne "")
{
	$gFolder2Path =~ s|/?$|/|;	# has to end with one slash
}


if ($gTimer)
{
	$gStartTime = `date`;

	AALocUtilities::PrintLog("\n\n******************************************************************************************\n");
	AALocUtilities::PrintLog("* Start at: $gStartTime");
	AALocUtilities::PrintLog("******************************************************************************************\n");
}


if ($optionGetLocToolsEnvInfo)
{
	GetLocToolsEnvInfo();
}
elsif ($optionCheckWGFileSyntax)
{
	if (($gFilePath ne "") && (-e $gFilePath))
	{
		CheckWGFileSyntax($gFilePath);
	}
	elsif (($gFolderPath ne "") && (-e $gFolderPath))
	{
		CheckWGFolderSyntax($gFolderPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionMoveADWGToLG)
{
	if (-d $gAGEnvironmentPath)
	{
		MoveADWGToLG($gAGEnvironmentPath . "_ApplicationDictionaries/",
					 $gAGEnvironmentPath . "_WorkGlossary/",
					 $gAGEnvironmentPath . "_LanguageGlossaries/",
					 $gComponentName);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionMergeInHouseTranslationEnv)
{
	if (-d $gFolderPath)
	{
		MergeInHouseTranslationEnv($gFolderPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCompareXliffFile)
{
	if ((-e $gFilePath) && (-e $gFile2Path))
	{
		my $result = PowerCompareXliffFile($gFilePath, $gFile2Path);
		
		AALocUtilities::PrintLog($result);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' or '$gFile2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCompareXliffFolder)
{
	if ((-d $gFolderPath) && (-d $gFolder2Path))
	{
		my $result = PowerCompareXliffFolder($gFolderPath, $gFolder2Path);
		
		AALocUtilities::PrintLog($result);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' or '$gFolder2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCompareWGFile)
{
	if ((-e $gFilePath) && (-e $gFile2Path))
	{
		my $result = PowerCompareWGFile($gFilePath, $gFile2Path);
		
		AALocUtilities::PrintLog($result);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' or '$gFile2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCompareWGFolder)
{
	if ((-d $gFolderPath) && (-d $gFolder2Path))
	{
		my $result = PowerCompareWGFolder($gFolderPath, $gFolder2Path);
		
		AALocUtilities::PrintLog($result);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' or '$gFolder2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCompareTarballFolder)
{
	if ((-d $gFolderPath) && (-d $gFolder2Path))
	{
		my $result = PowerCompareTarballFolder($gFolderPath, $gFolder2Path, "");
		
		AALocUtilities::PrintLog($result);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' or '$gFolder2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCompareFolder)
{
	if ((-d $gFolderPath) && (-d $gFolder2Path))
	{
		my $result = CompareFolder($gFolderPath, $gFolder2Path);
		
		AALocUtilities::PrintLog($result);
	}
	else
	{

		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' or '$gFolder2Path' doesn't exist.\n");
		exit(1);
	}
}

elsif ($optionCompareProFolder)
{
	#	print "1:$gFolderPath\n";
	#	print "2:$gFolder2Path\n";
	if ((-d $gFolderPath) && (-d $gFolder2Path))
	{
		my $result = CompareFolder_Pro($gFolderPath, $gFolder2Path);
		
		AALocUtilities::PrintLog($result);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' or '$gFolder2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionPrepareTranslationKit)
{
	if ($gAGEnvironmentPath ne "")
	{
		if (-d $gAGEnvironmentPath)
		{
			if ($gTranslationKitPath eq "")
			{
				$gTranslationKitPath = $gAGEnvironmentPath . "_TranslationKit/";
				AALocFileUtilities::RemoveFolder($gTranslationKitPath);
				AALocFileUtilities::CreateFolderIfNotExist($gTranslationKitPath);
			}
			
			
			if (IsLXAppleGlotEnvironment($gAGEnvironmentPath))
			{
				PrepareTranslationKitLX($gAGEnvironmentPath, $gTranslationKitPath);
			}
			else
			{
				PrepareTranslationKit($gAGEnvironmentPath, $gTranslationKitPath);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			$translationKitPath = AALocEnvUtilities::GetUniqueTranslationKitPathFromLocEnv($locenv);
			AALocFileUtilities::CreateFolderIfNotExist($translationKitPath);
		
			$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($locenv);

			if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv)
			{
				my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
				
				if (-d $appleGlotEnvPath)
				{
					if (IsLXAppleGlotEnvironment($appleGlotEnvPath))
					{
						PrepareTranslationKitLX($appleGlotEnvPath, $translationKitPath);
					}
					else
					{
						PrepareTranslationKit($appleGlotEnvPath, $translationKitPath);
					}
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
					exit(1);
				}
			}
			elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
			{
				PrepareHelpTranslationKit($locenv, $translationKitPath);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: prepareTranslationKit doesn't support your LocEnv\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionAACheckAll)
{
	if ($gAGEnvironmentPath ne "")
	{
		if (-d $gAGEnvironmentPath)
		{
			AACheckLocFiles($gAGEnvironmentPath);
			# CheckNibFiles($gAGEnvironmentPath, kAll);
			# AutoLayoutScore($gAGEnvironmentPath, "");
			AAFLVerifier($gAGEnvironmentPath);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($locenv);

			if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWBugFixLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kConductorLocEnv)
			{
				my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
				
				if (-d $appleGlotEnvPath)
				{
					AACheckLocFiles($appleGlotEnvPath);
					# CheckNibFiles($appleGlotEnvPath, kAll);
					# AutoLayoutScore($appleGlotEnvPath, "");
					AAFLVerifier($appleGlotEnvPath);

					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierReport.txt", kOpen);
					#AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkNibFilesLog.txt", kOpen);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkLocFilesLog.txt", kOpen);
					
					if ($gCurrentLocEnvType != AALocEnvUtilities::kConductorLocEnv)
					{
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkADFilesLog.txt", kOpen);
					}

					FilterFLVerifierReport($locenv, "");
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierFilteredReport.txt", kOpen);
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
					exit(1);
				}
			}
			elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
			{
				AAHelpCheckAll($locenv);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: aaCheckAll doesn't support your LocEnv\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}


elsif ($optionAACheckAll_Pro)
{
	if ($gAGEnvironmentPath ne "")
	{
		if (-d $gAGEnvironmentPath)
		{
			AACheckLocFiles($gAGEnvironmentPath);
		    # CheckNibFiles($gAGEnvironmentPath, kAll);
			# AutoLayoutScore($gAGEnvironmentPath, "");
			AAFLVerifier_Pro($gAGEnvironmentPath);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($locenv);

			if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWBugFixLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kConductorLocEnv)
			{
				my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
				
				if (-d $appleGlotEnvPath)
				{
					AACheckLocFiles($appleGlotEnvPath);
					# CheckNibFiles($appleGlotEnvPath, kAll);
					# AutoLayoutScore($appleGlotEnvPath, "");
					#print "4444444444\n";
					AAFLVerifier_Pro($appleGlotEnvPath);

					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierReport_Pro.txt", kOpen);
					# AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkNibFilesLog.txt", kOpen);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkLocFilesLog.txt", kOpen);
					
					if ($gCurrentLocEnvType != AALocEnvUtilities::kConductorLocEnv)
					{
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkADFilesLog.txt", kOpen);
					}

					#print "aaaaaaaaaaaaaaa\n";
					FilterFLVerifierReport_Pro($locenv, "");
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierFilteredReport_Pro.txt", kOpen);
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
					exit(1);
				}
			}
			elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
			{
				AAHelpCheckAll($locenv);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: aaCheckAll Pro doesn't support your LocEnv\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}



elsif ($optionCheckXliffParameter)
{
print "Checking......\n";

	my $result="";
		
	if (-d $gFolderPath)
	{
		$result = `$gCheckXliffParameterPath "$gFolderPath"`;
	}
	else
	{
		$result = `$gCheckXliffParameterPath "$gFilePath"`;

	}
	
	
	AALocUtilities::PrintLog($result);
}

elsif ($optionMergeWGFiles
		|| $optionGenerateNotTranslatedStringsWG
		|| $optionGenerateOnlyTranslatedStringsAD
		|| $optionFixAGEnvPermission
		|| $optionCompareOldBaseNewBase
		|| $optionCompareOldLocNewLoc
		|| $optionCompareNewBaseNewLoc
		|| $optionCompareOldBaseOldLoc
		|| $optionRerunAppleGlotPass1
		|| $optionRerunAppleGlotPass1ForceUpdate
		|| $optionRunAppleGlotPass1
		|| $optionRunAppleGlotPass1ForceUpdate
		|| $optionRunAppleGlotPass2
		|| $optionRunAppleGlotPass3
		|| $optionRunAppleGlotPass2And3
		|| $optionRerunAppleGlotPass1Xliff
		|| $optionRerunAppleGlotPass1ForceUpdateXliff
		|| $optionRunAppleGlotPass1Xliff
		|| $optionRunAppleGlotPass1ForceUpdateXliff
		|| $optionRunAppleGlotPass2Xliff
		|| $optionRunAppleGlotPass3Xliff
		|| $optionRunAppleGlotPass2And3Xliff
		|| $optionFixChangedOID
		|| $optionAutoLayout
		|| $optionAutoLayoutScore
		|| $optionFixDataDependency
		|| $optionFLIdentifier
		|| $optionFLVerifier
		|| $optionAAFLVerifier
		|| $optionAAFLVerifier_Pro
		|| $optionCheckAppleGlotLog
		|| $optionNibNewBaseScreenshot
		|| $optionNibNewLocScreenshot
		|| $optionUpdatedNibNewBaseScreenshot
		|| $optionUpdatedNibNewLocScreenshot
		|| $optionAllNibScreenshot
		|| $optionLocalizeRTLNewUpdatedNewLocNibs
		|| $optionLocalizeRTLAllNewLocNibs
		|| $optionAACheckLocFiles
		|| $optionCheckWGFiles
		|| $optionCheckADFiles
		|| $optionCheckProblemNibs
		|| $optionFixContaminatedNibs
		|| $optionCheckNibFiles
		|| $optionCheckUpdatedNibFiles
		|| $optionVerificator
		|| $optionBackupReviewedWG
		|| $optionBackupNewLoc
		|| $optionExtractNonGlotableFiles
		|| $optionExtractAllNonGlotableFiles
		|| $optionRestoreNonGlotableFiles
		|| $optionLocalizeLocversionPlist
		|| $optionFCPPlistPreProcess
		|| $optionWidgetJSPreProcess
		|| $optionJavaPropertiesPreProcess
		|| $optionBuildAllFileList
		|| $optionResetAGEnv
		|| $optionCountWG)
{
	if ($gAGEnvironmentPath ne "")
	{
		if (-d $gAGEnvironmentPath)
		{
			if ($optionMergeWGFiles)
			{
				if (IsLXAppleGlotEnvironment($gAGEnvironmentPath))
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
					AALocUtilities::PrintLog("# Merge LX WG files\n");
					AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
						
					MergeWGFilesLX($gAGEnvironmentPath);
				}
				else
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
					AALocUtilities::PrintLog("# Merge WG files\n");
					AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
						
					MergeWGFiles($gAGEnvironmentPath);
				}
			}
			elsif ($optionGenerateNotTranslatedStringsWG)
			{
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# Generate Not Translated Strings WG\n");
				AALocUtilities::PrintLog("#========================================================================================\n");

				GenerateNotTranslatedStringsWG($gAGEnvironmentPath);
			}
			elsif ($optionGenerateOnlyTranslatedStringsAD)
			{
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# Generate Only Translated Strings AD\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				
				GenerateOnlyTranslatedStringsAD($gAGEnvironmentPath);
			}
			elsif ($optionFixAGEnvPermission)
			{
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# Fix AppleGlot Environment Permission\n");
				AALocUtilities::PrintLog("#========================================================================================\n");

				AALocUtilities::PrintLog("Fixing $gAGEnvironmentPath\n");
				system "$gSudoPath chmod -R +w $gAGEnvironmentPath*";
			}
			elsif ($optionCompareOldBaseNewBase)
			{
				CompareOldBaseNewBase($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionCompareOldLocNewLoc)
			{
				CompareOldLocNewLoc($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionCompareNewBaseNewLoc)
			{
				CompareNewBaseNewLoc($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionCompareOldBaseOldLoc)
			{
				CompareOldBaseOldLoc($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionRerunAppleGlotPass1 || $optionRerunAppleGlotPass1Xliff)
			{
				if ($optionRerunAppleGlotPass1)
				{
					$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
				}
				else
				{
					$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
				}
				
				RerunAppleGlotPass1($gAGEnvironmentPath, $gComponentName, $gLanguage, kDontForceUpdate);
			}
			elsif ($optionRerunAppleGlotPass1ForceUpdate || $optionRerunAppleGlotPass1ForceUpdateXliff)
			{
				if ($optionRerunAppleGlotPass1ForceUpdate)
				{
					$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
				}
				else
				{
					$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
				}
				
				RerunAppleGlotPass1($gAGEnvironmentPath, $gComponentName, $gLanguage, kForceUpdate);
			}
			elsif ($optionRunAppleGlotPass1 || $optionRunAppleGlotPass1Xliff)
			{
				if ($gLanguage ne "")
				{
					if ($optionRunAppleGlotPass1)
					{
						$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
					}
					else
					{
						$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
					}
					
					RunAppleGlotPass1($gAGEnvironmentPath, $gComponentName, $gLanguage, kDontForceUpdate);
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: Please specific the -lang.\n");
					exit(1);
				}
			}
			elsif ($optionRunAppleGlotPass1ForceUpdate || $optionRunAppleGlotPass1ForceUpdateXliff)
			{
				if ($gLanguage ne "")
				{
					if ($optionRunAppleGlotPass1ForceUpdate)
					{
						$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
					}
					else
					{
						$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
					}
					
					RunAppleGlotPass1($gAGEnvironmentPath, $gComponentName, $gLanguage, kForceUpdate);
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: Please specific the -lang.\n");
					exit(1);
				}
			}
			elsif ($optionRunAppleGlotPass2 || $optionRunAppleGlotPass2Xliff)
			{
				if ($optionRunAppleGlotPass2)
				{
					$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
				}
				else
				{
					$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
				}
				
				RunAppleGlotPass2($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionRunAppleGlotPass3 || $optionRunAppleGlotPass3Xliff)
			{
				if ($optionRunAppleGlotPass3)
				{
					$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
				}
				else
				{
					$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
				}
				
				RunAppleGlotPass3($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionRunAppleGlotPass2And3 || $optionRunAppleGlotPass2And3Xliff)
			{
				if ($optionRunAppleGlotPass2And3)
				{
					$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
				}
				else
				{
					$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
				}
				
				RunAppleGlotPass2And3($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionFixChangedOID)
			{
				FixChangedOID($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionAutoLayout)
			{
				AutoLayout($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionAutoLayoutScore)
			{
				AutoLayoutScore($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionFixDataDependency)
			{
				FixDataDependency($gAGEnvironmentPath);
			}
			elsif ($optionFLIdentifier)
			{
				FLIdentifier($gAGEnvironmentPath);
			}
			elsif ($optionFLVerifier)
			{
				FLVerifier($gAGEnvironmentPath);
			
				my $flVerifierReportFileName = AALocFileUtilities::GetDirectoryBaseName($gAGEnvironmentPath) . "_flverifierReport.txt";
				my $flVerifierReportFilePath = $gAGEnvironmentPath . "_Logs/" . $flVerifierReportFileName;
			
				AALocUtilities::PrintLog("flverifier report: $flVerifierReportFilePath\n");
				`open -a "AD Viewer" "$flVerifierReportFilePath"`;
			}
			elsif ($optionAAFLVerifier)
			{
				AAFLVerifier($gAGEnvironmentPath);
			
				my $flVerifierReportFileName = AALocFileUtilities::GetDirectoryBaseName($gAGEnvironmentPath) . "_flverifierReport.txt";
				my $flVerifierReportFilePath = $gAGEnvironmentPath . "_Logs/" . $flVerifierReportFileName;
			
				AALocUtilities::PrintLog("flverifier report: $flVerifierReportFilePath\n");
				`open -a "AD Viewer" "$flVerifierReportFilePath"`;
			}
			elsif ($optionCheckAppleGlotLog)
			{
				CheckAppleGlotLog($gAGEnvironmentPath);
			}
			elsif ($optionNibNewBaseScreenshot
					|| $optionNibNewLocScreenshot
					|| $optionUpdatedNibNewBaseScreenshot
					|| $optionUpdatedNibNewLocScreenshot
					|| $optionAllNibScreenshot)
			{
				my $updatedOnly = kAll;
				my $newBase = 0;
				my $newLoc = 0;
				
				
				if ($optionUpdatedNibNewBaseScreenshot || $optionUpdatedNibNewLocScreenshot)
				{
					$updatedOnly = kUpdatedOnly;
				}

				if ($optionNibNewBaseScreenshot || $optionUpdatedNibNewBaseScreenshot || $optionAllNibScreenshot)
				{
					$newBase = 1;
				}

				if ($optionNibNewLocScreenshot || $optionUpdatedNibNewLocScreenshot || $optionAllNibScreenshot)
				{
					$newLoc = 1;
				}
				
				NibScreenshot($gAGEnvironmentPath, $updatedOnly, $newBase, $newLoc);
			}
			elsif ($optionLocalizeRTLNewUpdatedNewLocNibs
					|| $optionLocalizeRTLAllNewLocNibs)
			{
				my $updatedOnly = kAll;				
				
				if ($optionLocalizeRTLNewUpdatedNewLocNibs)
				{
					$updatedOnly = kUpdatedOnly;
				}
												
				LocalizeAppleGlotNewLocRTLNibs($gAGEnvironmentPath, $updatedOnly, $gComponentName);
			}
			elsif ($optionAACheckLocFiles)
			{
				AACheckLocFiles($gAGEnvironmentPath);
			}
			elsif ($optionCheckWGFiles)
			{
				CheckWGADFolder($gAGEnvironmentPath, kCheckWGFiles);
			}
			elsif ($optionCheckADFiles)
			{
				CheckWGADFolder($gAGEnvironmentPath, kCheckADFiles);
			}
			elsif ($optionCheckProblemNibs)
			{
				CheckProblemNibs($gAGEnvironmentPath);
			}
			elsif ($optionFixContaminatedNibs)
			{
				FixContaminatedNibs($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionCheckNibFiles)
			{
				CheckNibFiles($gAGEnvironmentPath, kAll);
			}
			elsif ($optionCheckUpdatedNibFiles)
			{
				CheckNibFiles($gAGEnvironmentPath, kUpdatedOnly);
			}
			elsif ($optionVerificator)
			{
				Verificator($gAGEnvironmentPath);
			}
			elsif ($optionBackupReviewedWG)
			{
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# Backup reviewed WG\n");
				AALocUtilities::PrintLog("#========================================================================================\n");

				my $appleGlotWGPath = $gAGEnvironmentPath . "_WorkGlossary/";
				my $appleGlotReviewedWGPath = $gAGEnvironmentPath . "Reviewed_WG/";
		
				AALocUtilities::PrintLog("# Backup from: $appleGlotWGPath\n");
				AALocUtilities::PrintLog("#          to: $appleGlotReviewedWGPath\n");
				`cp -R "$appleGlotWGPath" "$appleGlotReviewedWGPath"`;
			}
			elsif ($optionBackupNewLoc)
			{
				my $appleGlotNewLocPath = $gAGEnvironmentPath . "_NewLoc";
				my $appleGlotNewLocOrgPath = $gAGEnvironmentPath . "_NewLoc_Org";

				AALocUtilities::PrintLog("Backup $appleGlotNewLocPath\n");
				AALocUtilities::PrintLog("to     $appleGlotNewLocOrgPath\n");
				
				`ditto "$appleGlotNewLocPath" "$appleGlotNewLocOrgPath"`;
			}
			elsif ($optionExtractNonGlotableFiles)
			{
				# SA
				# system "$gAAProcessNonGlotableFilesPath -extractByProject $gAGEnvironmentPath";
				`"$gAAProcessNonGlotableFilesPath" -extractByProject "$gAGEnvironmentPath"`;
			}
			elsif ($optionExtractAllNonGlotableFiles)
			{
				# SA
				# system "$gAAProcessNonGlotableFilesPath -extractByProject -extractAll $gAGEnvironmentPath";
				`"$gAAProcessNonGlotableFilesPath" -extractByProject -extractAll "$gAGEnvironmentPath"`;
			}
			elsif ($optionRestoreNonGlotableFiles)
			{
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# Restore non-glottable files\n");
				AALocUtilities::PrintLog("#========================================================================================\n");

				# SA
				# system "$gAAProcessNonGlotableFilesPath -restore $gAGEnvironmentPath";
				`"$gAAProcessNonGlotableFilesPath" -restore "$gAGEnvironmentPath"`;
			}
			elsif ($optionLocalizeLocversionPlist)
			{
				LocalizeLocversionPlist($gAGEnvironmentPath);
			}
			elsif ($optionFCPPlistPreProcess)
			{
				FCPPlistPreProcess($gAGEnvironmentPath);
			}
			elsif ($optionWidgetJSPreProcess)
			{
				WidgetJSPreProcess($gAGEnvironmentPath);
			}
			elsif ($optionJavaPropertiesPreProcess)
			{
				JavaPropertiesPreProcess($gAGEnvironmentPath);
			}
			elsif ($optionBuildAllFileList)
			{
				BuildAllFileList($gAGEnvironmentPath);
			}
			elsif ($optionResetAGEnv)
			{
				ResetAGEnv($gAGEnvironmentPath, $gComponentName);
			}
			elsif ($optionCountWG)
			{
				CountAppleGlotWGFiles($gAGEnvironmentPath);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
			
			if (-d $appleGlotEnvPath)
			{
				if ($optionMergeWGFiles)
				{
					if (IsLXAppleGlotEnvironment($appleGlotEnvPath))
					{
						AALocUtilities::PrintLog("\n");
						AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
						AALocUtilities::PrintLog("# Merge LX WG files\n");
						AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
						
						MergeWGFilesLX($appleGlotEnvPath);
					}
					else
					{
						AALocUtilities::PrintLog("\n");
						AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
						AALocUtilities::PrintLog("# Merge WG files\n");
						AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
						
						MergeWGFiles($appleGlotEnvPath);
					}
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkWGFilesLog.txt", kOpen);
				}
				elsif ($optionGenerateNotTranslatedStringsWG)
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#========================================================================================\n");
					AALocUtilities::PrintLog("# Generate Not Translated Strings WG\n");
					AALocUtilities::PrintLog("#========================================================================================\n");

					GenerateNotTranslatedStringsWG($appleGlotEnvPath);
				}
				elsif ($optionGenerateOnlyTranslatedStringsAD)
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#========================================================================================\n");
					AALocUtilities::PrintLog("# Generate Only Translated Strings AD\n");
					AALocUtilities::PrintLog("#========================================================================================\n");
					
					GenerateOnlyTranslatedStringsAD($appleGlotEnvPath);
				}
				elsif ($optionFixAGEnvPermission)
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#========================================================================================\n");
					AALocUtilities::PrintLog("# Fix AppleGlot Environment Permission\n");
					AALocUtilities::PrintLog("#========================================================================================\n");

					AALocUtilities::PrintLog("Fixing $appleGlotEnvPath\n");
					system "$gSudoPath chmod -R +w $appleGlotEnvPath*";
				}
				elsif ($optionCompareOldBaseNewBase)
				{
					CompareOldBaseNewBase($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionCompareOldLocNewLoc)
				{
					CompareOldLocNewLoc($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionCompareNewBaseNewLoc)
				{
					CompareNewBaseNewLoc($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionCompareOldBaseOldLoc)
				{
					CompareOldBaseOldLoc($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionRerunAppleGlotPass1 || $optionRerunAppleGlotPass1Xliff || $optionRerunAppleGlotPass1ForceUpdate || $optionRunAppleGlotPass1ForceUpdateXliff)
				{
					if ($gLanguage eq "")
					{
						$locEnvLang = AALocEnvUtilities::GetCountryCodeFromLocEnv($locenv);
						
						if ($locEnvLang ne "")
						{
							$gLanguage = $AALocUtilities::kCountryCode2AGLanguageCode{$locEnvLang};
						}
					}
					
					if ($optionRerunAppleGlotPass1 || $optionRerunAppleGlotPass1Xliff)
					{
						if ($optionRerunAppleGlotPass1)
						{
							$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
						}
						else
						{
							$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
						}
						
						RerunAppleGlotPass1($appleGlotEnvPath, $gComponentName, $gLanguage, kDontForceUpdate);
					}
					else
					{
						if ($optionRerunAppleGlotPass1ForceUpdate)
						{
							$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
						}
						else
						{
							$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
						}
						
						RerunAppleGlotPass1($appleGlotEnvPath, $gComponentName, $gLanguage, kForceUpdate);
					}
				}
				elsif ($optionRunAppleGlotPass1 || $optionRunAppleGlotPass1Xliff || $optionRunAppleGlotPass1ForceUpdate || $optionRunAppleGlotPass1ForceUpdateXliff)
				{
					if ($gLanguage eq "")
					{
						$locEnvLang = AALocEnvUtilities::GetCountryCodeFromLocEnv($locenv);
						
						if ($locEnvLang ne "")
						{
							$gLanguage = $AALocUtilities::kCountryCode2AGLanguageCode{$locEnvLang};
						}
					}
					
					if ($optionRunAppleGlotPass1 || $optionRunAppleGlotPass1Xliff)
					{
						if ($optionRunAppleGlotPass1)
						{
							$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
						}
						else
						{
							$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
						}
					
						RunAppleGlotPass1($appleGlotEnvPath, $gComponentName, $gLanguage, kDontForceUpdate);
					}
					else
					{
						if ($optionRunAppleGlotPass1ForceUpdate)
						{
							$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
						}
						else
						{
							$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
						}
						
						RunAppleGlotPass1($appleGlotEnvPath, $gComponentName, $gLanguage, kForceUpdate);
					}
				}
				elsif ($optionRunAppleGlotPass2 || $optionRunAppleGlotPass2Xliff)
				{
					if ($optionRunAppleGlotPass2)
					{
						$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
					}
					else
					{
						$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
					}
					
					RunAppleGlotPass2($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionRunAppleGlotPass3 || $optionRunAppleGlotPass3Xliff)
				{
					if ($optionRunAppleGlotPass3)
					{
						$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
					}
					else
					{
						$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
					}
					
					RunAppleGlotPass3($appleGlotEnvPath, $gComponentName);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkLocFilesLog.txt", kOpen);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkAppleGlotLogFilesLog.txt", kOpen);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkADFilesLog.txt", kOpen);
				}
				elsif ($optionRunAppleGlotPass2And3 || $optionRunAppleGlotPass2And3Xliff)
				{
					if ($optionRunAppleGlotPass2And3)
					{
						$gAppleGlotCLPath = $gAppleGlotCLNonXliffPath;
					}
					else
					{
						$gAppleGlotCLPath = $gAppleGlotCLXliffPath;
					}
					
					my $result = RunAppleGlotPass2And3($appleGlotEnvPath, $gComponentName);
					
					if ($result == 1)
					{
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkLocFilesLog.txt", kOpen);
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkAppleGlotLogFilesLog.txt", kOpen);
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkADFilesLog.txt", kOpen);
					}
				}
				elsif ($optionFixChangedOID)
				{
					my $result = FixChangedOID($appleGlotEnvPath, $gComponentName);
					
					if ($result == 1)
					{
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkLocFilesLog.txt", kOpen);
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkAppleGlotLogFilesLog.txt", kOpen);
					}
				}
				elsif ($optionAutoLayout)
				{
					AutoLayout($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionAutoLayoutScore)
				{
					AutoLayoutScore($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionFixDataDependency)
				{
					FixDataDependency($appleGlotEnvPath);
				}
				elsif ($optionFLIdentifier)
				{
					FLIdentifier($appleGlotEnvPath);
				}
				elsif ($optionFLVerifier)
				{
					FLVerifier($appleGlotEnvPath);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierReport.txt", kOpen);

					FilterFLVerifierReport($locenv, "");
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierFilteredReport.txt", kOpen);
				}
				elsif ($optionAAFLVerifier)
				{
					if ($gComponentName ne "")
					{
						my $reportPath = AALocEnvUtilities::GetReportsPathFromLocEnv($locenv);
						my $tempAppleGlotEnv = $locenv . "TempAGEnv/";
						
						AALocFileUtilities::RemoveFileAndFolder($tempAppleGlotEnv);
						AALocFileUtilities::CreateFolderIfNotExist($tempAppleGlotEnv);
						AALocFileUtilities::CreateFolderIfNotExist($tempAppleGlotEnv . "_Logs/");

						AALocFileUtilities::CopyFolder($appleGlotEnvPath . "_NewBase/" . $gComponentName, $tempAppleGlotEnv . "_NewBase/" . $gComponentName);
						AALocFileUtilities::CopyFolder($appleGlotEnvPath . "_NewLoc/" . $gComponentName, $tempAppleGlotEnv . "_NewLoc/" . $gComponentName);
						AALocFileUtilities::CopyFolder($appleGlotEnvPath . "_OldBase/" . $gComponentName, $tempAppleGlotEnv . "_OldBase/" . $gComponentName);
						AALocFileUtilities::CopyFolder($appleGlotEnvPath . "_OldLoc/" . $gComponentName, $tempAppleGlotEnv . "_OldLoc/" . $gComponentName);
						
						AAFLVerifier($tempAppleGlotEnv);
						FilterFLVerifierReport($locenv, $tempAppleGlotEnv);

						AALocFileUtilities::CopyFileIfExist($tempAppleGlotEnv . "_Logs/TempAGEnv_flverifierReport.txt", $reportPath . $gComponentName . "_flverifierReport.txt");
						AALocFileUtilities::CopyFileIfExist($tempAppleGlotEnv . "_Logs/TempAGEnv_flverifierFilteredReport.txt", $reportPath . $gComponentName . "_flverifierFilteredReport.txt");

						AALocFileUtilities::RemoveFileAndFolder($tempAppleGlotEnv);
					}
					else
					{
						AAFLVerifier($appleGlotEnvPath);
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierReport.txt", kOpen);
						
						FilterFLVerifierReport($locenv, "");
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierFilteredReport.txt", kOpen);
					}
				}
				elsif ($optionCheckAppleGlotLog)
				{
					CheckAppleGlotLog($appleGlotEnvPath);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkAppleGlotLogFilesLog.txt", kOpen);
				}
				elsif ($optionNibNewBaseScreenshot
						|| $optionNibNewLocScreenshot
						|| $optionUpdatedNibNewBaseScreenshot
						|| $optionUpdatedNibNewLocScreenshot
						|| $optionAllNibScreenshot)
				{
					my $updatedOnly = kAll;
					my $newBase = 0;
					my $newLoc = 0;
					
					
					if ($optionUpdatedNibNewBaseScreenshot || $optionUpdatedNibNewLocScreenshot)
					{
						$updatedOnly = kUpdatedOnly;
					}

					if ($optionNibNewBaseScreenshot || $optionUpdatedNibNewBaseScreenshot || $optionAllNibScreenshot)
					{
						$newBase = 1;
					}

					if ($optionNibNewLocScreenshot || $optionUpdatedNibNewLocScreenshot || $optionAllNibScreenshot)
					{
						$newLoc = 1;
					}
					
					NibScreenshot($appleGlotEnvPath, $updatedOnly, $newBase, $newLoc);
				}
				elsif ($optionLocalizeRTLNewUpdatedNewLocNibs
						|| $optionLocalizeRTLAllNewLocNibs)
				{
					my $updatedOnly = kAll;				
					
					if ($optionLocalizeRTLNewUpdatedNewLocNibs)
					{
						$updatedOnly = kUpdatedOnly;
					}
					
					LocalizeAppleGlotNewLocRTLNibs($appleGlotEnvPath, $updatedOnly, $gComponentName);
				}
				elsif ($optionAACheckLocFiles)
				{
					AACheckLocFiles($appleGlotEnvPath);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkLocFilesLog.txt", kOpen);
				}
				elsif ($optionCheckWGFiles)
				{
					CheckWGADFolder($appleGlotEnvPath, kCheckWGFiles);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkWGFilesLog.txt", kOpen);
				}
				elsif ($optionCheckADFiles)
				{
					CheckWGADFolder($appleGlotEnvPath, kCheckADFiles);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkADFilesLog.txt", kOpen);
				}
				elsif ($optionCheckProblemNibs)
				{
					CheckProblemNibs($appleGlotEnvPath);
					
					# AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_ProblemNibs.txt", kNotOpen);
					# AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_ProblemNibs.html", kNotOpen);
					# AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_ProblemNibs.rpt", kOpen);
				}
				elsif ($optionFixContaminatedNibs)
				{
					FixContaminatedNibs($appleGlotEnvPath, $gComponentName);
					
					my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($appleGlotEnvPath);
					my $reportFolderPath = AALocEnvUtilities::GetReportsPathFromLocEnv($locenv);
					my $sourceFile;
					my $targeFile;
					
					$sourceFile = $appleGlotEnvPath . "/pcx_result_after_fixup_autofixable";
					$targeFile = $reportFolderPath . "/$appleGlotEnvironmentName" . "_AfterAutoFixable";
					AALocFileUtilities::CopyFile($sourceFile, $targeFile, kOpen);
					
					$sourceFile = $appleGlotEnvPath . "/pcx_result_before_fixup_autofixable";
					$targeFile = $reportFolderPath . "/$appleGlotEnvironmentName" . "_BeforeAutoFixable";
					AALocFileUtilities::CopyFile($sourceFile, $targeFile, kOpen);
					
					$sourceFile = $appleGlotEnvPath . "/pcx_result_before_fixup_manualwork";
					$targeFile = $reportFolderPath . "/$appleGlotEnvironmentName" . "_BeforeManualWork";
					AALocFileUtilities::CopyFile($sourceFile, $targeFile, kOpen);
				}
				elsif ($optionCheckNibFiles)
				{
					CheckNibFiles($appleGlotEnvPath, kAll);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkNibFilesLog.txt", kOpen);
				}
				elsif ($optionCheckUpdatedNibFiles)
				{
					CheckNibFiles($appleGlotEnvPath, kUpdatedOnly);
					
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkUpdatedNibFilesLog.txt", kOpen);
				}
				elsif ($optionVerificator)
				{
					Verificator($appleGlotEnvPath);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_verificator.html", kNotOpen);
				}
				elsif ($optionBackupReviewedWG)
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#========================================================================================\n");
					AALocUtilities::PrintLog("# Backup reviewed WG\n");
					AALocUtilities::PrintLog("#========================================================================================\n");

					my $appleGlotWGPath = $appleGlotEnvPath . "_WorkGlossary/";
					my $appleGlotReviewedWGPath = $appleGlotEnvPath . "Reviewed_WG/";
			
					AALocUtilities::PrintLog("# Backup from: $appleGlotWGPath\n");
					AALocUtilities::PrintLog("#          to: $appleGlotReviewedWGPath\n");
					`cp -R "$appleGlotWGPath" "$appleGlotReviewedWGPath"`;
				}
				elsif ($optionBackupNewLoc)
				{
					my $appleGlotNewLocPath = $appleGlotEnvPath . "_NewLoc";
					my $appleGlotNewLocOrgPath = $appleGlotEnvPath . "_NewLoc_Org";
			
					AALocUtilities::PrintLog("Backup $appleGlotNewLocPath\n");
					AALocUtilities::PrintLog("to     $appleGlotNewLocOrgPath\n");
					
					`ditto "$appleGlotNewLocPath" "$appleGlotNewLocOrgPath"`;
				}
				elsif ($optionExtractNonGlotableFiles)
				{
					# SA
					# system "$gAAProcessNonGlotableFilesPath -extractByProject $appleGlotEnvPath";
					`"$gAAProcessNonGlotableFilesPath" -extractByProject "$appleGlotEnvPath"`;
				}
				elsif ($optionExtractAllNonGlotableFiles)
				{
					# SA
					# system "$gAAProcessNonGlotableFilesPath -extractByProject -extractAll $appleGlotEnvPath";
					`"$gAAProcessNonGlotableFilesPath" -extractByProject -extractAll "$appleGlotEnvPath"`;
				}
				elsif ($optionRestoreNonGlotableFiles)
				{
					AALocUtilities::PrintLog("\n");
					AALocUtilities::PrintLog("#========================================================================================\n");
					AALocUtilities::PrintLog("# Restore non-glottable files\n");
					AALocUtilities::PrintLog("#========================================================================================\n");

					# SA
					system "$gAAProcessNonGlotableFilesPath -restore $appleGlotEnvPath";
					`"$gAAProcessNonGlotableFilesPath" -restore "$appleGlotEnvPath"`;
				}
				elsif ($optionLocalizeLocversionPlist)
				{
					LocalizeLocversionPlist($appleGlotEnvPath);
				}
				elsif ($optionFCPPlistPreProcess)
				{
					FCPPlistPreProcess($appleGlotEnvPath);
				}
				elsif ($optionWidgetJSPreProcess)
				{
					WidgetJSPreProcess($appleGlotEnvPath);
				}
				elsif ($optionJavaPropertiesPreProcess)
				{
					JavaPropertiesPreProcess($appleGlotEnvPath);
				}
				elsif ($optionBuildAllFileList)
				{
					BuildAllFileList($appleGlotEnvPath);
				}
				elsif ($optionResetAGEnv)
				{
					ResetAGEnv($appleGlotEnvPath, $gComponentName);
				}
				elsif ($optionCountWG)
				{
					CountAppleGlotWGFiles($appleGlotEnvPath);
					AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_WGWordCount.html", kNotOpen);
				}
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionFilterFLVerifierReport
		|| $optionFCPPlistPostProcess
		|| $optionWidgetJSPostProcess
		|| $optionJavaPropertiesPostProcess
		|| $optionCheckLKCX
		|| $optionCheckConductorLocEnv
		|| $optionBuildALAScoreLog
		|| $optionMakeTranslationKitDmg
		|| $optionPrepareLocEngDoneImage
		|| $optionBackupLocEnv
		|| $optionLocuntar
		|| $optionCompareBugFixTarballs
		|| $optionBackupLocEnvInfo
		|| $optionRestoreLocEnvInfo
		|| $optionDittoProj
		|| $optionDittoProjDontSanitize
		|| $optionLoctar
		|| $optionLoctarBugFix
		|| $optionLoctarWithGlossary
		|| $optionSubmission
		|| $optionCheckLocfiles
		|| $optionCheckTarfile
		|| $optionCheckConductorTar
		|| $optionExtractIndex
		|| $optionBuildIndex
		|| $optionChangeHTML
		|| $optionSetKeyword
		|| $optionMaterialMixer)
{
	$locenv = $gLocEnvPath;
	
	if ($locenv eq "")
	{
		$locenv = $gDefaultLocEnvPath;
	}

	if (-d $locenv)
	{
		WorkingOnLocEnv($locenv);
		
		if ($optionFilterFLVerifierReport)
		{
			FilterFLVerifierReport($locenv, "");
			AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_flverifierFilteredReport.txt", kOpen);
		}
		elsif ($optionFCPPlistPostProcess)
		{
			FCPPlistPostProcess($locenv);
		}
		elsif ($optionWidgetJSPostProcess)
		{
			WidgetJSPostProcess($locenv);
		}
		elsif ($optionJavaPropertiesPostProcess)
		{
			JavaPropertiesPostProcess($locenv);
		}
		elsif ($optionCheckLKCX)
		{
			CheckLKCX($locenv);
		}
		elsif ($optionCheckConductorLocEnv)
		{
			CheckConductorLocEnv($locenv);
		}
		elsif ($optionBuildALAScoreLog)
		{
			`"$gAAProcessNibScorePath" "$locenv"`;
		}
		elsif ($optionMakeTranslationKitDmg)
		{
			my $latestTranslationKitPath = AALocEnvUtilities::GetLatestTranslationKitPathFromLocEnv($locenv);
			
			if (-d $latestTranslationKitPath)
			{
				MakeDiskImage($latestTranslationKitPath);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: cannot find Translation Kit in locenv '$locenv'.\n");
				exit(1);
			}
		}
		elsif ($optionPrepareLocEngDoneImage)
		{
			PrepareLocEngDoneImage($locenv);
		}
		elsif ($optionBackupLocEnv)
		{
			BackupLocEnv($locenv);
		}
		elsif ($optionLocuntar)
		{
			Locuntar($locenv);
		}
		elsif ($optionCompareBugFixTarballs)
		{
			CompareBugFixTarballs($locenv);
		}
		elsif ($optionBackupLocEnvInfo)
		{
			BackupLocEnvInfo($locenv);
		}
		elsif ($optionRestoreLocEnvInfo)
		{
			RestoreLocEnvInfo($locenv);
		}
		elsif ($optionDittoProj)
		{
			$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($locenv);

			if ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
			{
				DittoHelpProj($locenv);
			}
			else
			{
				my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
			
				if (-d $appleGlotEnvPath)
				{
					DittoProj($locenv, $appleGlotEnvPath, kSanitize, $gComponentName);
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: AppleGlot Environment '$gAGEnvironmentPath' doesn't exist.\n");
					exit(1);
				}
			}
		}
		elsif ($optionDittoProjDontSanitize)
		{
			my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
		
			if (-d $appleGlotEnvPath)
			{
				DittoProj($locenv, $appleGlotEnvPath, kDontSanitize, $gComponentName);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: AppleGlot Environment '$gAGEnvironmentPath' doesn't exist.\n");
				exit(1);
			}
		}
		elsif ($optionLoctar)
		{
			Loctar($locenv, $gComponentName, "1");
		}
		elsif ($optionLoctarBugFix)
		{
			Loctar($locenv, $gComponentName, $gLocVer);
		}
		elsif ($optionLoctarWithGlossary)
		{
			LoctarWithGlossary($locenv, $gComponentName);
		}
		elsif ($optionSubmission)
		{
			Submission($locenv, $gComponentName);
		}
		elsif ($optionCheckLocfiles)
		{
			CheckLocfiles($locenv);
		}
		elsif ($optionCheckConductorTar)
		{
			CheckConductorTar($locenv);
		}
		elsif ($optionCheckTarfile)
		{
			CheckTarfile($locenv);
		}
		elsif ($optionExtractIndex)
		{
			ExtractIndex($locenv);
		}
		elsif ($optionBuildIndex)
		{
			BuildIndex($locenv);
		}
		elsif ($optionChangeHTML)
		{
			ChangeHTML($locenv);
		}
		elsif ($optionSetKeyword)
		{
			SetKeyword($locenv);
		}
		elsif ($optionMaterialMixer)
		{
			MaterialMixer($locenv);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCheckAllLocKitsComponentPlist)
{
	if (-d $gFolderPath)
	{
		`"$gAACheckLKCXPath" -checkAllLanguages "$gFolderPath"`;
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCheckTarballChecksum)
{
	CheckTarballChecksumInFLVerifierReport($gFilePath, $gFolderPath);
}
elsif ($optionFWStringVerifier)
{
	if (-d $gAGEnvironmentPath)
	{
		FWStringVerifier($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionUpdateFLVerifierLog)
{
	if (-d $gAGEnvironmentPath)
	{
		UpdateFLVerifierLog($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionUpdateAutoLayoutAdjustLog)
{
	if ($gLKCXEnvironmentPath ne "")
	{
		if (-d $gLKCXEnvironmentPath)
		{
			my $appleGlotEnvPath = $gLKCXEnvironmentPath . "Env/";
			my $updatedAutoLayoutAdjusterLogFile = $gLKCXEnvironmentPath
													. "_LKCXInfo/autolayoutadjuster_log/compare_nib_before_after_result_Updated.txt",
	
			UpdateAutoLayoutAdjustLog($gLKCXEnvironmentPath, $appleGlotEnvPath);
			
			`open -a "AD Viewer" "$updatedAutoLayoutAdjusterLogFile"`;
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gLKCXEnvironmentPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
		
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
			
			if (-d $appleGlotEnvPath)
			{
				my $updatedAutoLayoutAdjusterLogFile = $locenv
														. "_LKCXInfo/autolayoutadjuster_log/compare_nib_before_after_result_Updated.txt",
		
				UpdateAutoLayoutAdjustLog($locenv, $appleGlotEnvPath);
				
				`open -a "AD Viewer" "$updatedAutoLayoutAdjusterLogFile"`;
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionExtractWGNeedReview)
{
	if (-d $gAGEnvironmentPath)
	{
		ExtractWGNeedReview($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCreateThinWG)
{
	if (-d $gAGEnvironmentPath)
	{
		CreateThinWG($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionFilterCheckLocFilesReport)
{
	if (-e $gFilePath)
	{
		FilterCheckLocFilesReport($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionSearchDontLocalizeComment)
{
	if (-d $gAGEnvironmentPath)
	{
		SearchDontLocalizeComment($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionSplitTranslationKit)
{
	if ($gTranslationKitPath ne "" && $gFilePath ne "")
	{
		if (-d $gTranslationKitPath && -e $gFilePath)
		{
			if (IsLXTranslationKit($gTranslationKitPath))
			{
				SplitTranslationKitLX($gTranslationKitPath, $gFilePath);
			}
			else
			{
				SplitTranslationKit($gTranslationKitPath, $gFilePath);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gTranslationKitPath' or '$gFilePath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			my $latestTranslationKitPath = AALocEnvUtilities::GetLatestTranslationKitPathFromLocEnv($locenv);
			my $componentList = $locenv . $kDefualtSplitTranslationKitFileName;
			
			if ($gFilePath ne "")
			{
				$componentList = $gFilePath;
			}
			
			if (-e $componentList)
			{
				if (IsLXTranslationKit($latestTranslationKitPath))
				{
					SplitTranslationKitLX($latestTranslationKitPath, $componentList);
				}
				else
				{
					SplitTranslationKit($latestTranslationKitPath, $componentList);
				}
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: cannot find Components List '$componentList'.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionSplitLocEnv)
{
	$locenv = $gLocEnvPath;
	
	if ($locenv eq "")
	{
		$locenv = $gDefaultLocEnvPath;
	}

	if (-d $locenv)
	{
		WorkingOnLocEnv($locenv);
		
		my $componentList = $locenv . $kDefualtSplitLocEnvFileName;
		
		if ($gFilePath ne "")
		{
			$componentList = $gFilePath;
		}
		
		if (-e $componentList)
		{
			SplitLocEnv($locenv, $componentList);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: cannot find Components List '$componentList'.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionMergeLocEnv)
{
	$locenv = $gLocEnvPath;
	
	if ($locenv eq "")
	{
		$locenv = $gDefaultLocEnvPath;
	}

	if (-d $locenv)
	{
		WorkingOnLocEnv($locenv);
		
		my $locEnvList = $locenv . $kDefualtMergeLocEnvFileName;
		
		if ($gFilePath ne "")
		{
			$locEnvList = $gFilePath;
		}
		
		if (-e $locEnvList)
		{
			MergeLocEnv($locenv, $locEnvList);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: cannot find LocEnvs List '$locEnvList'.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionReceiveTranslationKit || $optionReceiveTranslationKitWithAD)
{
	my $withAD = 0;
	
	if ($optionReceiveTranslationKitWithAD)
	{
		$withAD = 1;
	}

	if ($gAGEnvironmentPath ne "" && $gTranslationKitPath ne "")
	{
		if (-d $gAGEnvironmentPath && -d $gTranslationKitPath)
		{
			if (IsJapanTranslationKit($gTranslationKitPath))
			{
				ReceiveTranslationKitJapan($gAGEnvironmentPath, $gTranslationKitPath, $withAD);
			}
			elsif (IsLXTranslationKit($gTranslationKitPath))
			{
				ReceiveTranslationKitLX($gAGEnvironmentPath, $gTranslationKitPath, $withAD);
			}
			else
			{
				ReceiveTranslationKit($gAGEnvironmentPath, $gTranslationKitPath, $withAD);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' or '$gTranslationKitPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			if ($gFilePath ne "")
			{
				if (CopyTranslationSubmission($locenv, $gFilePath, $gFile2Path) == 0)
				{
					exit(1);
				}
			}

			my $translationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($locenv);
			my $translationKitSubmitName = AALocFileUtilities::GetDirectoryBaseName($translationKitSubmitPath);
			my $locEnvReportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($locenv);
			my $receiveTranslationKitLogFile = $locEnvReportsPath . $translationKitSubmitName. "_receiveTranslationKitLog.txt";

			open STDOUT, "> $receiveTranslationKitLogFile" or die "Failed to open $receiveTranslationKitLogFile\n";

			AALocUtilities::PrintToReport("#==========================================================================\n");


			$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($locenv);

			if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv
				|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv)
			{
				my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
			
				if (-d $appleGlotEnvPath)
				{
					if ($withAD)
					{
						AALocUtilities::PrintToReport("# Receive $translationKitSubmitName with AD\n");
					}
					else
					{
						AALocUtilities::PrintToReport("# Receive $translationKitSubmitName\n");
					}
					
					AALocUtilities::PrintToReport("# ");
					AALocUtilities::PrintToReport(`date`);
					AALocUtilities::PrintToReport("#==========================================================================\n");
					AALocUtilities::PrintToReport("\n");
				
					#-----------------------------------------------------------------------------
					#
					#-----------------------------------------------------------------------------
				
					my $numOfErrors = 0;
					
					if (IsJapanTranslationKit($translationKitSubmitPath))
					{
						$numOfErrors = ReceiveTranslationKitJapan($appleGlotEnvPath, $translationKitSubmitPath, $withAD);
					}
					elsif (IsLXTranslationKit($translationKitSubmitPath))
					{
						$numOfErrors = ReceiveTranslationKitLX($appleGlotEnvPath, $translationKitSubmitPath, $withAD);
					}
					else
					{
						$numOfErrors = ReceiveTranslationKit($appleGlotEnvPath, $translationKitSubmitPath, $withAD);
					}


					#-----------------------------------------------------------------------------
					#
					#-----------------------------------------------------------------------------
				
					AALocUtilities::PrintToReport("\n");
					AALocUtilities::PrintToReport("#==========================================================================\n");
					AALocUtilities::PrintToReport("#                     E N D    O F    R E P O R T                          \n");
					AALocUtilities::PrintToReport("#==========================================================================\n");
				
					close STDOUT;


					if ($withAD || IsJapanTranslationKit($translationKitSubmitPath))
					{
						#-------------------------------------------------------------------------
						#	Check AD Folder
						#-------------------------------------------------------------------------
						
						CheckWGADFolder($appleGlotEnvPath, kCheckADFiles);
		
						AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkADFilesLog.txt", kOpen);
					}


					#-----------------------------------------------------------------------------
					#
					#-----------------------------------------------------------------------------
				
					if (!IsJapanTranslationKit($translationKitSubmitPath))
					{
						if ($numOfErrors == 0)
						{
							if  (IsLXAppleGlotEnvironment($appleGlotEnvPath))
							{
								AALocUtilities::PrintLog("\n");
								AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
								AALocUtilities::PrintLog("# Merge LX WG files\n");
								AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
							
								MergeWGFilesLX($appleGlotEnvPath);
							}
							else
							{
								AALocUtilities::PrintLog("\n");
								AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
								AALocUtilities::PrintLog("# Merge WG files\n");
								AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
							
								MergeWGFiles($appleGlotEnvPath);
							}
							
							AALocEnvUtilities::CopyReportFromAG2LocEnv($locenv, "_checkWGFilesLog.txt", kOpen);
						}
						else
						{
							AALocUtilities::PrintLog("\n\n### ERROR: Errors found. Please check the log file $receiveTranslationKitLogFile\n");
							AALocUtilities::PrintLog("\n\n### Import ### After fix the problems. Please run the -mergeWGFiles yourself\n\n\n");
							
							`open -a "AD Viewer" "$receiveTranslationKitLogFile"`;
						}
					}
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
					exit(1);
				}
			}
			elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
			{
				AALocUtilities::PrintToReport("# Receive $translationKitSubmitName\n");
				AALocUtilities::PrintToReport("# ");
				AALocUtilities::PrintToReport(`date`);
				AALocUtilities::PrintToReport("#==========================================================================\n");
				AALocUtilities::PrintToReport("\n");

				ReceiveHelpTranslationKit($locenv, $translationKitSubmitPath);

				AALocUtilities::PrintToReport("\n");
				AALocUtilities::PrintToReport("#==========================================================================\n");
				AALocUtilities::PrintToReport("#                     E N D    O F    R E P O R T                          \n");
				AALocUtilities::PrintToReport("#==========================================================================\n");
			
				close STDOUT;
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: receiveTranslationKit doesn't support your LocEnv\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionSetLocEnv)
{
	if ($gLocEnvPath ne "")
	{
		system "/Developer/Evolution/LocEnv/locbin/setLocEnv $gLocEnvPath";
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified loc environment path -locenv\n");
		exit(1);
	}
}
elsif ($optionSetLocEnvForceUpdate)
{
	if ($gLocEnvPath ne "")
	{
		system "/Developer/Evolution/LocEnv/locbin/setLocEnv $gLocEnvPath -forcedUpdate";
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified loc environment path -locenv\n");
		exit(1);
	}
}
elsif ($optionGetLocEnv)
{
	if ($gDefaultLocEnvPath ne "")
	{
		AALocUtilities::PrintLog("Current LocEnv: $gDefaultLocEnvPath\n");
	}
	else
	{
		AALocUtilities::PrintLog("NO current loc environment\n");
		exit(1);
	}
}
elsif ($optionCreateLocEnv)
{
	if ($gLocEnvPath ne "")
	{
		CreateLocEnv($gLocEnvPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified loc environment path -locenv\n");
		exit(1);
	}
}
elsif ($optionCopyLocKit || $optionCopyLocKitDontRunFlidentifier)
{
	if ($gFilePath ne "")
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			if (-e $gFilePath)
			{
				if ($optionCopyLocKit)
				{
					CopyLocKit($locenv, $gFilePath, $gFile2Path, $gFile3Path, kRunFlidentifier);
				}
				else
				{
					CopyLocKit($locenv, $gFilePath, $gFile2Path, $gFile3Path, kDontRunFlidentifier);
				}
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: LocEnv dmg '$gFilePath' doesn't exist.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified LocEnv dmg path -file\n");
		exit(1);
	}
}
elsif ($optionCopyLXRipEnv)
{
	if ($gFolderPath ne "")
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			if (-d $gFolderPath)
			{
				CopyLXRipEnv($locenv, $gFolderPath);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: LXRip Env folder '$gFolderPath' doesn't exist.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified LXRip Env folder -folder\n");
		exit(1);
	}
}
elsif ($optionCopyBackupForBugFix)
{
	if ($gFilePath ne "")
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			if (-e $gFilePath)
			{
				CopyBackupForBugFix($locenv, $gFilePath);
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: Backup $gFilePath' doesn't exist.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified Backup path -file\n");
		exit(1);
	}
}
elsif ($optionBugFixPreProcess)
{
	$locenv = $gLocEnvPath;
	
	if ($locenv eq "")
	{
		$locenv = $gDefaultLocEnvPath;
	}

	if (-d $locenv)
	{
		WorkingOnLocEnv($locenv);
		
		BugFixPreProcess($locenv);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionSelectBugFixComponents)
{
	if ($gComponentNames ne "")
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			SelectBugFixComponents($locenv, $gComponentNames);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified components -gComponentNames\n");
		exit(1);
	}
}
elsif ($optionRemoveComponent)
{
	if ($gComponentName ne "")
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
			
			RemoveComponent($locenv, $gComponentName);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: NO specified component -gComponentName\n");
		exit(1);
	}
}
elsif ($optionBackupAGEnv)
{
	$locenv = $gLocEnvPath;
	
	if ($locenv eq "")
	{
		$locenv = $gDefaultLocEnvPath;
	}

	if (-d $locenv)
	{
		WorkingOnLocEnv($locenv);
		
		my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
		
		if (-d $appleGlotEnvPath)
		{
			$locEngDonePath = AALocEnvUtilities::GetUniqueLocEngDonePathFromLocEnv($locenv);

			`ditto "$appleGlotEnvPath" "$locEngDonePath"`;

			AALocFileUtilities::RemoveFolder($locEngDonePath . "NibScreenshot/");
			AALocFileUtilities::RemoveFolder($locEngDonePath . "UpdatedNibScreenshot/");
			
			MakeDiskImage($locEngDonePath);
			
			AALocFileUtilities::RemoveFolder($locEngDonePath);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionExpandTar)
{
	if ($gFolderPath ne "")
	{
		if (-d $gFolderPath)
		{
			ExpandTarFolder($gFolderPath);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
			exit(1);
		}
	}
	elsif ($gFilePath ne "")
	{
		if (-e $gFilePath)
		{
			ExpandTar($gFilePath);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: no input path.\n");
		exit(1);
	}
}
elsif ($optionExpandPackage)
{
	if (-e $gFilePath)
	{
		ExpandPackage($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionCopyLproj)
{
	if ((-d $gFolderPath) && (-d $gFolder2Path))
	{
		CopyLproj($gFolderPath, $gFolder2Path, $gLanguage);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' or 'gFolder2Path' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionPseudoLoc)
{
	if ($gAGEnvironmentPath ne "")
	{
		if (-d $gAGEnvironmentPath)
		{
			PseudoLoc($gAGEnvironmentPath . "_WorkGlossary/");
		}
		else
		{
			AALocUtilities::PrintLog("ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
			exit(1);
		}
	}
	elsif ($gFolderPath ne "")
	{
		if (-d $gFolderPath)
		{
			PseudoLoc($gFolderPath);
		}
		else
		{
			AALocUtilities::PrintLog("ERROR: specified path '$gFolderPath' doesn't exist.\n");
			exit(1);
		}
	}
	else
	{
		$locenv = $gLocEnvPath;
		
		if ($locenv eq "")
		{
			$locenv = $gDefaultLocEnvPath;
		}
	
		if (-d $locenv)
		{
			WorkingOnLocEnv($locenv);
		
			my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($locenv);
			
			if (-d $appleGlotEnvPath)
			{
				PseudoLoc($appleGlotEnvPath . "_WorkGlossary/");
			}
			else
			{
				AALocUtilities::PrintLog("ERROR: cannot find AppleGlot Env in locenv '$locenv'.\n");
				exit(1);
			}
		}
		else
		{
			AALocUtilities::PrintLog("ERROR: locenv path '$locenv' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionMakeDiskImage)
{
	if (-d $gFolderPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Make Disk Image\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		MakeDiskImage($gFolderPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionFindString)
{
	if (-d $gFolderPath)
	{
		FindString($gFolderPath, $gString);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionFindStringInPlist)
{
	if (-d $gFolderPath)
	{
		FindStringInPlist($gFolderPath, $gString);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionPreprocessKeynoteThemes)
{
	if (-d $gAGEnvironmentPath)
	{
		PreprocessKeynoteThemes($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionPostprocessKeynoteThemes)
{
	if (-d $gAGEnvironmentPath)
	{
		PostprocessKeynoteThemes($gAGEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gAGEnvironmentPath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionPreprocessKeynoteSACountry)
{
	if (-e $gFilePath)
	{
		PreprocessKeynoteSACountry($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionPostprocessKeynoteSACountry)
{
	if (-e $gFilePath)
	{
		PostprocessKeynoteSACountry($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionSplitWGFile)
{
	if (-e $gFilePath)
	{
		SplitWGFile($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionMergeSplittedWGFile)
{
	if (-e $gFilePath)
	{
		MergeSplittedWGFile($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionSplit3WGFile)
{
	if (-e $gFilePath)
	{
		Split3WGFile($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionMerge3SplittedWGFile)
{
	if (-e $gFilePath)
	{
		Merge3SplittedWGFile($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionConvetUTF8ToUTF16)
{
	if (-e $gFilePath)
	{
		ConvertUTF8ToUTF16($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionFindNumberFormatter)
{
	if (-d $gAGEnvironmentPath)
	{
		FindNumberFormatterInAppleGlotEnv($gAGEnvironmentPath);
	}
	else
	{
		if (-d $gFolderPath)
		{
			FindNumberFormatter($gFolderPath);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: specified path '$gFolderPath' doesn't exist.\n");
			exit(1);
		}
	}
}
elsif ($optionLocalizeRTLNibs)
{
	if (($gFilePath ne "") && (-e $gFilePath))
	{
		LocalizeRTLNib($gFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionLeverageWGFromOther)
{
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Leverage WG from Other WG/AD\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	LeverageWGFromOther($gFilePath, $gFile2Path);
}
elsif ($optionLeverageWGFromOtherFolder)
{
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Leverage WG from Other WG/AD Folder\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	LeverageWGFromOtherFolder($gFolderPath, $gFolder2Path);
}
elsif ($optionPrepGlossaryForTM)
{
	if (($gFilePath ne "") && (-e $gFilePath) && ($gFolder2Path ne "") && (-d $gFolder2Path))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Prepare WG file for TM\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		
		system "prepGlossaryForTM -file '$gFilePath' -saveDir '$gFolder2Path'";
	}
	elsif (($gFolderPath ne "") && (-e $gFolderPath) && ($gFolder2Path ne "") && (-d $gFolder2Path))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Prepare WG folder for TM\n");
		AALocUtilities::PrintLog("#     $gFolderPath\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("\n");
		
		
		opendir(directory, $gFolderPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		foreach $file (@searchResult)
		{
			$wgfile = $gFolderPath . $file;
			
			system "prepGlossaryForTM -file '$wgfile' -saveDir '$gFolder2Path'";
		}
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionXliffToWGAD)
{
	if (($gFilePath ne "") && (-e $gFilePath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Convert xliff file to WG/AD\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("Converting $gFilePath\n");
		AAXliffUtilities::XliffToWGAD($gFilePath);
	}
	elsif (($gFolderPath ne "") && (-e $gFolderPath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Convert xliff folder to WG/AD\n");
		AALocUtilities::PrintLog("#     $gFolderPath\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("\n");
		
		AAXliffUtilities::XliffFolderToWGAD($gFolderPath);
	}
	elsif (($gAGEnvironmentPath ne "") && (-d $gAGEnvironmentPath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Convert xliff in AG Env to WG/AD\n");
		AALocUtilities::PrintLog("#     $gAGEnvironmentPath\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("\n");
		
		AAXliffUtilities::XliffFolderToWGAD($gAGEnvironmentPath . "_Translations/");
		AALocAppleGlotUtilities::MoveWGFilesFromTranslationToWGFolder($gAGEnvironmentPath);
		AALocAppleGlotUtilities::MoveADFilesFromTranslationToADFolder($gAGEnvironmentPath);
	}
	elsif (($gLocEnvPath ne "") && (-d $gLocEnvPath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Convert xliff in LocEnv to WG/AD\n");
		AALocUtilities::PrintLog("#     $gLocEnvPath\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("\n");
		
		my $appelGlotEnvironmentPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($gLocEnvPath);
		
		AAXliffUtilities::XliffFolderToWGAD($appelGlotEnvironmentPath . "_Translations/");
		AALocAppleGlotUtilities::MoveWGFilesFromTranslationToWGFolder($appelGlotEnvironmentPath);
		AALocAppleGlotUtilities::MoveADFilesFromTranslationToADFolder($appelGlotEnvironmentPath);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: specified path '$gFilePath' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionIBLockMode)
{
	`defaults write com.apple.InterfaceBuilder IBDisableLocalizationLockMode NO`;
}
elsif ($optionIBUnlockMode)
{
	`defaults write com.apple.InterfaceBuilder IBDisableLocalizationLockMode YES`;
}
elsif ($optionIBLock)
{
	IBLock($gLocEnvPath);
}
elsif ($optionIBUnlock)
{
	IBUnLock($gLocEnvPath);
}
elsif ($optionSelfTesting)
{
	$locenv = $gLocEnvPath;
	
	if ($locenv eq "")
	{
		$locenv = $gDefaultLocEnvPath;
	}

	if (-d $locenv)
	{
		WorkingOnLocEnv($locenv);
		
		SelfTesting($locenv, $gFilePath, $gFile2Path);
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: locenv path '$locenv' doesn't exist.\n");
		exit(1);
	}
}
elsif ($optionTesting)
{
	
	print "================================================================================\n";
	print " sudo\n";
	print "================================================================================\n";
	# `sudo -s`;
	
	
	# LeverageWGFromOtherPOI($gFilePath, $gFile2Path);
	

	# GenerateTMXforAppleGlotEnv($gFolderPath);

	# CountAppleGlotWGFiles($gFolderPath);
	
	# GetLocToolsEnvInfo();
	

	#---------------------------------------------------------------------------------
	#	Convert UTF-8 to Windows-1256
	#---------------------------------------------------------------------------------
	if (1)
	{
		`iconv -c -f UTF8 -t 'windows-1256' < "$gFilePath" > "$gFile2Path"`;
	}


	#---------------------------------------------------------------------------------
	#	Compare WG files
	#---------------------------------------------------------------------------------
	if (0)
	{
		open STDOUT, "> /Testing.txt" or die "Failed to open Testing.txt\n";
		CompareWGFiles($gFilePath, $gFile2Path);
		close STDOUT;
	}

	if (0)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Checking Hidden Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		chomp(@searchResult = `find $gFolderPath -type f \\( -path "*/\.*" \\) | grep -v ".DS_Store"  | grep -v ".localized"`);
		
		AALocUtilities::PrintLog("The following Hidden file(s) found:\n");

		$numOfError = 0;

		foreach $file (@searchResult)
		{
			$numOfError++;
			
			$file =~ s/$gFolderPath//;	# take out the base path
			
			AALocUtilities::PrintLog("$file\n");
		}
		
		if ($numOfError == 0)
		{
			AALocUtilities::PrintLog("No Problem Found\n");
		}
	}

	
	if (0)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Checking Complied Nib files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		chomp(@searchResult = `find "$gFolderPath" -type f \\( -path "*/English.lproj/*.nib" -or -path "*/en.lproj/*.nib" \\) | grep -v "objects.nib" | grep -v "keyedobjects.nib"  | grep -v "classes.nib"  | grep -v "info.nib"  | grep -v "designable.nib"`);
		
		foreach $file (@searchResult)
		{
			if ($numOfError == 0)
			{
				AALocUtilities::PrintLog("The following complied .nib file(s) found:\n");
			}
			
			$file =~ s/$gFolderPath//;	# take out the base path
			
			AALocUtilities::PrintLog("$file\n");
		}
	}
	
	
	if (0)
	{
		opendir(directory, $gFolderPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		foreach $file (@searchResult)
		{
			$wgfile = $gFolderPath . $file;
			
			GenerateOnlyNotTranslatedStringsWG($wgfile);
		}
	}

	# CompareWGFiles($gFilePath, $gFile2Path);
	# GenerateChangedAD($gFilePath, $gFile2Path);
	
	# AAXliffUtilities::XliffToWGAD($gFilePath);
	
	if (0)
	{
		my $language = GetLprojLanguage($gFolderPath);
		AALocUtilities::PrintLog("language = $language\n");
		
		my $temp = $AALocUtilities::kLprojLongForm{"ja"};
		AALocUtilities::PrintLog("temp = $temp\n");
		
		# CheckLocfiles($gDefaultLocEnvPath);
	}

	if (0)
	{
		my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($gDefaultLocEnvPath);
		
		my $locRequiredOrgPath = $helpEnvPath . "_Working/_LocRequired_Org/";

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# GetKeyword\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		system "GetKeyword -env $helpEnvPath -keywordlist 'Chinese-Keyword Table.txt' -skipword 'Chinese-Skipword Table.txt'";

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("Backuping Keyword\n");

		my $helpEnvADtableFilePath = $helpEnvPath . "_Working/ADtable.txt";
		my $helpEnvWGtableFilePath = $helpEnvPath . "_Working/WGtable.txt";

		`ditto "$helpEnvADtableFilePath" "$locRequiredOrgPath"`;
		`ditto "$helpEnvWGtableFilePath" "$locRequiredOrgPath"`;

		#-----------------------------------------------------------------------------------------
		#	Diff Report of NB and OB
		#-----------------------------------------------------------------------------------------

		my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($gDefaultLocEnvPath) . "NewBaseOldBaseDiffReport.txt";
		my $helpEnvInNewBasePath = $helpEnvPath . "_In/_Flattened/_NewBase/";
		my $helpEnvInOldBasePath = $helpEnvPath . "_In/_Flattened/_OldBase/";

		my $resultString = CompareFolder($helpEnvInNewBasePath, $helpEnvInOldBasePath);

		system "echo '$resultString' > $reportFilePath";
	}


	#  UpdateMailNotifyFromLocEnvInfo($gDefaultLocEnvPath);

	if (0)
	{
		my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($gDefaultLocEnvPath);
		# BuildHelpHTMLFileList($helpEnvPath);
		CheckUSHTML($gDefaultLocEnvPath);
	}


	if (0)
	{
		my $result = AALocFileUtilities::GetHTMLFileCharset($gFilePath);
		print $result;
	}
	
	
	if (0)
	{
		my $bugFixCommentsPath = $gDefaultLocEnvPath . "Info/BugFixComments/";
		my $bugFixCommentsOrgPath = $gDefaultLocEnvPath . "Info_Org/BugFixComments/";
		my $bugFixCommentFilePath;

		opendir(directory, $bugFixCommentsPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@searchResult)
		{
			$bugFixCommentFilePath = $bugFixCommentsPath . $file;
		
			open bugFixCommentsFile, "> $bugFixCommentFilePath" or die "Failed to open $file\n";
				print bugFixCommentsFile "Loc submission for US changes\n\nStanley Au-Yeung <stanleyauyeung@asia.apple.com>\n";
			close bugFixCommentsFile;
		}

		opendir(directory, $bugFixCommentsOrgPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@searchResult)
		{
			$bugFixCommentFilePath = $bugFixCommentsOrgPath . $file;

			open bugFixCommentsFile, "> $bugFixCommentFilePath" or die "Failed to open $file\n";
				print bugFixCommentsFile "Loc submission for US changes\n\nStanley Au-Yeung <stanleyauyeung@asia.apple.com>\n";
			close bugFixCommentsFile;
		}
	}




	# CheckLocversionPlistWithinThisLproj($gFolderPath, "Japanese");


	# PowerCompareOldLocNewLoc($gFolderPath);

	# CheckWGADFolder($gFolderPath, kCheckADFiles);


	# open STDOUT, "> /LocTools.txt" or die "Failed to open xxx\n";
	# GetLocToolsEnvInfo();
	# close STDOUT;



	if (0)
	{
		open STDOUT, "> /Testing3.txt" or die "Failed to open Testing.txt\n";
		CheckStringsFiles($gFolderPath, "zh_TW");
		close STDOUT;
	}


	# ConvertMacRomanToUTF16($gFilePath);
	
	# GenerateNotTranslatedStringsWG($gFolderPath);
	
	if (0)
	{
		my %wgFile1Content = ParseWGFile($gFilePath);

		foreach $filename (sort keys %wgFile1Content)
		{
			my @wgFile1ItemArray = @{$wgFile1Content{$filename}};
			
			for ($index = 0; $index < (scalar @wgFile1ItemArray); $index++)
			{
				my %wgFile1ItemHash = %{$wgFile1ItemArray[$index]};
				
				if ($wgFile1ItemHash{'base'} eq $wgFile1ItemHash{'tran'})
				{
					AALocUtilities::PrintLog("<Description>$wgFile1ItemHash{'description'}</Description>\n");
					AALocUtilities::PrintLog("<Position>$wgFile1ItemHash{'position'}</Position>\n");
					AALocUtilities::PrintLog("<base loc=\"en\">$wgFile1ItemHash{'base'}</base>\n");
					AALocUtilities::PrintLog("\n");
				}
			}
		}
	}


	# FixWGFileBaseTab($gFilePath);

	# CheckLocversionPlist($gFolderPath, "pt_PT");

	# CheckLocversionPlistWithinThisLproj($gFolderPath, "zh_CN");


	# CheckTarballChecksumInFLVerifierReport($gFilePath, $gFolderPath);

	#---------------------------------------------------------------------------------
	#	Test TarballsChecksumToFLVerifierReport
	#---------------------------------------------------------------------------------
	# TarballsChecksumToFLVerifierReport($gDefaultLocEnvPath);


	#---------------------------------------------------------------------------------
	#	Test Fix Translation Kit
	#---------------------------------------------------------------------------------
	# FixTranslationKitLX($gFolderPath);


	#---------------------------------------------------------------------------------
	#	Test Fix data.dependency
	#---------------------------------------------------------------------------------
	# FixDataDependency($gAGEnvironmentPath);


	#---------------------------------------------------------------------------------
	#	Test create ala changes log
	#---------------------------------------------------------------------------------
	# CreateALAChangesLog($gDefaultLocEnvPath);


	#---------------------------------------------------------------------------------
	#	Test Filter flverifier report
	#---------------------------------------------------------------------------------
	# FilterFLVerifierReport($gDefaultLocEnvPath);



	#---------------------------------------------------------------------------------
	#	Test Check WG files
	#---------------------------------------------------------------------------------
	if (0)
	{
		open STDOUT, "> /Testing.txt" or die "Failed to open Testing.txt\n";
		CheckWGADFiles($gFolderPath);
		close STDOUT;
	}


	#---------------------------------------------------------------------------------
	#	Test find all comments
	#---------------------------------------------------------------------------------
	# FindAllCommentsInStrings($gAGEnvironmentPath, kUpdatedOnly);


	#---------------------------------------------------------------------------------
	#	Test Count AppleGlot WG files
	#---------------------------------------------------------------------------------
	# CountAppleGlotWGFiles($gAGEnvironmentPath);


	#---------------------------------------------------------------------------------
	#	Test Count AppleGlot WG files
	#---------------------------------------------------------------------------------
	if (0)
	{
		open STDOUT, "> /Testing.txt" or die "Failed to open Testing.txt\n";
		CompareRTFFiles($gFilePath, $gFile2Path);
		close STDOUT;
	}


	#---------------------------------------------------------------------------------
	#	Test check nib files attributes
	#---------------------------------------------------------------------------------
	if (0)
	{
		open STDOUT, "> /Testing.txt" or die "Failed to open Testing.txt\n";
		CheckNibFilesAttributes($gAGEnvironmentPath . "_NewLoc/", "Spanish");
		close STDOUT;
	}
	
	# my $newLoc = $gAGEnvironmentPath . "_NewLoc/";
	# my $newBase = $gAGEnvironmentPath . "_NewBase/";
	
	# push (@gOtherPcxOptions, "-mapfByPair");

	# print `$gPcxPath "$newBase" "$newLoc" -frmap -cache1 -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -faddrstr -sksfmi -flatten_plist -ski -objinfo -map "English.lproj/zh_CN.lproj" -inclnibattr "m/(title|string|text|label|marker|name|identifier)/i;" | perl -ne 'print if (m/pcx:i:(new|obsolete):/)' | $gFpcxPath -s -purl -adviewer`;
}
elsif ($optionHelp)
{
	Usage();
}
else
{
	Usage();
}

if ($gTimer)
{
	AALocUtilities::PrintLog("\n\n******************************************************************************************\n");
	AALocUtilities::PrintLog("* Start at: $gStartTime");
	AALocUtilities::PrintLog("*   End at: ");
	AALocUtilities::PrintLog(`date`);
	AALocUtilities::PrintLog("******************************************************************************************\n");
}

exit(0);



#=============================================================================================
#	Utilities
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	
#---------------------------------------------------------------------------------------------

sub GetLocToolsEnvInfo
{
	my $bootVolume = GetBootVolume();

	system "GetLocToolsEnvInfo";
	
	print "\n";
	print "================================================================================\n";
	print "Apple Asia Loc Tools ($bootVolume)\n";
	print "================================================================================\n";
	PrintAALocToolsVersion();
	print "\n";
}


sub PrintAALocToolsVersion
{
	my $checkLKCXVersion = `"$gAACheckLKCXPath" -getVersion`;
	my $processNonGlotableFilesVersion = `"$gAAProcessNonGlotableFilesPath" -getVersion`;
	my $aaflverifierVersion = `"$gAAflverifierPath" -getVersion`;
	my $aaflverifierFilterVersion = `"$gAAflverifierFilterPath" -getVersion`;
	my $aaMergeGlossariesVersion = `"$gAAMergeGlossariesPath" -getVersion`;
	my $checkProblemNibsVersion = `"$gAACheckProblemNibsPath" -getVersion`;
	
	my $aaflverifierProVersion = `"$gAAflverifierProPath" -getVersion`;
	my $aaflverifierFilterProVersion = `"$gAAflverifierFilterProPath" -getVersion`;

	print "AALocCommand              : $version\n";
	print "AACheckLKCX               : $checkLKCXVersion\n";
	print "AAProcessNonGlotableFiles : $processNonGlotableFilesVersion\n";
	print "AAMergeGlossaries         : $aaMergeGlossariesVersion\n";
	print "AACheckProblemNibs        : $checkProblemNibsVersion\n";
	
	print "AAflverifier              : $aaflverifierVersion\n";
	print "AAflverifier Pro          : $aaflverifierProVersion\n";
	print "AAflverifierFilter        : $aaflverifierFilterVersion\n";
	print "AAflverifierFilter Pro    : $aaflverifierFilterProVersion\n";
}


sub GetBootVolume
{
    my @cmd =  (
                  '/usr/sbin/diskutil',
                  'info',  '/',
                  '|',
                  'grep', "\"Volume Name:\"",
               );
   
   my $volName = `@cmd`;
   
   if ($volName =~ /\s+Volume Name:\s+(.*)/ )
   {
        my $item = $1;
		
        chomp $item;
        return $item;
    }
	
    return (undef);
}


sub WorkingOnLocEnv()
{
	my ($inLocEnvPath) = @_;

	#	`setLocEnv "$inLocEnvPath"`;
	
	$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath);
	
	AALocUtilities::PrintLog("******************************************************************************************\n");
	AALocUtilities::PrintLog("* Working on LocEnv: $inLocEnvPath\n");
	AALocUtilities::PrintLog("******************************************************************************************\n\n");
}




#=============================================================================================
#	Function Definitions
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	GetLprojLanguage
#---------------------------------------------------------------------------------------------

sub GetLprojLanguage
{
	my($inPath) = @_;
	my %lprojs = ();
	
	%gFindLanguageResult = ();
	find \&SetLocLproj, $inPath;
	
	unless (scalar %gFindLanguageResult)
	{
		printf STDERR "\n### WARNING: No localized .lproj in $inPath.\n";
		# exit 1;
	}
	
	my @tmp = sort {$gFindLanguageResult{$a} <=> $gFindLanguageResult{$b}} keys %gFindLanguageResult;
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:GetLprojLanguage] Language: \"$tmp[$#array]\"\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------
	
	return $AALocUtilities::kLprojLongForm{$tmp[$#array]};
}

sub SetLocLproj
{
	if (m/(.+).lproj$/ && ($1 ne "English") && ($1 ne "en") && ($1 ne "Base"))
	{
		#--Debug----------------------------------------------------------------------------------
		print STDERR "[Debug:SetLocLproj] Language: \"$1\"\n" if ($gDebug);
		#-----------------------------------------------------------------------------------------
		
		$gFindLanguageResult{$1}++;
	}
}


#---------------------------------------------------------------------------------------------
#	IsUpdatedNibID
#
#	Return whether the File is updated/new.
#---------------------------------------------------------------------------------------------

sub IsUpdatedNibID
{
	my ($inNibFile, $inNibObjectID1, $inNibObjectID2) = @_;

	my $isUpdatedNibID = 1;
	my $nibInfoFile = $inNibFile . "/Info.nib";

	
	if (-e $nibInfoFile)
	{
		$plistObject = NSDictionary->dictionaryWithContentsOfFile_($nibInfoFile);
		
		if ($plistObject and $$plistObject)
		{
			$localizationObjectID = $plistObject->objectForKey_("LocalizationObjectIDs");
			
			if ($localizationObjectID and $$localizationObjectID)
			{
				$isUpdatedNibID = 0;
			
				my $enumerator = $localizationObjectID->objectEnumerator();
				my $value;
				my $objectID;

				while ($value = $enumerator->nextObject() and $$value)
				{
					$objectID = $value->description()->UTF8String();
					
					if ($inNibObjectID1 == $objectID || $inNibObjectID2 == $objectID)
					{
						print "$inNibObjectID1, $inNibObjectID2  => $objectID match\n" if ($gDebug);
						$isUpdatedNibID = 1;
						last;
					}
					else
					{
						print "$inNibObjectID1, $inNibObjectID2  => $objectID not match\n" if ($gDebug);
					}
				}
			}
		}
	}
	
	return $isUpdatedNibID;
}




#=============================================================================================
#	WG Definitions
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	CountNumberOfReturn
#---------------------------------------------------------------------------------------------

sub CountNumberOfReturn
{
	my($inString) = @_;
	my $outNumberOfReturn = 0;
	
	while ($inString =~ /\\n/gs)
	{
		$outNumberOfReturn++;
	}
	
	return $outNumberOfReturn;
}


#---------------------------------------------------------------------------------------------
#	ParseWGFile
#---------------------------------------------------------------------------------------------

sub escapeSpecialChar
{
	my $org = shift;
	
	$org =~ s|&((?!amp;)(?!apos;)(?!quot;)(?!lt;)(?!gt;))|&amp;|g;
	$org =~ s|'|&apos;|g;
	$org =~ s|"|&quot;|g;
	$org =~ s|<|&lt;|g;
	$org =~ s|>|&gt;|g;
	
	return $org;
}


sub ParseWGFile
{
	my($inWGFile) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFile doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my %data = ();
	my %wgFileData = ();

	my $saveRS = $/;
	undef $/;

	open F, $inWGFile or die;
	my $data = <F>;
	close F;

	$/ = $saveRS;


	while ($data =~ /<File>.*?<Filepath>(.+?)<\/Filepath>(.+?)<\/File>/gs)
	{
		my $filename = $1;
		my $filedata = $2;
		my @filedata = ();

		while ($filedata =~ /<TextItem>(.+?)<\/TextItem>/gs)
		{
			my $item = $1;

			$item =~ /<Description>(.*?)<\/Description>/s;
			my $description = $1;
			$description = &escapeSpecialChar($description);

			$item =~ /<Position>(.*?)<\/Position>/s;
			my $position = $1;
			$position = &escapeSpecialChar($position);

			$item =~ /<TranslationSet>.*?<base.*?>(.*?)<\/base>.*?<\/TranslationSet>/s;
			my $base = $1;
			$base = &escapeSpecialChar($base);

			$item =~ /<base\s+loc\s*=\s*"([^\"]*?)".*>/s;
			my $baselocale = $1;
			$baselocale = &escapeSpecialChar($baselocale);

			$item =~ /<TranslationSet>.*?<tran.*?>(.*?)<\/tran>.*?<\/TranslationSet>/s;
			my $tran = $1;
			$tran = &escapeSpecialChar($tran);

			$item =~ /<tran\s+.*loc\s*=\s*"([^\"]*?)".*>/s;
			my $tranlocale = $1;
			$tranlocale = &escapeSpecialChar($tranlocale);

			$item =~ /<tran\s+.*origin\s*=\s*"([^\"]*?)".*>/s;
			my $tranorigin = $1;
			$tranorigin = &escapeSpecialChar($tranorigin);

			$item =~ /<!--ORIGIN INFO.*'loc_submission_filename'\s*=>\s*'(.*?)'.*-->/s;
			my $mb_submission = $1;
			$mb_submission = &escapeSpecialChar($mb_submission);

			$item =~ /<!--ORIGIN INFO.*'resource_file'\s*=>\s*'(.*?)'.*-->/s;
			my $mb_resourcefile = $1;
			$mb_resourcefile = &escapeSpecialChar($mb_resourcefile);

			$item =~ /<!--ORIGIN INFO.*'resource_path'\s*=>\s*'(.*?)'.*-->/s;
			my $mb_resourcepath = $1;
			$mb_resourcepath = &escapeSpecialChar($mb_resourcepath);


			#--Debug----------------------------------------------------------------------------------
			if ($gDebug)
			{
				print STDERR "[Debug:ParseWGFile] description: $description\n";
				print STDERR "[Debug:ParseWGFile] position: $position\n";
				print STDERR "[Debug:ParseWGFile] base: $base\n";
				print STDERR "[Debug:ParseWGFile] baselocale: $baselocale\n";
				print STDERR "[Debug:ParseWGFile] tran: $tran\n";
				print STDERR "[Debug:ParseWGFile] tranlocale: $tranlocale\n";
				print STDERR "[Debug:ParseWGFile] mbsubmission: $mbsubmission\n";
				print STDERR "[Debug:ParseWGFile] mbrsrcfile: $mbrsrcfile\n";
				print STDERR "[Debug:ParseWGFile] mbrsrcpath: $mbrsrcpath\n";
			}
			#-----------------------------------------------------------------------------------------

			push @filedata, {	"description"	=> $description,
								"position"		=> $position,
								"base"			=> $base,
								"baselocale"	=> $baselocale,
								"tran"			=> $tran,
								"tranlocale"	=> $tranlocale,
								"tranorigin"	=> $tranorigin,
								"mbsubmission"	=> $mb_submission,
								"mbrsrcfile"	=> $mb_resourcefile,
								"mbrsrcpath"	=> $mb_resourcepath,
							};
		}
		
		%wgFileData->{$filename} = [ @filedata ];
	}

	return %wgFileData;
}


sub ParseMB20WGFile
{
	my($inWGFile) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFile doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my %data = ();
	my %wgFileData = ();

	my $saveRS = $/;
	undef $/;

	open F, $inWGFile or die;
	my $data = <F>;
	close F;

	$/ = $saveRS;


	while ($data =~ /<File>.*?<Filepath>(.+?)<\/Filepath>(.+?)<\/File>/gs)
	{
		my $filename = $1;
		my $filedata = $2;
		my @filedata = ();

		while ($filedata =~ /<TextItem>(.+?)<\/TextItem>/gs)
		{
			my $item = $1;

			$item =~ /<Description>(.*?)<\/Description>/s;
			my $description = $1;
			$description = &escapeSpecialChar($description);

			$item =~ /<Position>(.*?)<\/Position>/s;
			my $position = $1;
			$position = &escapeSpecialChar($position);

			$item =~ /<TranslationSet>.*?<base.*?>(.*?)<\/base>.*?<\/TranslationSet>/s;
			my $base = $1;
			$base = &escapeSpecialChar($base);

			$item =~ /<base\s+loc\s*=\s*"([^\"]*?)".*>/s;
			my $baselocale = $1;
			$baselocale = &escapeSpecialChar($baselocale);

			$item =~ /<TranslationSet>.*?<tran.*?>(.*?)<\/tran>.*?<\/TranslationSet>/s;
			my $tran = $1;
			$tran = &escapeSpecialChar($tran);

			$item =~ /<tran\s+.*loc\s*=\s*"([^\"]*?)".*>/s;
			my $tranlocale = $1;
			$tranlocale = &escapeSpecialChar($tranlocale);

			$item =~ /<tran\s+.*origin\s*=\s*"([^\"]*?)".*>/s;
			my $tranorigin = $1;
			$tranorigin = &escapeSpecialChar($tranorigin);

			my @origininfo = ();
			
			while ($item =~ /<!--ORIGIN INFO \d+(.+?)-->/gs)
			{
				my $origininfo = $1;
				my %origininfo;

				$origininfo =~ /'source_string'\s*=>\s*'(.*?)' \n/s;
				$origininfo{'source_string'} = $1;

				$origininfo =~ /'translation_string'\s*=>\s*'(.*?)' \n/s;
				$origininfo{'translation_string'} = $1;

				$origininfo =~ /'description'\s*=>\s*'(.*?)'/s;
				$origininfo{'description'} = $1;

				$origininfo =~ /'key'\s*=>\s*'(.*?)'/s;
				$origininfo{'key'} = $1;

				$origininfo =~ /'loc_submission_filename'\s*=>\s*'(.*?)'/s;
				$origininfo{'loc_submission_filename'} = $1;

				$origininfo =~ /'rank'\s*=>\s*'(.*?)'/s;
				$origininfo{'rank'} = $1;

				$origininfo =~ /'rank_description'\s*=>\s*'(.*?)'/s;
				$origininfo{'rank_description'} = $1;

				$origininfo =~ /'resource_file'\s*=>\s*'(.*?)'/s;
				$origininfo{'resource_file'} = $1;

				$origininfo =~ /'resource_path'\s*=>\s*'(.*?)'/s;
				$origininfo{'resource_path'} = $1;

				$origininfo =~ /'translation_language'\s*=>\s*'(.*?)'/s;
				$origininfo{'translation_language'} = $1;

				push @origininfo, {%origininfo};
			}


			#--Debug----------------------------------------------------------------------------------
			if ($gDebug)
			{
				print STDERR "[Debug:ParseWGFile] description: $description\n";
				print STDERR "[Debug:ParseWGFile] position: $position\n";
				print STDERR "[Debug:ParseWGFile] base: $base\n";
				print STDERR "[Debug:ParseWGFile] baselocale: $baselocale\n";
				print STDERR "[Debug:ParseWGFile] tran: $tran\n";
				print STDERR "[Debug:ParseWGFile] tranlocale: $tranlocale\n";
			}
			#-----------------------------------------------------------------------------------------

			push @filedata, {	"description"	=> $description,
								"position"		=> $position,
								"base"			=> $base,
								"baselocale"	=> $baselocale,
								"tran"			=> $tran,
								"tranlocale"	=> $tranlocale,
								"tranorigin"	=> $tranorigin,
								"origininfo"    => [@origininfo],
							};
		}
		
		%wgFileData->{$filename} = [ @filedata ];
	}

	return %wgFileData;
}


sub checkExists
{
	my $srcstr = shift;
	my $dststr = shift;
	my $refhash = shift;

	my %hash = %{$refhash};
	
	foreach $base (keys %hash)
	{
		my @tran = @{$hash{$base}};
		
		foreach $tran (@tran)
		{
			if ($srcstr eq $base && $dststr eq $tran)
			{
				return 1;
			}
		}
	}

	return 0;
}


#---------------------------------------------------------------------------------------------
#	CovertADFileToTMX
#---------------------------------------------------------------------------------------------

sub CovertADFileToTMX
{
	my($inWGFile) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inWGFile doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my %wgFileContent = ParseMB20WGFile($inWGFile);

	foreach $filename (sort keys %wgFileContent)
	{
		my @wgFileItemArray = @{$wgFileContent{$filename}};

		for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};
			my $baseString = $wgFileItemHash{'base'};
			my $tranString = $wgFileItemHash{'tran'};

			if ($baseString ne "" && $tranString ne "")
			{
				my $tmxTranLocale = $AALocUtilities::kAGLanguageCode2TMX{$wgFileItemHash{'tranlocale'}};

				AALocUtilities::PrintToReport("<tu>\n");
				AALocUtilities::PrintToReport("  <note>$origininfo{'resource_path'}/$filename</note>\n");
				AALocUtilities::PrintToReport("  <tuv xml:lang=\"$wgFileItemHash{'baselocale'}\"><seg>$baseString</seg></tuv>\n");
				AALocUtilities::PrintToReport("  <tuv xml:lang=\"$tmxTranLocale\"><seg>$tranString</seg></tuv>\n");
				AALocUtilities::PrintToReport("</tu>\n");
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	CovertWGFileToTMX
#---------------------------------------------------------------------------------------------

sub CovertWGFileToTMX
{
	my($inWGFile) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inWGFile doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my %wgFileContent = ParseMB20WGFile($inWGFile);

	foreach $filename (sort keys %wgFileContent)
	{
		my @array = @{$wgFileContent{$filename}};
		
		foreach $i (@array)
		{
			my %hash = %{$i};
			
			if ($hash{'tranorigin'} =~ /^MatchBox match:\s*([\d\.]+):([\d\.]+)$/)
			{
				# SA next if $1 == 100.00;  # exclude exact matched (export only partial match)

				my @origininfo = @{$hash{'origininfo'}};
				my $exactMatch;
				
				if ($1 == 100.00)
				{
					$exactMatch = 1;
				}
				
				foreach $origininfo (@origininfo)
				{
					my %origininfo = %{$origininfo};
				
					if (! checkExists($origininfo{'source_string'}, 
										$origininfo{'translation_string'},
										\%extracted) )
					{
						my @tran = @{$extracted{$origininfo{'source_string'}}};
						push @tran, $origininfo{'translation_string'};
						$extracted{$origininfo{'source_string'}} = [@tran];

						my $tmxTranLocale = $AALocUtilities::kAGLanguageCode2TMX{$hash{'tranlocale'}};
 
						AALocUtilities::PrintToReport("<tu>\n");
						AALocUtilities::PrintToReport("  <note>$origininfo{'resource_path'}/$origininfo{'resource_file'}</note>\n");
						AALocUtilities::PrintToReport("  <tuv xml:lang=\"$hash{'baselocale'}\"><seg>$origininfo{'source_string'}</seg></tuv>\n");
						AALocUtilities::PrintToReport("  <tuv xml:lang=\"$tmxTranLocale\"><seg>$origininfo{'translation_string'}</seg></tuv>\n");
						AALocUtilities::PrintToReport("</tu>\n");
												
						if ($exactMatch == 1)
						{
							last;
						}
					}
				}
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	CovertWGFolderToTMX
#---------------------------------------------------------------------------------------------

sub CovertWGFolderToTMX
{
	my($inWGFolder, $inTMXFile, $inWGFolder2) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inWGFolder"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The folder $inWGFolder doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	open STDOUT, "> $inTMXFile" or die "Failed to open $inTMXFile\n";


	#-----------------------------------------------------------------------------------------
	#	Print Header
	#-----------------------------------------------------------------------------------------

	print STDOUT <<ENDHEAD;
<?xml version="1.0"?>
<tmx version="1.4">
<header creationtool="AALocCommand" creationtoolversion="1" datatype="unknown" segtype="sentence" adminlang="en" srclang="en" o-tmf="AppleGlot3">
</header>
<body>

ENDHEAD


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	opendir(directory, $inWGFolder);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		#--Debug----------------------------------------------------------------------------------
		print STDERR "[Debug:CovertWGFolderToTMX] Converting \"$file\" to $inTMXFile\n" if ($gDebug);
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("    Generating TMX from $file\n");

		CovertWGFileToTMX("$inWGFolder$file");
	}
	
	
	if ($inWGFolder2 ne "")
	{
		if (-d "$inWGFolder2")
		{
			opendir(directory, $inWGFolder2);
			@searchResult = grep { !/^\./} readdir(directory);
			closedir(directory);
		
			foreach $file (@searchResult)
			{
				#--Debug----------------------------------------------------------------------------------
				print STDERR "[Debug:CovertWGFolderToTMX] Converting \"$file\" to $inTMXFile\n" if ($gDebug);
				#-----------------------------------------------------------------------------------------
		
				CovertWGFileToTMX("$inWGFolder2$file");
			}
		}
		else
		{
			AALocUtilities::PrintLog("\n### ERROR: The folder $inWGFolder2 doesn't exist.\n");
			return;
		}
	}

	
	#-----------------------------------------------------------------------------------------
	#	Print Tail
	#-----------------------------------------------------------------------------------------
	
	print STDOUT <<ENDTAIL;

</body>
</tmx>
ENDTAIL
}


#---------------------------------------------------------------------------------------------
#	GenerateTMXforAppleGlotEnv
#---------------------------------------------------------------------------------------------

sub GenerateTMXforAppleGlotEnv
{
	my($inAppleGlotEnvPath) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The folder $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvTMXPath = $inAppleGlotEnvPath . "ADsAndWGs.tmx";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	open STDOUT, "> $appleGlotEnvTMXPath" or die "Failed to open $appleGlotEnvTMXPath\n";


	#-----------------------------------------------------------------------------------------
	#	Print Header
	#-----------------------------------------------------------------------------------------

	print STDOUT <<ENDHEAD;
<?xml version="1.0"?>
<tmx version="1.4">
<header creationtool="AALocCommand" creationtoolversion="1" datatype="unknown" segtype="sentence" adminlang="en" srclang="en" o-tmf="AppleGlot3">
</header>
<body>

ENDHEAD


	#-----------------------------------------------------------------------------------------
	#	_ApplicationDictionaries
	#-----------------------------------------------------------------------------------------
	
	opendir(directory, $appleGlotEnvADPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		#--Debug----------------------------------------------------------------------------------
		print STDERR "[Debug:GenerateTMXforAppleGlotEnv] Converting \"$file\" to $appleGlotEnvTMXPath\n" if ($gDebug);
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Generating TMX from $file\n");

		CovertADFileToTMX("$appleGlotEnvADPath$file");
	}


	#-----------------------------------------------------------------------------------------
	#	_WorkGlossary_Review
	#-----------------------------------------------------------------------------------------
	
	opendir(directory, $appleGlotEnvWGReviewPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		#--Debug----------------------------------------------------------------------------------
		print STDERR "[Debug:GenerateTMXforAppleGlotEnv] Converting \"$file\" to $appleGlotEnvTMXPath\n" if ($gDebug);
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Generating TMX from $file\n");

		CovertWGFileToTMX("$appleGlotEnvWGReviewPath$file");
	}

	
	#-----------------------------------------------------------------------------------------
	#	Print Tail
	#-----------------------------------------------------------------------------------------
	
	print STDOUT <<ENDTAIL;

</body>
</tmx>
ENDTAIL
}


#---------------------------------------------------------------------------------------------
#	GenerateNotTranslatedStringsWG
#---------------------------------------------------------------------------------------------

sub GenerateNotTranslatedStringsWG
{
	my($inAppleGlotEnvPath) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The folder $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvWGNotTranslatedStringsPath = $inAppleGlotEnvPath . "_WorkGlossary_NotTranslatedStrings/";
	
	AALocFileUtilities::RemoveFolder($appleGlotEnvWGNotTranslatedStringsPath);
	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvWGNotTranslatedStringsPath);


	#-----------------------------------------------------------------------------------------
	#	_ApplicationDictionaries
	#-----------------------------------------------------------------------------------------
	
	opendir(directory, $appleGlotEnvADPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		my $isEmpty = 1;
		
		AALocUtilities::PrintLog("Generating Not Translated Strings from $file\n");

		$fileNameWithoutSuffix = $file;
		$fileNameWithoutSuffix =~ m/(.*)\.(.*)/;
		$fileNameWithoutSuffix = $1;
		
		my $output = $appleGlotEnvWGNotTranslatedStringsPath . $fileNameWithoutSuffix . ".wg";

		#-------------------------------------------------------------------------------------
		#	Write WG header
		#-------------------------------------------------------------------------------------
		
		open (TEMPFILE, ">$output") || die "Can't open $output for wg output.\n";

		print  TEMPFILE "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n";
		@dates = localtime( time() );
		printf TEMPFILE ("<!-- Created by AALocCommand at %02d/%02d/%04d %02d:%02d:%02d                           -->\n",
			 $dates[4] + 1, $dates[3], $dates[5] + 1900, $dates[2], $dates[1], $dates[0]);
		print  TEMPFILE "<!-- ". "="x70 . " -->\n";

		print  TEMPFILE "<Proj>\n";
		print  TEMPFILE "<ProjName>$fileNameWithoutSuffix<\/ProjName>\n";


		my %wgFileContent = ParseWGFile("$appleGlotEnvADPath$file");
		
		foreach $filename (sort keys %wgFileContent)
		{
			my @wgFileItemArray = @{$wgFileContent{$filename}};
			
			my $fileHeaderPrinted = 0;

			for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
			{
				my %wgFileItemHash = %{$wgFileItemArray[$index]};
				
				if ($wgFileItemHash{'base'} ne "OtherViews"
					&& $wgFileItemHash{'base'} ne ""
					&& $wgFileItemHash{'base'} ne "Item1"
					&& $wgFileItemHash{'base'} ne "Item 1"
					&& $wgFileItemHash{'base'} ne "Item2"
					&& $wgFileItemHash{'base'} ne "Item3"
					&& $wgFileItemHash{'base'} ne "attributedTitleAsHTML"
					&& $wgFileItemHash{'position'} ne "NSHumanReadableCopyright"
					&& !($wgFileItemHash{'position'} =~ m/frameAutosaveName/)
					&& !($wgFileItemHash{'base'} =~ m/Copyright ¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬©/)
					&& $wgFileItemHash{'base'} ne " "
					&& $wgFileItemHash{'base'} ne "Box"
					&& $wgFileItemHash{'base'} ne "Radio")
				{
					if ($wgFileItemHash{'base'} eq $wgFileItemHash{'tran'})
					{
						$isEmpty = 0;

						if ($fileHeaderPrinted == 0)
						{
							print  TEMPFILE "<!-- ". " "x70 . " -->\n";
							printf TEMPFILE ( "<!--    %-64s    -->\n", $filename );
							print  TEMPFILE "<!-- ". " "x70 . " -->\n";
							print  TEMPFILE "<File>\n";
							print  TEMPFILE "<Filepath>$filename<\/Filepath>\n\n";
						
							$fileHeaderPrinted = 1;
						}
					
						print  TEMPFILE "<TextItem>\n";
						print  TEMPFILE "<Description>$wgFileItemHash{'description'}<\/Description>\n";
						print  TEMPFILE "<Position>$wgFileItemHash{'position'}<\/Position>\n";
						print  TEMPFILE "<TranslationSet>\n\n";
						print  TEMPFILE ("\t<base loc=\"en\"            >$wgFileItemHash{'base'}<\/base>\n");
						print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\" origin=\"\">$wgFileItemHash{'tran'}<\/tran>\n\n");
						print  TEMPFILE "<\/TranslationSet>\n";
						print  TEMPFILE "<\/TextItem>\n\n";
					}
				}
			}
			
			if ($fileHeaderPrinted == 1)
			{
				print TEMPFILE "</File>\n\n";
			}
		}
		
		#-------------------------------------------------------------------------------------
		#	Write WG footer
		#-------------------------------------------------------------------------------------
		
		print TEMPFILE "</Proj>\n\n";
		close (TEMPFILE);
		
		
		if ($isEmpty == 1)
		{
			AALocFileUtilities::RemoveFile($output);
		}
	}
}


#---------------------------------------------------------------------------------------------
#	GenerateOnlyTranslatedStringsAD
#---------------------------------------------------------------------------------------------

sub GenerateOnlyTranslatedStringsAD
{
	my($inAppleGlotEnvPath) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The folder $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvADReferencesPath = $inAppleGlotEnvPath . "_ApplicationDictionaries_References/";
	
	AALocFileUtilities::RemoveFolder($appleGlotEnvADReferencesPath);
	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvADReferencesPath);
	
	
	#-----------------------------------------------------------------------------------------
	#	_ApplicationDictionaries
	#-----------------------------------------------------------------------------------------
	
	opendir(directory, $appleGlotEnvADPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
	foreach $file (@searchResult)
	{
		my $isEmpty = 1;

		AALocUtilities::PrintLog("Generating Only Translated Strings from $file\n");
		
		$fileNameWithoutSuffix = $file;
		$fileNameWithoutSuffix =~ m/(.*)\.(.*)/;
		$fileNameWithoutSuffix = $1;
		
		my $output = $appleGlotEnvADReferencesPath . $fileNameWithoutSuffix . ".ad";
		
		#-------------------------------------------------------------------------------------
		#	Write WG header
		#-------------------------------------------------------------------------------------
		
		open (TEMPFILE, ">$output") || die "Can't open $output for wg output.\n";
		
		print  TEMPFILE "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n";
		@dates = localtime( time() );
		printf TEMPFILE ("<!-- Created by AALocCommand at %02d/%02d/%04d %02d:%02d:%02d                           -->\n",
		$dates[4] + 1, $dates[3], $dates[5] + 1900, $dates[2], $dates[1], $dates[0]);
		print  TEMPFILE "<!-- ". "="x70 . " -->\n";
		
		print  TEMPFILE "<Proj>\n";
		print  TEMPFILE "<ProjName>$fileNameWithoutSuffix<\/ProjName>\n";
		
		
		my %wgFileContent = ParseWGFile("$appleGlotEnvADPath$file");
		
		foreach $filename (sort keys %wgFileContent)
		{
			my @wgFileItemArray = @{$wgFileContent{$filename}};
			
			my $fileHeaderPrinted = 0;
			
			for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
			{
				my %wgFileItemHash = %{$wgFileItemArray[$index]};
				
				if ($wgFileItemHash{'base'} ne "OtherViews"
				&& $wgFileItemHash{'base'} ne ""
				&& $wgFileItemHash{'base'} ne "Item1"
				&& $wgFileItemHash{'base'} ne "Item 1"
				&& $wgFileItemHash{'base'} ne "Item2"
				&& $wgFileItemHash{'base'} ne "Item3"
				&& $wgFileItemHash{'base'} ne "attributedTitleAsHTML"
				&& $wgFileItemHash{'position'} ne "NSHumanReadableCopyright"
				&& !($wgFileItemHash{'position'} =~ m/frameAutosaveName/)
				&& !($wgFileItemHash{'base'} =~ m/Copyright ¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬©/)
				&& $wgFileItemHash{'base'} ne " "
				&& $wgFileItemHash{'base'} ne "Box"
				&& $wgFileItemHash{'base'} ne "Radio"
				&& $wgFileItemHash{'description'} ne "Content-Transfer-Encoding: base64;")
				{
					if ($wgFileItemHash{'base'} ne $wgFileItemHash{'tran'})
					{
						$isEmpty = 0;
						
						if ($fileHeaderPrinted == 0)
						{
							print  TEMPFILE "<!-- ". " "x70 . " -->\n";
							printf TEMPFILE ( "<!--    %-64s    -->\n", $filename );
							print  TEMPFILE "<!-- ". " "x70 . " -->\n";
							print  TEMPFILE "<File>\n";
							print  TEMPFILE "<Filepath>$filename<\/Filepath>\n\n";
							
							$fileHeaderPrinted = 1;
						}
						
						print  TEMPFILE "<TextItem>\n";
						print  TEMPFILE "<Description>$wgFileItemHash{'description'}<\/Description>\n";
						print  TEMPFILE "<Position>$wgFileItemHash{'position'}<\/Position>\n";
						print  TEMPFILE "<TranslationSet>\n\n";
						print  TEMPFILE ("\t<base loc=\"en\"            >$wgFileItemHash{'base'}<\/base>\n");
						print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\" origin=\"\">$wgFileItemHash{'tran'}<\/tran>\n\n");
						print  TEMPFILE "<\/TranslationSet>\n";
						print  TEMPFILE "<\/TextItem>\n\n";
					}
				}
			}
			
			if ($fileHeaderPrinted == 1)
			{
				print TEMPFILE "</File>\n\n";
			}
		}
		
		#-------------------------------------------------------------------------------------
		#	Write WG footer
		#-------------------------------------------------------------------------------------
		
		print TEMPFILE "</Proj>\n\n";
		close (TEMPFILE);
		
		
		if ($isEmpty == 1)
		{
			AALocFileUtilities::RemoveFile($output);
		}
	}
}


#---------------------------------------------------------------------------------------------
#	GenerateOnlyNotTranslatedStringsWG
#---------------------------------------------------------------------------------------------

sub GenerateOnlyNotTranslatedStringsWG
{
	my($inWGFilePath) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inWGFilePath doesn't exist.\n");
		return;
	}


	AALocUtilities::PrintLog("Generating Not Translated Strings from $inWGFilePath\n");

	my %wgFileContent = ParseWGFile("$inWGFilePath");

	
	my $output = $inWGFilePath;

	#-------------------------------------------------------------------------------------
	#	Write WG header
	#-------------------------------------------------------------------------------------
	
	open (TEMPFILE, ">$output") || die "Can't open $output for wg output.\n";

	print  TEMPFILE "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n";
	@dates = localtime( time() );
	printf TEMPFILE ("<!-- Created by AALocCommand at %02d/%02d/%04d %02d:%02d:%02d                           -->\n",
		 $dates[4] + 1, $dates[3], $dates[5] + 1900, $dates[2], $dates[1], $dates[0]);
	print  TEMPFILE "<!-- ". "="x70 . " -->\n";

	print  TEMPFILE "<Proj>\n";
	print  TEMPFILE "<ProjName>$fileNameWithoutSuffix<\/ProjName>\n";

	
	foreach $filename (sort keys %wgFileContent)
	{
		my @wgFileItemArray = @{$wgFileContent{$filename}};
		
		my $fileHeaderPrinted = 0;

		for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};
			
			if ($wgFileItemHash{'base'} ne "OtherViews"
				&& $wgFileItemHash{'base'} ne ""
				&& $wgFileItemHash{'base'} ne "Item1"
				&& $wgFileItemHash{'base'} ne "Item 1"
				&& $wgFileItemHash{'base'} ne "Item2"
				&& $wgFileItemHash{'base'} ne "Item3"
				&& $wgFileItemHash{'base'} ne "attributedTitleAsHTML"
				&& $wgFileItemHash{'position'} ne "NSHumanReadableCopyright"
				&& !($wgFileItemHash{'position'} =~ m/frameAutosaveName/)
				&& !($wgFileItemHash{'base'} =~ m/Copyright ¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬©/)
				&& $wgFileItemHash{'base'} ne " "
				&& $wgFileItemHash{'base'} ne "Box"
				&& $wgFileItemHash{'base'} ne "Radio")
			{
				if ($wgFileItemHash{'base'} eq $wgFileItemHash{'tran'})
				{
					if ($fileHeaderPrinted == 0)
					{
						print  TEMPFILE "<!-- ". " "x70 . " -->\n";
						printf TEMPFILE ( "<!--    %-64s    -->\n", $filename );
						print  TEMPFILE "<!-- ". " "x70 . " -->\n";
						print  TEMPFILE "<File>\n";
						print  TEMPFILE "<Filepath>$filename<\/Filepath>\n\n";
					
						$fileHeaderPrinted = 1;
					}
				
					print  TEMPFILE "<TextItem>\n";
					print  TEMPFILE "<Description>$wgFileItemHash{'description'}<\/Description>\n";
					print  TEMPFILE "<Position>$wgFileItemHash{'position'}<\/Position>\n";
					# print  TEMPFILE "<TranslationSet>\n\n";
					print  TEMPFILE "<TranslationSet>\n";
					# print  TEMPFILE ("\t<base loc=\"en\"            >$wgFileItemHash{'base'}<\/base>\n");
					print  TEMPFILE ("\t<base loc=\"en\">$wgFileItemHash{'base'}<\/base>\n");
					# print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\" origin=\"\">$wgFileItemHash{'tran'}<\/tran>\n\n");
					print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\">$wgFileItemHash{'tran'}<\/tran>\n");
					print  TEMPFILE "<\/TranslationSet>\n";
					print  TEMPFILE "<\/TextItem>\n\n";
				}
			}
		}
		
		if ($fileHeaderPrinted == 1)
		{
			print TEMPFILE "</File>\n\n";
		}
	}
	
	#-------------------------------------------------------------------------------------
	#	Write WG footer
	#-------------------------------------------------------------------------------------
	
	print TEMPFILE "</Proj>\n\n";
	close (TEMPFILE);
}


#---------------------------------------------------------------------------------------------
#	FindTranslationInAD
#---------------------------------------------------------------------------------------------

sub FindTranslationInAD
{
	my($inADFileContentRef, $inSoureString) = @_;
	my $outTranslation = "";
	
	my %inADFileContent = %{$inADFileContentRef};

	foreach $filename (sort keys %inADFileContent)
	{
		print "$filename\n";
		
		my @adFileItemArray = @{$inADFileContent{$filename}};
		
		$numberofitem = (scalar @adFileItemArray);
		print "$numberofitem\n";
		
		for ($index = 0; $index < (scalar @adFileItemArray); $index++)
		{
			my %adFileItemHash = %{$adFileItemArray[$index]};
			
			# print "$wgFileItemHash{'base'}\n";

			if ($adFileItemHash{'base'} eq $inSoureString)
			{
				$outTranslation = $adFileItemHash{'tran'};
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	LeverageWGFromOther
#---------------------------------------------------------------------------------------------

sub LeverageWGFromOther
{
	my($inWGFile, $inLeverageWGFile) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inWGFile doesn't exist.\n");
		return;
	}
	
	if (!(-e "$inLeverageWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inLeverageWGFile doesn't exist.\n");
		return;
	}

	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	my %wgFileContent = ParseWGFile("$inWGFile");
	my %adFileContent = ParseWGFile("$inLeverageWGFile");
	
	
		
	#-------------------------------------------------------------------------------------
	#	Write WG header
	#-------------------------------------------------------------------------------------

	$fileNameWithoutSuffix = $inWGFile;
	$fileNameWithoutSuffix =~ m/(.*)\.(.*)/;
	$fileNameWithoutSuffix = $1;
	
	
	open (TEMPFILE, ">$inWGFile") || die "Can't open $inWGFile for wg output.\n";
	
	print  TEMPFILE "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n";
	@dates = localtime( time() );
	printf TEMPFILE ("<!-- Created by AALocCommand at %02d/%02d/%04d %02d:%02d:%02d                           -->\n",
	$dates[4] + 1, $dates[3], $dates[5] + 1900, $dates[2], $dates[1], $dates[0]);
	print  TEMPFILE "<!-- ". "="x70 . " -->\n";
	
	print  TEMPFILE "<Proj>\n";
	print  TEMPFILE "<ProjName>$fileNameWithoutSuffix<\/ProjName>\n";
	
	
	foreach $filename (sort keys %wgFileContent)
	{
		my @wgFileItemArray = @{$wgFileContent{$filename}};
		
		my $fileHeaderPrinted = 0;
		
		my $numberOfStrings = (scalar @wgFileItemArray);
		
		for ($index = 0; $index < $numberOfStrings; $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};
		
			if ($fileHeaderPrinted == 0)
			{
				print  TEMPFILE "<!-- ". " "x70 . " -->\n";
				printf TEMPFILE ( "<!--    %-64s    -->\n", $filename );
				print  TEMPFILE "<!-- ". " "x70 . " -->\n";
				print  TEMPFILE "<File>\n";
				print  TEMPFILE "<Filepath>$filename<\/Filepath>\n\n";
				
				$fileHeaderPrinted = 1;
			}
			
			# $translation = FindTranslationInAD(\%adFileContent, $wgFileItemHash{'base'});
			
			# if ($translation ne "")
			# {
			# 	$wgFileItemHash{'tran'} = $translation;
			# }
			
			# $wgFileItemHash{'tran'} = $wgFileItemHash{'base'};
			
			foreach $adFilename (sort keys %adFileContent)
			{
				my @adFileItemArray = @{$adFileContent{$adFilename}};
				
				for ($indexAD = 0; $indexAD < (scalar @adFileItemArray); $indexAD++)
				{
					my %adFileItemHash = %{$adFileItemArray[$indexAD]};
					
					if (($adFileItemHash{'base'} eq $wgFileItemHash{'base'})
						&& ($adFileItemHash{'position'} eq $wgFileItemHash{'position'}))
					{
						$wgFileItemHash{'tran'} = $adFileItemHash{'tran'};
						next;
					}
				}
			}
			
			
			print  TEMPFILE "<TextItem>\n";
			print  TEMPFILE "<Description>$wgFileItemHash{'description'}<\/Description>\n";
			print  TEMPFILE "<Position>$wgFileItemHash{'position'}<\/Position>\n";
			print  TEMPFILE "<TranslationSet>\n\n";
			print  TEMPFILE ("\t<base loc=\"en\"            >$wgFileItemHash{'base'}<\/base>\n");
			print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\" origin=\"\">$wgFileItemHash{'tran'}<\/tran>\n\n");
			print  TEMPFILE "<\/TranslationSet>\n";
			print  TEMPFILE "<\/TextItem>\n\n";
		}
		
		if ($fileHeaderPrinted == 1)
		{
			print TEMPFILE "</File>\n\n";
		}
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Write WG footer
	#-------------------------------------------------------------------------------------
	
	print TEMPFILE "</Proj>\n\n";
	close (TEMPFILE);
}


#---------------------------------------------------------------------------------------------
#	LeverageWGFromOtherFolder
#---------------------------------------------------------------------------------------------

sub LeverageWGFromOtherFolder
{
	my($inWGFolder, $inLeverageWGFolder) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inWGFolder"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The folder $inWGFolder doesn't exist.\n");
		return;
	}
	
	if (!(-d "$inLeverageWGFolder"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The folder $inLeverageWGFolder doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	opendir(directory, $inWGFolder);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgFile = $inWGFolder . $file;
		$leveageWGFile = $inLeverageWGFolder . $file;
		
		if (-e "$leveageWGFile")
		{
			AALocUtilities::PrintLog("Processing $file\n");

			LeverageWGFromOther($wgFile, $leveageWGFile);
		}
	}
}


#---------------------------------------------------------------------------------------------
#	LeverageWGFromOtherPOI
#---------------------------------------------------------------------------------------------

sub LeverageWGFromOtherPOI
{
	my($inWGFile, $inLeverageWGFile) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inWGFile doesn't exist.\n");
		return;
	}
	
	if (!(-e "$inLeverageWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inLeverageWGFile doesn't exist.\n");
		return;
	}

	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	my %wgFileContent = ParseWGFile("$inWGFile");
	my %adFileContent = ParseWGFile("$inLeverageWGFile");
	
	
		
	#-------------------------------------------------------------------------------------
	#	Write WG header
	#-------------------------------------------------------------------------------------

	$fileNameWithoutSuffix = $inWGFile;
	$fileNameWithoutSuffix =~ m/(.*)\.(.*)/;
	$fileNameWithoutSuffix = $1;
	
	
	open (TEMPFILE, ">$inWGFile") || die "Can't open $inWGFile for wg output.\n";
	
	print  TEMPFILE "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n";
	@dates = localtime( time() );
	printf TEMPFILE ("<!-- Created by AALocCommand at %02d/%02d/%04d %02d:%02d:%02d                           -->\n",
	$dates[4] + 1, $dates[3], $dates[5] + 1900, $dates[2], $dates[1], $dates[0]);
	print  TEMPFILE "<!-- ". "="x70 . " -->\n";
	
	print  TEMPFILE "<Proj>\n";
	print  TEMPFILE "<ProjName>$fileNameWithoutSuffix<\/ProjName>\n";
	
	
	foreach $filename (sort keys %wgFileContent)
	{
		my @wgFileItemArray = @{$wgFileContent{$filename}};
		
		my $fileHeaderPrinted = 0;
		
		my $numberOfStrings = (scalar @wgFileItemArray);
		
		for ($index = 0; $index < $numberOfStrings; $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};
		
			if ($fileHeaderPrinted == 0)
			{
				print  TEMPFILE "<!-- ". " "x70 . " -->\n";
				printf TEMPFILE ( "<!--    %-64s    -->\n", $filename );
				print  TEMPFILE "<!-- ". " "x70 . " -->\n";
				print  TEMPFILE "<File>\n";
				print  TEMPFILE "<Filepath>$filename<\/Filepath>\n\n";
				
				$fileHeaderPrinted = 1;
			}
			
			# $translation = FindTranslationInAD(\%adFileContent, $wgFileItemHash{'base'});
			
			# if ($translation ne "")
			# {
			# 	$wgFileItemHash{'tran'} = $translation;
			# }
			
			foreach $adFilename (sort keys %adFileContent)
			{
				my @adFileItemArray = @{$adFileContent{$adFilename}};
				
				for ($indexAD = 0; $indexAD < (scalar @adFileItemArray); $indexAD++)
				{
					my %adFileItemHash = %{$adFileItemArray[$indexAD]};
					
					if (($adFileItemHash{'base'} eq $wgFileItemHash{'base'})
						&& ($adFileItemHash{'position'} eq $wgFileItemHash{'position'}))
					{
						$wgFileItemHash{'tran'} = $adFileItemHash{'tran'};
						next;
					}
				}
			}
			
			
			print  TEMPFILE "<TextItem>\n";
			print  TEMPFILE "<Description>$wgFileItemHash{'description'}<\/Description>\n";
			print  TEMPFILE "<Position>$wgFileItemHash{'position'}<\/Position>\n";
			# print  TEMPFILE "<TranslationSet>\n\n";
			print  TEMPFILE "<TranslationSet>\n";
			# print  TEMPFILE ("\t<base loc=\"en\"            >$wgFileItemHash{'base'}<\/base>\n");
			print  TEMPFILE ("\t<base loc=\"en\">$wgFileItemHash{'base'}<\/base>\n");
			# print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\" origin=\"\">$wgFileItemHash{'tran'}<\/tran>\n\n");
			print  TEMPFILE ("\t<tran loc=\"$wgFileItemHash{'tranlocale'}\">$wgFileItemHash{'tran'}<\/tran>\n");
			print  TEMPFILE "<\/TranslationSet>\n";
			print  TEMPFILE "<\/TextItem>\n\n";
		}
		
		if ($fileHeaderPrinted == 1)
		{
			print TEMPFILE "</File>\n\n";
		}
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Write WG footer
	#-------------------------------------------------------------------------------------
	
	print TEMPFILE "</Proj>\n\n";
	close (TEMPFILE);
}


#---------------------------------------------------------------------------------------------
#	GenerateChangedAD
#---------------------------------------------------------------------------------------------

sub GenerateChangedAD
{
	my($inNewADFile, $inOldADFile) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-e "$inNewADFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inNewADFile doesn't exist.\n");
		return;
	}
	
	if (!(-e "$inOldADFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The file $inOldADFile doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	my %newADFileContent = ParseWGFile("$inNewADFile");
	my %oldADFileContent = ParseWGFile("$inOldADFile");
	
	
	
	#-------------------------------------------------------------------------------------
	#	Write WG header
	#-------------------------------------------------------------------------------------
	
	$fileNameWithoutSuffix = $inNewADFile;
	$fileNameWithoutSuffix =~ m/(.*)\.(.*)/;
	$fileNameWithoutSuffix = $1;
	
	
	open (TEMPFILE, ">$inNewADFile") || die "Can't open $inNewADFile for AD output.\n";
	
	print  TEMPFILE "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n";
	@dates = localtime( time() );
	printf TEMPFILE ("<!-- Created by AALocCommand at %02d/%02d/%04d %02d:%02d:%02d                           -->\n",
	$dates[4] + 1, $dates[3], $dates[5] + 1900, $dates[2], $dates[1], $dates[0]);
	print  TEMPFILE "<!-- ". "="x70 . " -->\n";
	
	print  TEMPFILE "<Proj>\n";
	print  TEMPFILE "<ProjName>$fileNameWithoutSuffix<\/ProjName>\n";
	
	
	foreach $filename (sort keys %newADFileContent)
	{
		my @newADFileItemArray = @{$newADFileContent{$filename}};
		
		my $fileHeaderPrinted = 0;
		
		my $numberOfStrings = (scalar @newADFileItemArray);
		
		for ($index = 0; $index < $numberOfStrings; $index++)
		{
			my %newADFileItemHash = %{$newADFileItemArray[$index]};
						
			foreach $oldADFilename (sort keys %oldADFileContent)
			{
				my @oldADFileItemArray = @{$oldADFileContent{$oldADFilename}};
				
				for ($indexAD = 0; $indexAD < (scalar @oldADFileItemArray); $indexAD++)
				{
					my %oldADFileItemHash = %{$oldADFileItemArray[$indexAD]};
					
					if (($oldADFileItemHash{'base'} eq $newADFileItemHash{'base'})
						&& ($oldADFileItemHash{'position'} eq $newADFileItemHash{'position'})
						&& ($oldADFileItemHash{'description'} eq $newADFileItemHash{'description'}))
					{
						if ($newADFileItemHash{'tran'} ne $oldADFileItemHash{'tran'})
						{
							if ($fileHeaderPrinted == 0)
							{
								print  TEMPFILE "<!-- ". " "x70 . " -->\n";
								printf TEMPFILE ( "<!--    %-64s    -->\n", $filename );
								print  TEMPFILE "<!-- ". " "x70 . " -->\n";
								print  TEMPFILE "<File>\n";
								print  TEMPFILE "<Filepath>$filename<\/Filepath>\n\n";
								
								$fileHeaderPrinted = 1;
							}

							print  TEMPFILE "<TextItem>\n";
							print  TEMPFILE "<Description>$newADFileItemHash{'description'}<\/Description>\n";
							print  TEMPFILE "<Position>$newADFileItemHash{'position'}<\/Position>\n";
							print  TEMPFILE "<TranslationSet>\n\n";
							print  TEMPFILE ("\t<base loc=\"en\"            >$newADFileItemHash{'base'}<\/base>\n");
							print  TEMPFILE ("\t<tran loc=\"$newADFileItemHash{'tranlocale'}\" origin=\"\">$newADFileItemHash{'tran'}<\/tran>\n\n");
							print  TEMPFILE "<\/TranslationSet>\n";
							print  TEMPFILE "<\/TextItem>\n\n";
						}
						
						next;
					}
				}
			}
			
		}
		
		if ($fileHeaderPrinted == 1)
		{
			print TEMPFILE "</File>\n\n";
		}
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Write WG footer
	#-------------------------------------------------------------------------------------
	
	print TEMPFILE "</Proj>\n\n";
	close (TEMPFILE);
}


#---------------------------------------------------------------------------------------------
#	FixWGFileBaseTab
#
#	<base loc="en"(.*?)> => <base loc="en">
#---------------------------------------------------------------------------------------------

sub FixWGFileBaseTab
{
	my($inWGFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Read flverifier report
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The WG file $inWGFilePath doesn't exist.\n");
		return;
	}

	open(FILECONTENT, "<$inWGFilePath") or die "Cannot open '$inWGFilePath': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	open fixedWGFile, "> $inWGFilePath" or die "Failed to open $inWGFilePath\n";

	my $line;

	foreach $line(@fileContent)
	{
		$line =~ s/<base loc="en"(.*?)>/<base loc="en">/;
		print fixedWGFile $line;
	}

	close fixedWGFile;
}


#---------------------------------------------------------------------------------------------
#	MergeWGFiles
#
#	Copy WG files from Transit_WG folder to _WorkGlossary folder
#
#	Check WG files' content after merge
#---------------------------------------------------------------------------------------------

sub MergeWGFiles
{
	my($inAppleGlotEnvPath) = @_;

	$appleGlotEnvTransitWGPath = $inAppleGlotEnvPath . "Transit_WG/";
	$appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$appleGlotEnvTransitWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvTransitWGPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotEnvWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Merge WG Files
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;
	
	opendir(directory, $appleGlotEnvTransitWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	foreach $file (@searchResult)
	{
		`cp "$appleGlotEnvTransitWGPath$file" "$appleGlotEnvWGPath$file"`
	}


	#-----------------------------------------------------------------------------------------
	#	Check WG Files
	#-----------------------------------------------------------------------------------------

	CheckWGADFolder($inAppleGlotEnvPath, kCheckWGFiles);
}


#---------------------------------------------------------------------------------------------
#	MergeWGFilesLKCX
#
#	Merge WG files from Transit_WG folder with _WorkGlossary_Org folder to _WorkGlossary folder
#	If WG files don't exist in Transit_WG folder, copy from _WorkGlossary_Org folder to _WorkGlossary folder
#
#	Check WG files' content after merge
#---------------------------------------------------------------------------------------------

sub MergeWGFilesLKCX
{
	my($inAppleGlotEnvPath) = @_;

	$appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	$appleGlotEnvTransitWGPath = $inAppleGlotEnvPath . "Transit_WG/";
	$appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$appleGlotEnvWGOrgPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGOrgPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotEnvTransitWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvTransitWGPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotEnvWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Merge WG Files
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;
	
	opendir(directory, $appleGlotEnvWGOrgPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	foreach $file (@searchResult)
	{
		if (-e "$appleGlotEnvTransitWGPath$file")
		{
			AALocUtilities::PrintLog("Merging $file\n");
			
			# FixWGFileBaseTab("$appleGlotEnvWGOrgPath$file");
			# FixWGFileBaseTab("$appleGlotEnvTransitWGPath$file");
			
			`convAGFiles -mergeWG -original "$appleGlotEnvWGOrgPath$file" -mergeFile "$appleGlotEnvTransitWGPath$file" -target "$appleGlotEnvWGPath" -reverse`;
		}
		else
		{
			AALocUtilities::PrintLog("Copying $file from _WorkGlossary_Org\n");
			`cp "$appleGlotEnvWGOrgPath$file" "$appleGlotEnvWGPath$file"`
		}
	}
	
	# Fixes the problem of tempWG file created by convAGFiles
	`rm /tmp/tempWG` if (-e "/tmp/tempWG");


	#-----------------------------------------------------------------------------------------
	#	Check WG Files
	#-----------------------------------------------------------------------------------------

	CheckWGADFolder($inAppleGlotEnvPath, kCheckWGFiles);
}


#---------------------------------------------------------------------------------------------
#	MergeWGFilesLX
#
#	Merge WG files from Transit_WG folder with _WorkGlossary_Candidates folder and _WorkGlossary_Review
#	folder to _WorkGlossary folder
#
#	If WG files don't exist in Transit_WG folder, Merge WG files from _WorkGlossary_Org folder with
#	_WorkGlossary_Candidates folder and _WorkGlossary_Review folder to _WorkGlossary folder
#
#	Check WG files' content after merge
#---------------------------------------------------------------------------------------------

sub MergeWGFilesLX
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvTransitWGPath = $inAppleGlotEnvPath . "Transit_WG/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGNewPath = $inAppleGlotEnvPath . "_WorkGlossary_New/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$appleGlotEnvTransitWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvTransitWGPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotEnvWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotEnvWGNewPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGNewPath doesn't exist.\n");
		return;
	}

	if (!(-d "$appleGlotEnvWGCandidatesPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGCandidatesPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotEnvWGReviewPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGReviewPath doesn't exist.\n");
		return;
	}
	


	#-----------------------------------------------------------------------------------------
	#	Merge WG Files
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;
	
	opendir(directory, $appleGlotEnvWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	foreach $file (@searchResult)
	{
		if (-e "$appleGlotEnvTransitWGPath$file")
		{
			AALocUtilities::PrintLog("Merging $file\n");
			`mergeGlossaries -fileToMerge "$appleGlotEnvWGOrgPath$file" -fileToMerge "$appleGlotEnvTransitWGPath$file" -fileToMerge "$appleGlotEnvWGCandidatesPath$file" -fileToMerge "$appleGlotEnvWGReviewPath$file" -saveDir "$appleGlotEnvWGPath" -allowUntranslatedEntries -allowOverlappingEntries`;
		}
		else
		{
			# SA
			AALocUtilities::PrintLog("Merging $file from _WorkGlossary_Org\n");
			`mergeGlossaries -fileToMerge "$appleGlotEnvWGOrgPath$file" -fileToMerge "$appleGlotEnvWGNewPath$file" -fileToMerge "$appleGlotEnvWGCandidatesPath$file" -fileToMerge "$appleGlotEnvWGReviewPath$file" -saveDir "$appleGlotEnvWGPath" -allowUntranslatedEntries -allowOverlappingEntries`;
		}
	}
	

	#-----------------------------------------------------------------------------------------
	#	Check WG Files
	#-----------------------------------------------------------------------------------------

	CheckWGADFolder($inAppleGlotEnvPath, kCheckWGFiles);
}


#---------------------------------------------------------------------------------------------
#	MergeInHouseTranslationEnv
#
#	Merge WG files from Transit_WG folder with _WorkGlossary_Candidates folder and _WorkGlossary_Review
#	folder to _WorkGlossary folder
#
#	If WG files don't exist in Transit_WG folder, Merge WG files from _WorkGlossary_Org folder with
#	_WorkGlossary_Candidates folder and _WorkGlossary_Review folder to _WorkGlossary folder
#
#	Check WG files' content after merge
#---------------------------------------------------------------------------------------------

sub MergeInHouseTranslationEnv
{
	my($inFolder) = @_;

	my $wgOrgPath = $inFolder . "_WorkGlossary_Org/";
	my $wgPath = $inFolder . "_WorkGlossary/";
	my $wgNewPath = $inFolder . "_WorkGlossary_New/";
	my $wgCandidatesPath = $inFolder . "_WorkGlossary_Candidates/";
	my $wgReviewPath = $inFolder . "_WorkGlossary_Review/";


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$wgPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $wgPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$wgNewPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $wgNewPath doesn't exist.\n");
		return;
	}

	if (!(-d "$wgCandidatesPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $wgCandidatesPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$wgReviewPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $wgReviewPath doesn't exist.\n");
		return;
	}
	


	#-----------------------------------------------------------------------------------------
	#	Merge WG Files
	#-----------------------------------------------------------------------------------------

	`ditto "$wgPath" "$wgOrgPath"`;


	my $directory;
	my $file;
	
	opendir(directory, $wgOrgPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	foreach $file (@searchResult)
	{
		if (-e "$wgOrgPath$file")
		{
			if (-e "$wgNewPath$file")
			{
				if (-e "$wgCandidatesPath$file")
				{
					if (-e "$wgReviewPath$file")
					{
					
						AALocUtilities::PrintLog("Merging $file\n");
						
						`mergeGlossaries -fileToMerge "$wgOrgPath$file" -fileToMerge "$wgNewPath$file" -fileToMerge "$wgCandidatesPath$file" -fileToMerge "$wgReviewPath$file" -saveDir "$wgPath" -allowUntranslatedEntries -allowOverlappingEntries`;
					}
					else
					{
						AALocUtilities::PrintLog("### ERROR: Cannot find $file in _WorkGlossary_Review\n");
					}
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: Cannot find $file in _WorkGlossary_Candidates\n");
				}
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: Cannot find $file in _WorkGlossary_New\n");
			}
		}
	}
	
	AALocFileUtilities::RemoveFolder($wgOrgPath);


	#-----------------------------------------------------------------------------------------
	#	Check WG Files
	#-----------------------------------------------------------------------------------------
	
	AALocFileUtilities::CreateFolderIfNotExist($inFolder . "_Logs/");
	
	CheckWGADFolder($inFolder, kCheckWGFiles);
}


#---------------------------------------------------------------------------------------------
#	MoveADWGToLG
#---------------------------------------------------------------------------------------------

sub MoveADWGToLG
{
	my($inADPath, $inWGPath, $inLGPath, $inComp) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inADPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inADPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$inWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGPath doesn't exist.\n");
		return;
	}
	
	if (!(-d "$inLGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inLGPath doesn't exist.\n");
		return;
	}


	if ($inComp eq "")
	{
		my $directory;
		my $file;

		#-------------------------------------------------------------------------------------
		#	Move AD Files
		#-------------------------------------------------------------------------------------
		
		opendir(directory, $inADPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Copying $file to $inLGPath\n");
			`cp "$inADPath$file" "$inLGPath$file.lg"`;
		}
	
	
		#-------------------------------------------------------------------------------------
		#	Move WG Files
		#-------------------------------------------------------------------------------------
		
		opendir(directory, $inWGPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Copying $file to $inLGPath\n");
			`cp "$inWGPath$file" "$inLGPath$file.lg"`;
		}
	}
	else
	{
		AALocUtilities::PrintLog("Copying $inComp.ad to $inLGPath\n");
		`cp "$inADPath$inComp.ad" "$inLGPath$inComp.ad.lg"`;
		
		AALocUtilities::PrintLog("Copying $inComp.wg to $inLGPath\n");
		`cp "$inWGPath$inComp.wg" "$inLGPath$inComp.wg.lg"`;
	}
}


#---------------------------------------------------------------------------------------------
#	RemoveLproj
#---------------------------------------------------------------------------------------------

sub RemoveLproj
{
	my($inPath, $inLang) = @_;

	if (!(-d "$inPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inPath doesn't exist.\n");
		return;
	}

	if ($inLang eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: Language incorrect\n");
		return;
	}


	chomp(@searchResult = `find $inPath -type d \\( -path "*/$inLang.lproj" \\)`);
	
	foreach $lproj (@searchResult)
	{
		AALocUtilities::PrintLog("Removing $lproj\n");
		system "rm -d -r '$lproj'";
	}
}


#---------------------------------------------------------------------------------------------
#	CopyNewLocToNewBase
#---------------------------------------------------------------------------------------------

sub CopyNewLocToNewBase
{
	my($inAppleGlotEnvPath, $inComp) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	$appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	$appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	
	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);

	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:CopyNewLocToNewBase] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		AALocUtilities::PrintLog("No lproj. Don't copy NewLoc to NewBase\n");
		return;
	}


	if ($inComp eq "")
	{
		my $directory;
		my $file;

		opendir(directory, $appleGlotEnvNewLocPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Removing $file from NewBase\n");
			# SA system "rm -d -r $appleGlotEnvNewBasePath$file";
			`rm -d -r "$appleGlotEnvNewBasePath$file"`;

			AALocUtilities::PrintLog("Copying $file from NewLoc to NewBase\n");
			`ditto --norsrc "$appleGlotEnvNewLocPath$file" "$appleGlotEnvNewBasePath$file"`;
		}
		
		if ($language ne "")
		{
			AALocUtilities::PrintLog("Removing $language.lproj from NewBase\n");
			RemoveLproj($appleGlotEnvNewBasePath, $language);
		}
	}
	else
	{
		AALocUtilities::PrintLog("Removing $inComp from NewBase\n");
		# SA system "rm -d -r $appleGlotEnvNewBasePath$inComp";
		`rm -d -r "$appleGlotEnvNewBasePath$inComp"`;

		AALocUtilities::PrintLog("Copying $inComp from NewBase to NewBase\n");
		`ditto --norsrc "$appleGlotEnvNewLocPath$inComp" "$appleGlotEnvNewBasePath$inComp"`;
		
		
		if ($language ne "")
		{
			AALocUtilities::PrintLog("Removing $language.lproj from NewBase\n");
			RemoveLproj("$appleGlotEnvNewBasePath$inComp", $language);
		}
	}
}


#---------------------------------------------------------------------------------------------
#	GetAppleGlotADLanguageCode
#---------------------------------------------------------------------------------------------

sub GetAppleGlotADLanguageCode
{
	my($inAppleGlotEnvPath) = @_;
	my $outLanguage = "";
	

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvCheckingPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";

	my $directory;
	my $file;
	my $adFile;


	opendir(directory, $appleGlotEnvCheckingPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$adFile = $appleGlotEnvCheckingPath . $file;

		$outLanguage = GetWGLanguage($adFile);
		
		if ($outLanguage ne "")
		{
			last;
		}
	}

	return $outLanguage;
}


#---------------------------------------------------------------------------------------------
#	IsLXAppleGlotEnvironment
#
#	Check whether the AppleGlot Environment is LX based
#
#	By checking whether the following folder exist or not
#		_WorkGlossary_New
#		_WorkGlossary_Review
#		_WorkGlossary_Candidates
#---------------------------------------------------------------------------------------------

sub IsLXAppleGlotEnvironment
{
	my($inAppleGlotEnvPath) = @_;
	my $isLXAppleGlotEnviroment = 0;
	

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvWGNewPath = $inAppleGlotEnvPath . "_WorkGlossary_New/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";

	if ((-d "$appleGlotEnvWGNewPath") && (-d "$appleGlotEnvWGCandidatesPath") && (-d "$appleGlotEnvWGReviewPath"))
	{
		$isLXAppleGlotEnviroment = 1;
	}

	#-----------------------------------------------------------------------------------------
	#	return result
	#-----------------------------------------------------------------------------------------

	return $isLXAppleGlotEnviroment;
}


#---------------------------------------------------------------------------------------------
#	IsLXTranslationKit
#
#	Check whether the Translation Kit is LX based
#
#	By checking whether the following folder exist or not
#		_WorkGlossary_Review
#		_WorkGlossary_New
#		_WorkGlossary_Candidates
#---------------------------------------------------------------------------------------------

sub IsLXTranslationKit
{
	my($inTranslationKit) = @_;
	my $isLXTranslationKit = 0;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inTranslationKit"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKit doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $translationKitWGNewPath = $inTranslationKit . "_WorkGlossary_New/";
	my $translationKitWGReviewPath = $inTranslationKit . "_WorkGlossary_Review/";
	my $translationKitWGCandidatesPath = $inTranslationKit . "_WorkGlossary_Candidates/";
	my $translationKitADPath = $inTranslationKit . "_ApplicationDictionaries/";



	if ((-d "$translationKitWGNewPath") || (-d "$translationKitWGReviewPath") || (-d "$translationKitWGCandidatesPath") || (-d "$translationKitADPath"))
	{
		$isLXTranslationKit = 1;
	}


	#-----------------------------------------------------------------------------------------
	#	return result
	#-----------------------------------------------------------------------------------------

	return $isLXTranslationKit;
}


#---------------------------------------------------------------------------------------------
#	IsJapanTranslationKit
#
#	Check whether the Translation Kit is Japan
#
#	By checking whether the following folder exist or not
#		_NewLoc
#		_NewBase
#---------------------------------------------------------------------------------------------

sub IsJapanTranslationKit
{
	my($inTranslationKit) = @_;
	my $isJapanTranslationKit = 0;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inTranslationKit"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKit doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $translationKitNewLocPath = $inTranslationKit . "_NewLoc/";
	my $translationKitNewBasePath = $inTranslationKit . "_NewBase/";
	my $translationKitEnvPath = $inTranslationKit . "Env/";


	if ((-d "$translationKitNewLocPath") && (-d "$translationKitNewBasePath"))
	{
		$isJapanTranslationKit = 1;
	}
	elsif (-d "$translationKitEnvPath")
	{
		$isJapanTranslationKit = 1;
	}


	#-----------------------------------------------------------------------------------------
	#	return result
	#-----------------------------------------------------------------------------------------

	return $isJapanTranslationKit;
}


#=============================================================================================
#	Function Definitions
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	RerunAppleGlotPass1
#---------------------------------------------------------------------------------------------

sub RerunAppleGlotPass1
{
	my($inAppleGlotEnvPath, $inComponent, $inLanguage, $inForceUpdate) = @_;

	$language = $inLanguage;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Get Language
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		my @langs = `$gAppleGlotCLPath -d "$inAppleGlotEnvPath" getlangs`;
		$language = $langs[1];
		chomp($language);
	}
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:RerunAppleGlotPass1] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:RerunAppleGlotPass1] Comp: $inComponent\n" if ($gDebug);
	print STDERR "[Debug:RerunAppleGlotPass1] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: No language specified.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGNewPath = $inAppleGlotEnvPath . "_WorkGlossary_New/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";

	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Generate ADs and WGs TMX\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		GenerateTMXforAppleGlotEnv($inAppleGlotEnvPath);

		AALocFileUtilities::RemoveFolder($appleGlotEnvWGNewPath);
		AALocFileUtilities::RemoveFolder($appleGlotEnvWGReviewPath);
		AALocFileUtilities::RemoveFolder($appleGlotEnvWGCandidatesPath);


		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		`ResetAG3Env "$inAppleGlotEnvPath"`;
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' setlangs en $language";
		
		if ($inForceUpdate eq kForceUpdate)
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework -f populate";
		}
		else
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework populate";
		}
		
		FLIdentifier($inAppleGlotEnvPath);
		
		# AutoLayout($inAppleGlotEnvPath);
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Generate ADs and WGs TMX\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		GenerateTMXforAppleGlotEnv($inAppleGlotEnvPath);

		AALocFileUtilities::RemoveFile($appleGlotEnvWGNewPath . $inComponent . ".wg");
		AALocFileUtilities::RemoveFile($appleGlotEnvWGReviewPath . $inComponent . ".wg");
		AALocFileUtilities::RemoveFile($appleGlotEnvWGCandidatesPath . $inComponent . ".wg");


		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		`ResetAG3Env -reset "$inComponent" "$inAppleGlotEnvPath"`;
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1 of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		if ($inForceUpdate eq kForceUpdate)
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework -f populate '$inComponent'";
		}
		else
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework populate '$inComponent'";
		}
		
		FLIdentifier($inAppleGlotEnvPath, $inComponent, $language);
		
		# AutoLayout($inAppleGlotEnvPath);
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Build File List
	#-------------------------------------------------------------------------------------
	
	BuildAllFileList($inAppleGlotEnvPath);
	

	#-------------------------------------------------------------------------------------
	#
	#-------------------------------------------------------------------------------------

	CheckAppleGlotLog($inAppleGlotEnvPath);
}


#---------------------------------------------------------------------------------------------
#	OldRerunAppleGlotPass1
#---------------------------------------------------------------------------------------------

sub OldRerunAppleGlotPass1
{
	my($inAppleGlotEnvPath, $inComponent, $inLanguage) = @_;

	$language = $inLanguage;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Get Language
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		my @langs = `$gAppleGlotCLPath -d "$inAppleGlotEnvPath" getlangs`;
		$language = $langs[1];
		chomp($language);
	}
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:RerunAppleGlotPass1] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:RerunAppleGlotPass1] Comp: $inComponent\n" if ($gDebug);
	print STDERR "[Debug:RerunAppleGlotPass1] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: No language specified.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	$appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	$appleGlotEnvLGPath = $inAppleGlotEnvPath . "_LanguageGlossaries/";
	$appleGlotEnvLogPath = $inAppleGlotEnvPath . "_Logs/";

	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Move AD and WG to LG\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	MoveADWGToLG($appleGlotEnvADPath, $appleGlotEnvWGPath, $appleGlotEnvLGPath, $inComponent);

	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy NewLoc to NewBase\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	CopyNewLocToNewBase($inAppleGlotEnvPath, $inComponent);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		`ResetAG3Env "$inAppleGlotEnvPath"`;
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' setlangs en $language";
		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework populate";
		
		
		FLIdentifier($inAppleGlotEnvPath);
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		`ResetAG3Env -reset "$inComponent" "$inAppleGlotEnvPath"`;
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework populate '$inComponent'";
		
		FLIdentifier($inAppleGlotEnvPath, $inComponent, $language);
	}
	
	
	CheckAppleGlotLog($inAppleGlotEnvPath);
}


#---------------------------------------------------------------------------------------------
#	CheckWGNeedTranslate
#
#	Check whether there are WG files in _WorkGlossary folder still need to be translate
#---------------------------------------------------------------------------------------------

sub CheckWGNeedTranslate
{
	my($inAppleGlotEnvPath, $inComponent) = @_;
	my $outNeedTranslate = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";

	if ($inComponent eq "")
	{
		opendir(directory, $appleGlotEnvWGPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Checking $file\n");
		
			if (IsWGNeedTranslate($appleGlotEnvWGPath . $file))
			{
				AALocUtilities::PrintLog("         $file need translate\n");
				$outNeedTranslate = 1;
			}
		}
	}
	else
	{
		AALocUtilities::PrintLog("Checking $inComponent\n");
		
		if (IsWGNeedTranslate($appleGlotEnvWGPath . $inComponent . ".wg"))
		{
			AALocUtilities::PrintLog("         $file need translate\n");
			$outNeedTranslate = 1;
		}
	}
	
	return $outNeedTranslate;
}


#---------------------------------------------------------------------------------------------
#	ResetAGEnv
#---------------------------------------------------------------------------------------------

sub ResetAGEnv
{
	my($inAppleGlotEnvPath, $inComponent) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		`ResetAG3Env "$inAppleGlotEnvPath"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		`ResetAG3Env -reset "$inComponent" "$inAppleGlotEnvPath"`;
	}
}	


#---------------------------------------------------------------------------------------------
#	RunAppleGlotPass1
#---------------------------------------------------------------------------------------------

sub RunAppleGlotPass1
{
	my($inAppleGlotEnvPath, $inComponent, $inLanguage, $inForceUpdate) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1 ($inLanguage)\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' setlangs en $inLanguage";
		
		if ($inForceUpdate eq kForceUpdate)
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework -f populate";
		}
		else
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework populate";
		}
		
		FLIdentifier($inAppleGlotEnvPath);
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1 of $inComponent ($inLanguage)\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' setlangs en $inLanguage";

		if ($inForceUpdate eq kForceUpdate)
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework -f populate '$inComponent'";
		}
		else
		{
			system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework populate '$inComponent'";
		}
		
		FLIdentifier($inAppleGlotEnvPath, $inComponent, $language);
	}
	
	
	CheckAppleGlotLog($inAppleGlotEnvPath);
}


#---------------------------------------------------------------------------------------------
#	RunAppleGlotPass2
#---------------------------------------------------------------------------------------------

sub RunAppleGlotPass2
{
	my($inAppleGlotEnvPath, $inComponent) = @_;

	$outPass = 1;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Get Language
	#-----------------------------------------------------------------------------------------

	my @langs = `$gAppleGlotCLPath -d "$inAppleGlotEnvPath" getlangs`;
	$language = $langs[1];
	chomp($language);
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:RunAppleGlotPass2] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:RunAppleGlotPass2] Comp: $inComponent\n" if ($gDebug);
	print STDERR "[Debug:RunAppleGlotPass2] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: No language specified.\n");
		return;
	}



	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# AppleGlot Pass 2\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework update";
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check WG Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		$outPass = !CheckWGNeedTranslate($inAppleGlotEnvPath, $inComponent);
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# AppleGlot Pass 2 of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework update $inComponent";
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check WG Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		$outPass = !CheckWGNeedTranslate($inAppleGlotEnvPath, $inComponent);
	}
	
	return $outPass;
}


#---------------------------------------------------------------------------------------------
#	RunAppleGlotPass3
#---------------------------------------------------------------------------------------------

sub RunAppleGlotPass3
{
	my($inAppleGlotEnvPath, $inComponent) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Get Language
	#-----------------------------------------------------------------------------------------

	my @langs = `$gAppleGlotCLPath -d "$inAppleGlotEnvPath" getlangs`;
	$language = $langs[1];
	chomp($language);
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:RunAppleGlotPass3] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:RunAppleGlotPass3] Comp: $inComponent\n" if ($gDebug);
	print STDERR "[Debug:RunAppleGlotPass3] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: No language specified.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvNewLocOrgPath = $inAppleGlotEnvPath . "_NewLoc_Org/";


	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# AppleGlot Pass 3\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework finalize";
		
		
		FLIdentifier($inAppleGlotEnvPath);
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# AppleGlot Pass 3 of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework finalize '$inComponent'";
		
		
		FLIdentifier($inAppleGlotEnvPath, $inComponent, $language);
	}
	
	CheckAppleGlotLog($inAppleGlotEnvPath);
	
	AACheckLocFiles($inAppleGlotEnvPath);
}


#---------------------------------------------------------------------------------------------
#	RunAppleGlotPass2And3
#---------------------------------------------------------------------------------------------

sub RunAppleGlotPass2And3
{
	my($inAppleGlotEnvPath, $inComponent) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return 0;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if (RunAppleGlotPass2($inAppleGlotEnvPath, $inComponent))
	{
		RunAppleGlotPass3($inAppleGlotEnvPath, $inComponent);

		AALocUtilities::PrintLog("\nAppleGlot Pass 2 and 3 ran successfully\n");
		
		return 1;
	}
	else
	{
		AALocUtilities::PrintLog("\n### ERROR: Some WG file is not empty. Only Pass 2 has been run\n");
		
		return 0;
	}
}


#---------------------------------------------------------------------------------------------
#	FixChangedOID
#---------------------------------------------------------------------------------------------

sub FixChangedOID
{
	my($inAppleGlotEnvPath, $inComponent) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Get Language
	#-----------------------------------------------------------------------------------------

	my @langs = `$gAppleGlotCLPath -d "$inAppleGlotEnvPath" getlangs`;
	my $language = $langs[1];
	chomp($language);

	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:FixChangedOID] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:FixChangedOID] Comp: $inComponent\n" if ($gDebug);
	print STDERR "[Debug:FixChangedOID] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	if ($language eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: No language specified.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGBackupPath = $inAppleGlotEnvPath . "_WorkGlossary_Backup/";
	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvADBackupPath = $inAppleGlotEnvPath . "_ApplicationDictionaries_Backup/";

	
	#-----------------------------------------------------------------------------------------
	#	Backup WGs and ADs
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Backup _WorkGlossary and _ApplicationDictionaries Folder\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGBackupPath"`;
	`ditto "$appleGlotEnvADPath" "$appleGlotEnvADBackupPath"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inComponent eq "")
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		`ResetAG3Env "$inAppleGlotEnvPath"`;
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1 Force Update\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' setlangs en $language";
		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework -f populate";
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Reset AppleGlot Environment of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		`ResetAG3Env -reset "$inComponent" "$inAppleGlotEnvPath"`;
		
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Run AppleGlot Pass 1 Force Update of $inComponent\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' setlangs en $language";
		system "$gAppleGlotCLPath -d '$inAppleGlotEnvPath' $gAppleGlotIBPlugins $gProKitFramework -f populate '$inComponent'";
	}

		
	#-----------------------------------------------------------------------------------------
	#	Restore WGs and ADs
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Restore _WorkGlossary and _ApplicationDictionaries Folder\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	`ditto "$appleGlotEnvWGBackupPath" "$appleGlotEnvWGPath"`;
	AALocFileUtilities::RemoveFolder($appleGlotEnvWGBackupPath);

	`ditto "$appleGlotEnvADBackupPath" "$appleGlotEnvADPath"`;
	AALocFileUtilities::RemoveFolder($appleGlotEnvADBackupPath);
	
	
	#-----------------------------------------------------------------------------------------
	#	AppleGlot Pass 2 and 3
	#-----------------------------------------------------------------------------------------

	return RunAppleGlotPass2And3($inAppleGlotEnvPath, $inComponent);
}


#---------------------------------------------------------------------------------------------
#	FixDataDependency
#---------------------------------------------------------------------------------------------

sub FixDataDependency
{
	my($inAppleGlotEnvPath) = @_;
	
	my $appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$language};
	my $filename;
	my $filename2;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Fix data.dependency\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Remove data.dependency in _NewLoc\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	# chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.nib/data.dependency" \\) | grep -v "~.nib"`);
	chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.nib/data.dependency" -or -path "*/$shortFormLanguage.lproj/*.nib/data.dependency" \\) | grep -v "~.nib"`);

	foreach $file (@searchResult)
	{
		$filename = $file;
		$filename =~ s/$appleGlotEnvNewLocPath//;
		
		AALocUtilities::PrintLog("Removing $filename\n");
		AALocFileUtilities::RemoveFile($file);
	}
	
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy data.dependency from _NewBase to _NewLoc\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	# chomp(@searchResult = `find "$appleGlotEnvNewBasePath" -type f \\( -path "*.nib/data.dependency" \\)`);
	chomp(@searchResult = `find "$appleGlotEnvNewBasePath" -type f \\( -path "*/English.lproj/*.nib/data.dependency" -or  -path "*/en.lproj/*.nib/data.dependency" \\)`);

	foreach $file (@searchResult)
	{
		my $newLocFilePath = AALocAppleGlotUtilities::NewBaseToNewLocFilePath($file, $language);
	
		if ($newLocFilePath ne "")
		{
			$filename = $file;
			$filename =~ s/$appleGlotEnvNewBasePath//;

			$filename2 = $newLocFilePath;
			$filename2 =~ s/$appleGlotEnvNewLocPath//;
		
			AALocUtilities::PrintLog("Copying $filename\n");
			AALocUtilities::PrintLog("     to $filename2\n");
			AALocFileUtilities::CopyFile($file, $newLocFilePath, kNotOpen);
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: cannot find the corresponding _NewLoc path of '$file'\n");
		}
	}
}


#---------------------------------------------------------------------------------------------
#	AutoLayout
#---------------------------------------------------------------------------------------------

sub AutoLayout
{
	my($inAppleGlotEnvPath, $inComponent) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvLogPath = $inAppleGlotEnvPath . "_Logs/AutoLayout_Log/";
	my $lprojLanguageCode = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");
	my $countryCode = $AALocUtilities::kLprojLanguageCode2CountryCode{$lprojLanguageCode};

	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:AutoLayout] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:AutoLayout] Log Path: $appleGlotEnvLogPath\n" if ($gDebug);
	print STDERR "[Debug:AutoLayout] Country Code: $countryCode\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# AutoLayout $lprojLanguageCode ($countryCode)\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	if ($gComponentName ne "")
	{
		if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
		{
			system "autolayoutadjuster -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath -project '$gComponentName' -ib_plugin '$gPCXIBPlugins'";
		}
		else
		{
			system "autolayoutadjuster -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath -project '$gComponentName'";
		}
	}
	else
	{
		if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
		{
			system "autolayoutadjuster -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath -ib_plugin '$gPCXIBPlugins'";
		}
		else
		{
			system "autolayoutadjuster -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath";
		}
	}


	#	AALocUtilities::PrintLog("\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	#	AALocUtilities::PrintLog("# Fixing AutoLayout log\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	#	my $autoLayoutAdjusterLogFile = $appleGlotEnvLogPath . "compare_nib_before_after_result.txt",

	#	print "$autoLayoutAdjusterLogFile\n";

	#	FixAutoLayoutAdjustLog($autoLayoutAdjusterLogFile);


	#-------------------------------------------------------------------------------------
	#	Remove ALA changes log
	#-------------------------------------------------------------------------------------

	my $agALAChangesLogFilePath = $inAppleGlotEnvPath . "_Logs/AutoLayout_Log/alaChangesLog";

	AALocFileUtilities::RemoveFile($agALAChangesLogFilePath);
	
	
	#-------------------------------------------------------------------------------------
	#	
	#-------------------------------------------------------------------------------------
	
	`"$gAAProcessNibScorePath" -ag "$inAppleGlotEnvPath"`;
}


#---------------------------------------------------------------------------------------------
#	AutoLayoutScore
#---------------------------------------------------------------------------------------------

sub AutoLayoutScore
{
	my($inAppleGlotEnvPath, $inComponent) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvLogPath = $inAppleGlotEnvPath . "_Logs/AutoLayout_Log/";
	my $lprojLanguageCode = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");
	my $countryCode = $AALocUtilities::kLprojLanguageCode2CountryCode{$lprojLanguageCode};
	
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:AutoLayout] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:AutoLayout] Log Path: $appleGlotEnvLogPath\n" if ($gDebug);
	print STDERR "[Debug:AutoLayout] Country Code: $countryCode\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# AutoLayout Score $lprojLanguageCode ($countryCode)\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	
	if ($gComponentName ne "")
	{
		if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
		{
			system "autolayoutadjuster -scoreonly -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath -project '$gComponentName' -ib_plugin '$gPCXIBPlugins'";
		}
		else
		{
			system "autolayoutadjuster -scoreonly -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath -project '$gComponentName'";
		}
	}
	else
	{
		if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
		{
			system "autolayoutadjuster -scoreonly -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath -ib_plugin '$gPCXIBPlugins'";
		}
		else
		{
			system "autolayoutadjuster -scoreonly -glot '$inAppleGlotEnvPath' -language $countryCode -logDir $appleGlotEnvLogPath";
		}
	}
	
	
	#	AALocUtilities::PrintLog("\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	#	AALocUtilities::PrintLog("# Fixing AutoLayout log\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	#	my $autoLayoutAdjusterLogFile = $appleGlotEnvLogPath . "compare_nib_before_after_result.txt",
	
	#	print "$autoLayoutAdjusterLogFile\n";
	
	#	FixAutoLayoutAdjustLog($autoLayoutAdjusterLogFile);
	
	
	#-------------------------------------------------------------------------------------
	#	Remove ALA changes log
	#-------------------------------------------------------------------------------------
	
	my $agALAChangesLogFilePath = $inAppleGlotEnvPath . "_Logs/AutoLayout_Log/alaChangesLog";
	
	AALocFileUtilities::RemoveFile($agALAChangesLogFilePath);
	
	
	#-------------------------------------------------------------------------------------
	#	
	#-------------------------------------------------------------------------------------
	
	`"$gAAProcessNibScorePath" -ag "$inAppleGlotEnvPath"`;
}


#---------------------------------------------------------------------------------------------
#	PrepareLocEngDoneImage
#---------------------------------------------------------------------------------------------

sub PrepareLocEngDoneImage
{
	my($inLocEnv) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnv"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc environment $inLocEnv doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnv);
	my $locEngDonePath = AALocEnvUtilities::GetUniqueLocEngDonePathFromLocEnv($inLocEnv);
	my $appleGlotEnv = AALocEnvUtilities::GetAppleGlotEnvFromLocEnv($inLocEnv);

		
	if (!(-d $appleGlotEnvPath))
	{
		AALocUtilities::PrintLog("### ERROR: cannot find AppleGlot Env in locenv '$inLocEnv'.\n");
		return;
	}
	

	`ditto "$appleGlotEnvPath" "$locEngDonePath"`;

	AALocFileUtilities::RemoveFolder($locEngDonePath . "NibScreenshot/");
	AALocFileUtilities::RemoveFolder($locEngDonePath . "UpdatedNibScreenshot/");
	
	MakeDiskImage($locEngDonePath);
	AALocFileUtilities::RemoveFolder($locEngDonePath);
}


#---------------------------------------------------------------------------------------------
#	BackupLocEnv
#---------------------------------------------------------------------------------------------

sub BackupLocEnv
{
	my($inLocEnv) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnv"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc environment $inLocEnv doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $backupFilePath = $inLocEnv . AALocEnvUtilities::GetBackupFromLocEnv($inLocEnv);

	my $glossariesPath = $inLocEnv . "Glossaries/";
	my $tarOutPath = $inLocEnv . "TarOut/";
	my $projectsPath = $inLocEnv . "Projects/";
	my $reportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnv);
	my $historyPath = AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnv);

	my $projectName = AALocEnvUtilities::GetProjectNameFromLocEnv($inLocEnv);
	my $buildNumber = AALocEnvUtilities::GetBuildNumberFromLocEnv($inLocEnv);
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnv);
	my $localizer = AALocEnvUtilities::GetLocalizerFromLocEnv($inLocEnv);

	my $backupPath = AALocEnvUtilities::GetBackupPathFromLocEnv($inLocEnv);
	my $backupGlossariesPath = $backupPath . "AD_" . $projectName . "_" . $buildNumber . "_" . $countryCode . "_" . $localizer;
	my $backupTarOutPath = $backupPath . "Tarballs_" . $projectName . "_" . $buildNumber . "_" . $countryCode . "_" . $localizer;
	my $backupProjectsPath = $backupPath . "Projects_" . $projectName . "_" . $buildNumber . "_" . $countryCode . "_" . $localizer;
	# my $backupProjectsPath = $inLocEnv . "Projects";
	my $backupReportsPath = $backupPath . "Reports_" . $projectName . "_" . $buildNumber . "_" . $countryCode . "_" . $localizer . ".zip";
	my $backupReportsTempPath = $backupPath . "Reports_Temp";
	my $backupReportsTempZipPath = $backupPath . "Reports_Temp.zip";
	my $backupHistoryPath = $backupPath . "History";
	
	AALocFileUtilities::CreateFolderIfNotExist($backupPath);


	#-------------------------------------------------------------------------------------
	#	Backup Glossaries
	#-------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("Backup Glossaries Folder\n");
	`ditto "$glossariesPath" "$backupGlossariesPath"`;


	#-------------------------------------------------------------------------------------
	#	Backup Tarout
	#-------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("Backup TarOut Folder\n");
	`ditto "$tarOutPath" "$backupTarOutPath"`;



	my $zip;
	my $projectZip;
	my $directory;
	my $file;

	#-------------------------------------------------------------------------------------
	#	Backup Projects
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Backup Projects Folder\n");

	$zip = Archive::Zip->new();

	opendir(directory, $projectsPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$projectZip = Archive::Zip->new();
		$projectZip->addTree("$projectsPath$file/", "$file");
		$projectZip->writeToFileNamed("$projectsPath$file.tgz");

		$zip->addFile("$projectsPath$file.tgz", "$file.tgz");
	}

	$zip->writeToFileNamed("$backupProjectsPath.zip");


	opendir(directory, $projectsPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocFileUtilities::RemoveFile("$projectsPath$file.tgz");
	}


	#-------------------------------------------------------------------------------------
	#	Backup Reports
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Backup Reports Folder\n");
	`zip -r -j "$backupReportsTempPath" "$reportsPath"`;
	rename $backupReportsTempZipPath, $backupReportsPath;


	#-------------------------------------------------------------------------------------
	#	Backup History
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Backup History Folder\n");
	`zip -r -j "$backupHistoryPath" "$historyPath"`;


	#-------------------------------------------------------------------------------------
	#	Zip Backup Folder
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("zip Backup Folder\n");
	# `zip -r "$backupFilePath" "$backupPath"`;
	
	$zip = Archive::Zip->new();

	opendir(directory, $backupPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if (-d "$backupPath$file")
		{
			$zip->addTree("$backupPath$file/", "$file");
		}
		else
		{
			$zip->addFile("$backupPath$file", "$file");
		}
	}

	$zip->writeToFileNamed("$backupFilePath.zip");
}


#---------------------------------------------------------------------------------------------
#	FLIdentifier
#---------------------------------------------------------------------------------------------

sub FLIdentifier
{
	my($inAppleGlotEnvPath, $inComponent, $inLanguage) = @_;

	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvLogPath = $inAppleGlotEnvPath . "_Logs/";
	my $language = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	if ($inLanguage ne "")
	{
		$language = $inLanguage;
	}


	my $flIdentifierReportFileName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath) . "_flidentifierReport.txt";
	my $flIdentifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . $flIdentifierReportFileName;


	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print STDERR "[Debug:FLIdentifier] AppleGlot: $inAppleGlotEnvPath\n";
		print STDERR "[Debug:FLIdentifier] Language: $language\n";
		print STDERR "[Debug:FLIdentifier] agEnvironmentLogPath: $appleGlotEnvLogPath\n";
		print STDERR "[Debug:FLIdentifier] flIdentifierReportFilePath: $flIdentifierReportFilePath\n";
	}
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run flidentifier ($language)\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if ($inComponent ne "")
	{
		my $componentFolder = $appleGlotEnvNewLocPath . $inComponent . "/";
	
		AALocUtilities::PrintLog("Reset Finder label of $inComponent in $appleGlotEnvNewLocPath\n");
		system "setFinderLabel -r None $componentFolder";
	
		AALocUtilities::PrintLog("flidentifier $inComponent in $inAppleGlotEnvPath\n");
		
		if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
		{
			if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
			{
				system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -iblock -outfile $flIdentifierReportFilePath -bbedit -proj '$inComponent' -ib_plugin '$gPCXIBPluginsWithProKit'";
			}
			else
			{
				system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -iblock -outfile $flIdentifierReportFilePath -bbedit -proj '$inComponent' -ib_plugin '$gPCXIBPlugins'";
			}
		}
		else
		{
			system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -iblock -outfile $flIdentifierReportFilePath -bbedit -proj '$inComponent'";
		}
	}
	else
	{
		AALocUtilities::PrintLog("Reset Finder label of $appleGlotEnvNewLocPath\n");
		system "setFinderLabel -r None $appleGlotEnvNewLocPath";
	
		AALocUtilities::PrintLog("flidentifier $inAppleGlotEnvPath\n");
		# `$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -outDir '$appleGlotEnvLogPath' -bbedit`;
		# system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language";
		
		if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
		{
			if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
			{
				system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -iblock -outfile $flIdentifierReportFilePath -bbedit -ib_plugin '$gPCXIBPluginsWithProKit'";
			}
			else
			{
				system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -iblock -outfile $flIdentifierReportFilePath -bbedit -ib_plugin '$gPCXIBPlugins'";
			}
		}
		else
		{
			system "$gflidentifierPath -glot '$inAppleGlotEnvPath' -loc $language -iblock -outfile $flIdentifierReportFilePath -bbedit";
		}
	}
	
	BackupIBlockingRules($inAppleGlotEnvPath);
}


#---------------------------------------------------------------------------------------------
#	BackupIBlockingRules
#---------------------------------------------------------------------------------------------

sub BackupIBlockingRules
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvIBlockingRulesPath = $inAppleGlotEnvPath . "_iblockingrules/";

	chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f | grep ".iblockingrules"`);

	foreach $file (@searchResult)
	{
		my $backupFile = $file;
		
		$backupFile =~ s/$appleGlotEnvNewLocPath/$appleGlotEnvIBlockingRulesPath/;
		`ditto "$file" "$backupFile"`;
	}
}


#---------------------------------------------------------------------------------------------
#	UnlockIB
#---------------------------------------------------------------------------------------------

sub UnlockIB
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";

	chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f | grep ".iblockingrules"`);

	foreach $file (@searchResult)
	{
		`rm -d -r "$file"`;
	}
}


#---------------------------------------------------------------------------------------------
#	LockIB
#---------------------------------------------------------------------------------------------

sub LockIB
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvIBlockingRulesPath = $inAppleGlotEnvPath . "_iblockingrules/";

	chomp(@searchResult = `find "$appleGlotEnvIBlockingRulesPath" -type f | grep ".iblockingrules"`);

	foreach $file (@searchResult)
	{
		my $newLocFile = $file;
		
		$newLocFile =~ s/$appleGlotEnvIBlockingRulesPath/$appleGlotEnvNewLocPath/;
		`ditto "$file" "$newLocFile"`;
	}
}


#---------------------------------------------------------------------------------------------
#	FixFLVerifierReport
#---------------------------------------------------------------------------------------------

sub FixFLVerifierReport
{
	my($inFLVerifierReportFile) = @_;

	#-----------------------------------------------------------------------------------------
	#	Read flverifier report
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFLVerifierReportFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The log file $inFLVerifierReportFile doesn't exist.\n");
		return;
	}

	open(FILECONTENT, "<$inFLVerifierReportFile") or die "Cannot open '$inFLVerifierReportFile': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $flVerifierReportBackupFile = $inFLVerifierReportFile . "_copy";
	
	if (-e $flVerifierReportBackupFile)
	{
		system "rm '$flVerifierReportBackupFile'";
	}
	
	`cp "$inFLVerifierReportFile" "$flVerifierReportBackupFile"`;

	# SA system "rm '$inFLVerifierReportFile'";
	`rm "$inFLVerifierReportFile"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	open updatedReportFile, ">> $inFLVerifierReportFile" or die "Failed to open $inFLVerifierReportFile\n";

	my $line;


	foreach $line(@fileContent)
	{
		# $line =~ s/$originalPath/$appleGlotUnixPath/;
		print updatedReportFile $line;
	}

	close updatedReportFile;
}


#---------------------------------------------------------------------------------------------
#	FLVerifier
#---------------------------------------------------------------------------------------------

sub FLVerifier
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $language = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	$flVerifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_flverifierReport.txt";

	if (-e $flVerifierReportFilePath)
	{
		system "rm $flVerifierReportFilePath";
	}


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:FLVerifier] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:FLVerifier] Language: $language\n" if ($gDebug);
	print STDERR "[Debug:FLVerifier] Report: $flVerifierReportFilePath\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# flverifier\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`flverifier -glot "$inAppleGlotEnvPath" -loc "$language" -outfile "$flVerifierReportFilePath" -dontFormatCompResult -dontListIdenticalInCompResult -adview`;
	# AALocUtilities::PrintLog("flverifier report: $flVerifierReportFilePath\n");
	
	# FixFLVerifierReport($flVerifierReportFilePath);
}


#---------------------------------------------------------------------------------------------
#	AAFLVerifier
#---------------------------------------------------------------------------------------------

sub AAFLVerifier
{
	my($inAppleGlotEnvPath) = @_;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	FixDataDependency($inAppleGlotEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);	
	my $language = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	$flVerifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_flverifierReport.txt";

	if (-e $flVerifierReportFilePath)
	{
		system "rm $flVerifierReportFilePath";
	}


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:AAFLVerifier] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:AAFLVerifier] Language: $language\n" if ($gDebug);
	print STDERR "[Debug:AAFLVerifier] Report: $flVerifierReportFilePath\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# AAFLVerifier\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	
	my $projectItem = $inAppleGlotEnvPath;
	$projectItem=~s/.*?_LocProj\///;
	$projectItem=~s/\/.*?\/GlotEnv\///;
	my $tempProjectPath="/Users/".$ENV{'USER'}."/Library/Caches/LocCache/nib/Volumes/ProjectsHD/_LocProj/" . $projectItem;
	
	if (-e $tempProjectPath )
	{
		print STDERR "Removed this project LocCache\n";
		print STDERR "$tempProjectPath\n";
		remove_tree($tempProjectPath, { verbose => 1, mode => 0711 });
	}
	
    
	# `"$gAAflverifierPath" -glot "$inAppleGlotEnvPath" -loc "$language" -outfile "$flVerifierReportFilePath" -dontFormatCompResult -dontListIdenticalInCompResult -adview`;
	system "$gAAflverifierPath -glot $inAppleGlotEnvPath -loc $language -outfile $flVerifierReportFilePath -dontFormatCompResult -dontListIdenticalInCompResult -adview";
	# AALocUtilities::PrintLog("flverifier report: $flVerifierReportFilePath\n");
	
	# FixFLVerifierReport($flVerifierReportFilePath)
}


#---------------------------------------------------------------------------------------------
#	AAFLVerifier_Pro
#---------------------------------------------------------------------------------------------

sub AAFLVerifier_Pro
{
	#print "2222222222222222\n";
	my($inAppleGlotEnvPath) = @_;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	FixDataDependency($inAppleGlotEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);	
	my $language = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	$flVerifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_flverifierReport_Pro.txt";

	if (-e $flVerifierReportFilePath)
	{
		system "rm $flVerifierReportFilePath";
	}


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:AAFLVerifier] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:AAFLVerifier] Language: $language\n" if ($gDebug);
	print STDERR "[Debug:AAFLVerifier] Report: $flVerifierReportFilePath\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# AAFLVerifier Pro\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	my $projectItem = $inAppleGlotEnvPath;
	$projectItem=~s/.*?_LocProj\///;
	$projectItem=~s/\/.*?\/GlotEnv\///;
	my $tempProjectPath="/Users/".$ENV{'USER'}."/Library/Caches/LocCache/nib/Volumes/ProjectsHD/_LocProj/" . $projectItem;
	
	if (-e $tempProjectPath )
	{
		print STDERR "Removed this project LocCache\n";
		print STDERR "$tempProjectPath\n";
		remove_tree($tempProjectPath, { verbose => 1, mode => 0711 });
	}
	

	# `"$gAAflverifierPath" -glot "$inAppleGlotEnvPath" -loc "$language" -outfile "$flVerifierReportFilePath" -dontFormatCompResult -dontListIdenticalInCompResult -adview`;
	system "$gAAflverifierProPath -glot $inAppleGlotEnvPath -loc $language -outfile $flVerifierReportFilePath -dontFormatCompResult -dontListIdenticalInCompResult -adview";
	# AALocUtilities::PrintLog("flverifier report: $flVerifierReportFilePath\n");
	
	# FixFLVerifierReport($flVerifierReportFilePath)
}


#---------------------------------------------------------------------------------------------
#	FilterFLVerifierReport
#---------------------------------------------------------------------------------------------

sub FilterFLVerifierReport
{
	my($inLocEnvPath, $inAppleGlotEnvPath) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Create ALA Changes log if not exist
	#-----------------------------------------------------------------------------------------

	my $alaChangesLogFilePath = $inLocEnvPath . "_LKCXInfo/alaChangesLog";

	if (!(-e $alaChangesLogFilePath))
	{
		CreateALAChangesLog($inLocEnvPath);
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvPath;
	my $reportFileName;
	my $flVerifierReportFilePath;
	
	if ($inAppleGlotEnvPath eq "")
	{
		$appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	}
	else
	{
		$appleGlotEnvPath = $inAppleGlotEnvPath;
	}
	
	if ($gDebug)
	{
		system "$gAAflverifierFilterPath -debug -locenv $inLocEnvPath -glot $appleGlotEnvPath";
	}
	else
	{
		system "$gAAflverifierFilterPath -locenv $inLocEnvPath -glot $appleGlotEnvPath";
	}
	

	$reportFileName = AALocFileUtilities::GetDirectoryBaseName($appleGlotEnvPath) . "_flverifierFilteredReport.txt";
	$flVerifierReportFilePath = $appleGlotEnvPath . "_Logs/" . $reportFileName;

	ConvertUTF8ToUTF16($flVerifierReportFilePath);
}

#---------------------------------------------------------------------------------------------
#	FilterFLVerifierReport_Pro
#---------------------------------------------------------------------------------------------

sub FilterFLVerifierReport_Pro
{
	print "999999999999999999999999\n";
	my($inLocEnvPath, $inAppleGlotEnvPath) = @_;
	
	print "333333333333333333333333333\n";
	#-----------------------------------------------------------------------------------------
	#	Create ALA Changes log if not exist
	#-----------------------------------------------------------------------------------------

	my $alaChangesLogFilePath = $inLocEnvPath . "_LKCXInfo/alaChangesLog";

	if (!(-e $alaChangesLogFilePath))
	{
		CreateALAChangesLog($inLocEnvPath);
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvPath;
	my $reportFileName;
	my $flVerifierReportFilePath;
	
	if ($inAppleGlotEnvPath eq "")
	{
		$appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	}
	else
	{
		$appleGlotEnvPath = $inAppleGlotEnvPath;
	}
	
	if ($gDebug)
	{
		system "$gAAflverifierFilterProPath -debug -locenv $inLocEnvPath -glot $appleGlotEnvPath";
	}
	else
	{
		system "$gAAflverifierFilterProPath -locenv $inLocEnvPath -glot $appleGlotEnvPath";
	}
	

	$reportFileName = AALocFileUtilities::GetDirectoryBaseName($appleGlotEnvPath) . "_flverifierFilteredReport_Pro.txt";
	$flVerifierReportFilePath = $appleGlotEnvPath . "_Logs/" . $reportFileName;

	ConvertUTF8ToUTF16($flVerifierReportFilePath);
}




#=============================================================================================
#	flverifier for iPod FW AppleGlot Env
#=============================================================================================

sub ReadFWString
{
	my($inFWStringXML, $inFWStringDataRef, $inType) = @_;
	my $outLanguage = "";


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFWStringXML"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inFWStringXML doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $line;
	my @xmlFILECONTENT;

	my $saveRS = $/;
	undef $/;

	open(XMLFILECONTENT, "<$inFWStringXML") or die "Cannot open '$inFWStringXML': $!";
		@xmlFILECONTENT = split /[\n\r]/, <XMLFILECONTENT>;
	close(XMLFILECONTENT);

	$/ = $saveRS;

	foreach $line(@xmlFILECONTENT)
	{
		if ($line =~ m/<StringList xml:lang=\"(.*?)\"(.*?)>/)
		{
			$outLanguage = $1;

			#--Debug----------------------------------------------------------------------------------
			print STDERR "[Debug:ReadFWString] Language: $outLanguage\n" if ($gDebug);
			#-----------------------------------------------------------------------------------------
		}
		elsif($line =~ m/<String sid=\"(.*?)\">(.*?)<\/String>/)
		{
			$inFWStringDataRef->{$1}{$inType} = $2;
		}
	}
	
	return $outLanguage;
}


#---------------------------------------------------------------------------------------------
#	FWStringVerifier
#---------------------------------------------------------------------------------------------

sub FWStringVerifier
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $language = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	$flVerifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_flverifierReport.txt";
	$appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";


	if (-e $flVerifierReportFilePath)
	{
		system "rm $flVerifierReportFilePath";
	}


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:FWStringVerifier] AppleGlot: $inAppleGlotEnvPath\n" if ($gDebug);
	print STDERR "[Debug:FWStringVerifier] Language: $language\n" if ($gDebug);
	print STDERR "[Debug:FWStringVerifier] Report: $flVerifierReportFilePath\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	my %fwStringData = ();
	my $numOfErrors = 0;
	my $totalNumOfErrors = 0;
	my $newLocLanguage = "";
	my $oldLocLanguage = "";


	if ($language ne "")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewBasePath" -type f \\( -path "*/English.lproj/*.xml" \\)`);
	}
	else
	{
		chomp(@searchResult = `find "$appleGlotEnvNewBasePath" -type f | grep ".xml"`);
	}
	
	
	open flVerifierReport, ">> $flVerifierReportFilePath" or die "Failed to open $flVerifierReportFilePath\n";

	# write UTF-8 BOM
	print flVerifierReport "\xEF\xBB\xBF";

	print flVerifierReport `date`;
	print flVerifierReport "\n\n";


	foreach $file (@searchResult)
	{
		%fwStringData = ();
		$numOfErrors = 0;
		
		#--Debug----------------------------------------------------------------------------------
		print STDERR "[Debug:FWStringVerifier] Processing $file\n" if ($gDebug);
		#-----------------------------------------------------------------------------------------

		$newBaseFile = $file;

		$oldBaseFile = $file;
		$oldBaseFile =~ s/_NewBase/_OldBase/;

		$newLocFile = $file;
		if ($language ne "")
		{
			$newLocFile =~ s/English.lproj/$language.lproj/;
		}
		$newLocFile =~ s/_NewBase/_NewLoc/;
	
		$oldLocFile = $newLocFile;
		$oldLocFile =~ s/_NewLoc/_OldLoc/;

		ReadFWString($newBaseFile, \%fwStringData, "NewBase");
		$newLocLanguage = ReadFWString($newLocFile, \%fwStringData, "NewLoc");
		
		if (-e $oldBaseFile)
		{
			ReadFWString($oldBaseFile, \%fwStringData, "OldBase");
		}
		
		if (-e $oldLocFile)
		{
			$oldLocLanguage = ReadFWString($oldLocFile, \%fwStringData, "OldLoc");
		}


		print flVerifierReport "#--------------------------------------------------------------------------\n";
		print flVerifierReport "# $newLocFile Result\n";
		print flVerifierReport "#--------------------------------------------------------------------------\n";
		
		if ($language ne "")
		{
			if ($language ne $newLocLanguage)
			{
				print flVerifierReport "xml:lang incorrect\n";
				print flVerifierReport "\tAG Env: \"$language\"\n";
				print flVerifierReport "\tNewLoc: \"$newLocLanguage\"\n";
				print flVerifierReport "\n";
			}
		}
		else
		{
			if ($oldLocLanguage ne "")
			{
				if ($oldLocLanguage ne $newLocLanguage)
				{
					print flVerifierReport "xml:lang incorrect\n";
					print flVerifierReport "\tOldLoc: \"$oldLocLanguage\"\n";
					print flVerifierReport "\tNewLoc: \"$newLocLanguage\"\n";
					print flVerifierReport "\n";
				}
			}
		}
		
		
		for my $key (keys %fwStringData)
		{
			if (defined $fwStringData{$key}{'NewBase'})
			{
				if (defined $fwStringData{$key}{'NewLoc'})
				{
					if (defined $fwStringData{$key}{'OldBase'})
					{
						if ($fwStringData{$key}{'NewBase'} eq $fwStringData{$key}{'OldBase'})
						{
							if (defined $fwStringData{$key}{'OldLoc'})
							{
								if ($fwStringData{$key}{'NewLoc'} ne $fwStringData{$key}{'OldLoc'})
								{
									print flVerifierReport "$key (NewBase == OldBase) but (NewLoc != OldLoc)\n";
									print flVerifierReport "\tNewBase: \"$fwStringData{$key}{'NewBase'}\"\n";
									print flVerifierReport "\tNewLoc: \"$fwStringData{$key}{'NewLoc'}\"\n";
									print flVerifierReport "\tOldLoc: \"$fwStringData{$key}{'OldLoc'}\"\n";
									print flVerifierReport "\n";
									
									$numOfErrors++;
								}
							}
							else
							{
								print flVerifierReport "$key (NewBase == OldBase) but missing OldLoc\n";
								print flVerifierReport "\tNewBase: \"$fwStringData{$key}{'NewBase'}\"\n";
								print flVerifierReport "\tNewLoc: \"$fwStringData{$key}{'NewLoc'}\"\n";
								print flVerifierReport "\n";
									
								$numOfErrors++;
							}
						}
					}
				}
				else
				{
					print flVerifierReport "$key ($fwStringData{$key}{'NewBase'}) missing in NewLoc\n";
					print flVerifierReport "\n";
					
					$numOfErrors++;
				}
			}
			else
			{
				if (defined $fwStringData{$key}{'OldBase'})
				{
					#	print flVerifierReport "$key ($fwStringData{$key}{'OldBase'}) removed in NewBase\n";
					#	print flVerifierReport "\n";
				}			
	
				if (defined $fwStringData{$key}{'NewLoc'})
				{
					print flVerifierReport "$key ($fwStringData{$key}{'NewLoc'}) added in NewLoc\n";
					print flVerifierReport "\n";
					
					$numOfErrors++;
				}			
			}
		}


		if ($numOfErrors != 0)
		{
			print flVerifierReport "\n\n";
		}
		else
		{
			print flVerifierReport "\n\nNo problem found\n\n";
		}

	
		$totalNumOfErrors += $numOfErrors;
	}	

	close flVerifierReport;
	
	
	if ($totalNumOfErrors != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $flVerifierReportFilePath\n\n\n");
		
		`open -a "AD Viewer" "$flVerifierReportFilePath"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}


#=============================================================================================
#	End flverifier for iPod FW AppleGlot Env
#=============================================================================================




#---------------------------------------------------------------------------------------------
#	UpdateFLVerifierLog
#---------------------------------------------------------------------------------------------

sub UpdateFLVerifierLog
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	$flVerifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_flverifierReport.txt";
	$updatedFLVerifierReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_flverifierReport_Updated.txt";
	my $appleGlotUnixPath = File::Spec::Unix->catfile($inAppleGlotEnvPath);


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$flVerifierReportFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The log file $flVerifierReportFilePath doesn't exist.\n");
		return;
	}

	my $originalPath;
	my $line;

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	open(LOGFILECONTENT, "<$flVerifierReportFilePath") or die "Cannot open '$flVerifierReportFilePath': $!";
		@logFileContent = <LOGFILECONTENT>;
	close(LOGFILECONTENT);

	foreach $line(@logFileContent)
	{
		if ($line =~ m/nib:\/(.*?)\/_NewLoc/ || $line =~ m/file:\/\/localhost(.*?)\/_NewLoc/)
		{
			$originalPath = $1;
			last;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if (-e $updatedFLVerifierReportFilePath)
	{
		system "rm '$updatedFLVerifierReportFilePath'";
	}

	AALocUtilities::PrintLog("Changing $originalPath to\n");
	AALocUtilities::PrintLog("         $appleGlotUnixPath\n");

	open updatedLogFile, ">> $updatedFLVerifierReportFilePath" or die "Failed to open $updatedFLVerifierReportFilePath\n";

	foreach $line(@logFileContent)
	{
		$line =~ s/$originalPath/$appleGlotUnixPath/;
		print updatedLogFile $line;
	}

	close updatedLogFile;
	
	`open -a "AD Viewer" "$updatedFLVerifierReportFilePath"`;
}


#---------------------------------------------------------------------------------------------
#	UpdateAutoLayoutAdjustLog
#---------------------------------------------------------------------------------------------

sub UpdateAutoLayoutAdjustLog
{
	my($inLKCXEnvironmentPath, $inAppleGlotPath) = @_;

	my $autoLayoutAdjusterLogFile = $inLKCXEnvironmentPath
									. "_LKCXInfo/autolayoutadjuster_log/compare_nib_before_after_result.txt",
	my $updatedAutoLayoutAdjusterLogFile = $inLKCXEnvironmentPath
										. "_LKCXInfo/autolayoutadjuster_log/compare_nib_before_after_result_Updated.txt",
	my $appleGlotPath = $inAppleGlotPath;
	my $appleGlotUnixPath = File::Spec::Unix->catfile($appleGlotPath);


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	
	if (!(-e "$autoLayoutAdjusterLogFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The log file $autoLayoutAdjusterLogFile doesn't exist.\n");
		return;
	}
	
	if (!(-d "$appleGlotPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotPath doesn't exist.\n");
		return;
	}

	my $originalPath;
	my $line;

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	open(LOGFILECONTENT, "<$autoLayoutAdjusterLogFile") or die "Cannot open '$autoLayoutAdjusterLogFile': $!";
		@logFileContent = <LOGFILECONTENT>;
	close(LOGFILECONTENT);

	foreach $line(@logFileContent)
	{
		if ($line =~ m/nib:\/(.*?)\/_NewLoc/)
		{
			$originalPath = $1;
			last;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if (-e $updatedAutoLayoutAdjusterLogFile)
	{
		system "rm '$updatedAutoLayoutAdjusterLogFile'";
	}

	AALocUtilities::PrintLog("Changing $originalPath to\n");
	AALocUtilities::PrintLog("         $appleGlotUnixPath\n");

	open updatedLogFile, ">> $updatedAutoLayoutAdjusterLogFile" or die "Failed to open $updatedAutoLayoutAdjusterLogFile\n";

	foreach $line(@logFileContent)
	{
		if ($line =~ m/open \"nib:/)
		{
			$line =~ s/$originalPath/$appleGlotUnixPath/;
			$line =~ s/%20/ /;
			$line =~ s/open \"nib:/open <nib:/;
			$line =~ s/"/>/;
		}
		
		print updatedLogFile $line;
	}

	close updatedLogFile;
}


#---------------------------------------------------------------------------------------------
#	FixAutoLayoutAdjustLog
#
#	Fix open "nib://xxxxxx/AirPort%20Utility.app/xxxx.nib?289"
#	to  open <nib://xxxxxx/AirPort Utility.app/xxxx.nib?289>
#---------------------------------------------------------------------------------------------

sub FixAutoLayoutAdjustLog
{
	my($inAutoLayoutAdjustLog) = @_;

	#-----------------------------------------------------------------------------------------
	#	Read flverifier report
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inAutoLayoutAdjustLog"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The log file $inAutoLayoutAdjustLog doesn't exist.\n");
		return;
	}

	open(FILECONTENT, "<$inAutoLayoutAdjustLog") or die "Cannot open '$inAutoLayoutAdjustLog': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $inAutoLayoutAdjustLogBackup = $inAutoLayoutAdjustLog . "_copy";
	
	if (-e $inAutoLayoutAdjustLogBackup)
	{
		system "rm '$inAutoLayoutAdjustLogBackup'";
	}
	
	`cp "$inAutoLayoutAdjustLog" "$inAutoLayoutAdjustLogBackup"`;

	# SA system "rm '$inAutoLayoutAdjustLog'";
	`rm "$inAutoLayoutAdjustLog"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	open updatedReportFile, ">> $inAutoLayoutAdjustLog" or die "Failed to open $inAutoLayoutAdjustLog\n";

	my $line;


	foreach $line(@fileContent)
	{
		if ($line =~ m/open \"nib:/)
		{
			$line =~ s/%20/ /;
			$line =~ s/open \"nib:/open <nib:/;
			$line =~ s/"/>/;
		}
		
		print updatedReportFile $line;
	}

	close updatedReportFile;
}


#---------------------------------------------------------------------------------------------
#	CreateThinWG
#---------------------------------------------------------------------------------------------

sub CreateThinWG
{
	my($inAppleGlotEnvPath) = @_;

	$appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary";
	$appleGlotWGTransitPath = $inAppleGlotEnvPath . "WG_Transit";


	if (!(-d "$appleGlotEnvWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGPath doesn't exist.\n");
		return;
	}
		
	AALocFileUtilities::RemoveFileAndFolder($appleGlotWGTransitPath);
	`mkdir "$appleGlotWGTransitPath"`;


	AALocUtilities::PrintLog("Thin WG to WG_Transit folder\n\n");
	`convAGFiles -thinWG -forceCopy -source "$appleGlotEnvWGPath" -target "$appleGlotWGTransitPath"`;
}




#=============================================================================================
#
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	WG2LprojLanguageCode
#---------------------------------------------------------------------------------------------

sub WG2LprojLanguageCode
{
	my($inWGLanguage) = @_;
	my $outLanguage = "";

	
	if ($inWGLanguage ne "")
	{
		$outLanguage = $AALocUtilities::kWG2LprojLanguageCode{$inWGLanguage};
	}
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:WG2LprojLanguageCode] in: $inWGLanguage out: $outLanguage\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------
	
	return $outLanguage;
}


#---------------------------------------------------------------------------------------------
#	GetWGLanguage
#---------------------------------------------------------------------------------------------

sub GetWGLanguage
{
	my($inWGFile) = @_;
	my $outLanguage = "";

	open(WGFILE, "<$inWGFile") or die "Cannot open '$inWGFile': $!";
		@wgFileContent = <WGFILE>;
	close(WGFILE);

	foreach $line(@wgFileContent)
	{
		if ($line =~ m/tran loc=\"(.*?)\" origin/)
		{
			$outLanguage = $1;
			last;
		}
	}
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:GetWGLanguage] Language of $inWGFile is $outLanguage\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------
		
	return $outLanguage;
}


#---------------------------------------------------------------------------------------------
#	CheckWGFileContent
#---------------------------------------------------------------------------------------------

sub CheckWGFileContent
{
	my($inWGFile, $inCountryCode) = @_;
	my $outNumOfError = 0;
	my $urlCountryCode = $AALocUtilities::kCountryCode2URLCC{$inCountryCode};

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFile doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Read DNT
	#-----------------------------------------------------------------------------------------

	my $saveRS = $/;
	undef $/;

	open(DNTFILECONTENT, "<$gDNTFilePath") or die "Cannot open '$gDNTFilePath': $!";
		@dntFileContent = split /[\n\r]/, <DNTFILECONTENT>;
	close(DNTFILECONTENT);

	$/ = $saveRS;


	#-----------------------------------------------------------------------------------------
	#	Read URL
	#-----------------------------------------------------------------------------------------

	open(URLFILECONTENT, "<$gURLFilePath") or die "Cannot open '$gURLFilePath': $!";
		@urlFileContent = <URLFILECONTENT>;
	close(URLFILECONTENT);

	my @englishURLs;
	my @localizedURLs;
	my $numOfURL = 0;

	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "country code = $urlCountryCode\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	foreach $line(@urlFileContent)
	{
		if ($line =~ m/^(.*?)\t(.*?)$/)
		{
			$englishURLs[$numOfURL] = $1;
			$localizedURLs[$numOfURL] = $2;
			$localizedURLs[$numOfURL]=~ s/\<cc\>/$urlCountryCode/;
			
			#--Debug----------------------------------------------------------------------------------
			print STDERR "$englishURLs[$numOfURL]	$localizedURLs[$numOfURL]\n" if ($gDebug);
			#-----------------------------------------------------------------------------------------
			
			$numOfURL++;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
	AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($inWGFile) . "\n");
	AALocUtilities::PrintToReport("\n");

	my %wgFileContent = ParseWGFile($inWGFile);
	my @errors;
	
	foreach $filename (sort keys %wgFileContent)
	{
		my @wgFileItemArray = @{$wgFileContent{$filename}};
		
		for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};

			#---------------------------------------------------------------------------------
			#	Check
			#	&amp;apos; ==> &apos;
			#	&amp;gt;   ==> &gt;
			#	&amp;lt;   ==> &lt;
			#	&amp;quot; ==> &quot;
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'tran'} =~ m/&amp;apos;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;apos;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}

			if ($wgFileItemHash{'tran'} =~ m/&amp;gt;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;gt;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}
			
			if ($wgFileItemHash{'tran'} =~ m/&amp;lt;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;lt;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}

			
			if ($wgFileItemHash{'tran'} =~ m/&amp;quot;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;quot;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}


			#---------------------------------------------------------------------------------
			#	Check Don't localize string
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'description'} =~ m/DO NOT LOCALIZE/i
				|| $wgFileItemHash{'description'} =~ m/DON&apos;T LOCALIZE/i
				|| $wgFileItemHash{'description'} =~ m/DON&apos;T TRANSLATE/i
				|| $wgFileItemHash{'description'} =~ m/DO NOT TRANSLATE/i)
			{
				if ($wgFileItemHash{'base'} ne $wgFileItemHash{'tran'})
				{
					AALocUtilities::PrintToReport("### ERROR: Do not localize\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}


			#---------------------------------------------------------------------------------
			#	Check Product name string
			#---------------------------------------------------------------------------------
			
			foreach $dnt(@dntFileContent)
			{
				chomp($dnt);
				
				if ($wgFileItemHash{'base'} =~ m/\b$dnt\b/)
				{
					if (!($wgFileItemHash{'tran'} =~ m/\b$dnt\b/))
					{
						AALocUtilities::PrintToReport("### ERROR: $dnt translated\n");
						AALocUtilities::PrintToReport("            \"$filename\"\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
	
						$outNumOfError++;
					}
				}
				
				
				if ($wgFileItemHash{'tran'} =~ m/\b$dnt\b/)
				{
					if (!($wgFileItemHash{'base'} =~ m/\b$dnt\b/))
					{
						AALocUtilities::PrintToReport("### ERROR: Extra $dnt in tran\n");
						AALocUtilities::PrintToReport("           \"$filename\"\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
						
						$outNumOfError++;
					}
				}
			}
			

			#---------------------------------------------------------------------------------
			#	check .Mac
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'base'} =~ m/\.Mac/)
			{
				if (!($wgFileItemHash{'tran'} =~ m/\.Mac/))
				{
					AALocUtilities::PrintToReport("### ERROR: .Mac translated\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");

					$outNumOfError++;
				}
			}
			
			
			if ($wgFileItemHash{'tran'} =~ m/\.Mac/)
			{
				if (!($wgFileItemHash{'base'} =~ m/\.Mac/))
				{
					AALocUtilities::PrintToReport("### ERROR: Extra .Mac in tran\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}


			#---------------------------------------------------------------------------------
			#	Check URL
			#---------------------------------------------------------------------------------
			
			for ($urlIndex = 0; $urlIndex < $numOfURL; $urlIndex++)
			{
				if ($wgFileItemHash{'base'} =~ m/\b$englishURLs[$urlIndex]\b/)
				{
					if (!($wgFileItemHash{'tran'} =~ m/\b$localizedURLs[$urlIndex]\b/))
					{
						AALocUtilities::PrintToReport("### ERROR: URL $englishURLs[$urlIndex] not localized correctly\n");
						AALocUtilities::PrintToReport("            \"$filename\"\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
	
						$outNumOfError++;
					}
				}
			}


			#---------------------------------------------------------------------------------
			#	string "?#x0000;" and "?#x0001;" should not be there
			#	char 0x0d should be replaced with string "?#x000d;"
			#---------------------------------------------------------------------------------
		
			if ($wgFileItemHash{'tran'} =~ m/\x0d/)
			{
				AALocUtilities::PrintToReport("### ERROR: Found character 0X0d (need to be replaced with string ?#x000d;)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}		
		
			if ($wgFileItemHash{'tran'} =~ m/\?#x0000;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Found character ?#x0000 (need to be removed)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}		
		
			if ($wgFileItemHash{'tran'} =~ m/\?#x0001;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Found character ?#x0001 (need to be removed)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}		


			#---------------------------------------------------------------------------------
			#	Compare number of return in base and tran
			#---------------------------------------------------------------------------------

			my $baseNumberOfReturn = CountNumberOfReturn($wgFileItemHash{'base'});
			my $tranNumberOfReturn = CountNumberOfReturn($wgFileItemHash{'tran'});

			if ($baseNumberOfReturn ne $tranNumberOfReturn)
			{
				AALocUtilities::PrintToReport("### ERROR: Number of return in tran ($tranNumberOfReturn) not equal to base ($baseNumberOfReturn)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}


			#---------------------------------------------------------------------------------
			#	Check CFBundleHelpBookFolder
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'position'} eq "CFBundleHelpBookFolder")
			{
				if ($wgFileItemHash{'base'} ne $wgFileItemHash{'tran'})
				{
					AALocUtilities::PrintToReport("### ERROR: CFBundleHelpBookFolder was translated\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}
		}
	}

		
	if ($outNumOfError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}
	
	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfError;
}


#---------------------------------------------------------------------------------------------
#	CheckWGFileContentNotTranslatedString
#---------------------------------------------------------------------------------------------

sub CheckWGFileContentNotTranslatedString
{
	my($inWGFile) = @_;
	my $outNumOfError = 0;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFile doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
	AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($inWGFile) . "\n");
	AALocUtilities::PrintToReport("\n");

	my %wgFileContent = ParseWGFile($inWGFile);
	my @errors;
	
	foreach $filename (sort keys %wgFileContent)
	{
		my @wgFileItemArray = @{$wgFileContent{$filename}};
		
		for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};
			
			if ($wgFileItemHash{'base'} ne "OtherViews"
				&& $wgFileItemHash{'base'} ne "Item1"
				&& $wgFileItemHash{'base'} ne "Item2"
				&& $wgFileItemHash{'base'} ne "Item3"
				&& $wgFileItemHash{'base'} ne "Box"
				&& $wgFileItemHash{'base'} ne "Radio")
			{
				if ($wgFileItemHash{'base'} eq $wgFileItemHash{'tran'})
				{
					AALocUtilities::PrintLog("<Description>$wgFileItemHash{'description'}</Description>\n");
					AALocUtilities::PrintLog("<Position>$wgFileItemHash{'position'}</Position>\n");
					AALocUtilities::PrintLog("<base loc=\"en\">$wgFileItemHash{'base'}</base>\n");
					AALocUtilities::PrintLog("\n");
					
					$outNumOfError++;
				}
			}
		}
	}

		
	if ($outNumOfError == 0)
	{
		AALocUtilities::PrintToReport("All translated\n");
	}
	
	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfError;
}


#---------------------------------------------------------------------------------------------
#	CheckWGFolderSyntax
#---------------------------------------------------------------------------------------------

sub CheckWGFolderSyntax
{
	my($inWGFolder) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inWGFolder"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFolder doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;

	opendir(directory, $inWGFolder);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		CheckWGFileSyntax($inWGFolder . $file);
	}
}


#---------------------------------------------------------------------------------------------
#	CheckWGFileSyntax
#---------------------------------------------------------------------------------------------

sub CheckWGFileSyntax
{
	my($inWGFile) = @_;
	my $outNumOfErrors = 0;


	my $wgFileXML;
	
	AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
	AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($inWGFile) . "\n");
	AALocUtilities::PrintToReport("\n");

	try
	{
		$wgFileXML = MatchBox::XML->new(file => $inWGFile, validate => 1);
	}
	catch
	{
		$outNumOfErrors++;
	
		my $E = shift;
	
		$E =~ s/$inWGFile/line/g;
			
		AALocUtilities::PrintToReport("### ERROR:\n");
		AALocUtilities::PrintToReport("$E\n");
	};


	if ($outNumOfErrors == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");

	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	CompareWGFolder
#---------------------------------------------------------------------------------------------

sub CompareWGFolder
{
	my($inWGFolder1, $inWGFolder2) = @_;
	
	my $totalNumberOfStrings = 0;
	my $totalNumberOfChangedStrings = 0;
	
	
	opendir(directory, $inWGFolder1);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Comparing $file\n");
	
		my $wgFile1 = $inWGFolder1 . $file;
		my $wgFile2 = $inWGFolder2 . $file;
		
		CompareWGFiles($wgFile1, $wgFile2);
	}
}


#---------------------------------------------------------------------------------------------
#	CompareWGFiles
#---------------------------------------------------------------------------------------------

sub CompareWGFiles
{
	my($inWGFile1, $inWGFile2) = @_;
	my $outNumOfErrors = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inWGFile1"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFile1 doesn't exist.\n");
		return;
	}

	if (!(-e "$inWGFile2"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inWGFile2 doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Parse WG files
	#-----------------------------------------------------------------------------------------

	my %wgFile1Content = ParseWGFile($inWGFile1);
	my %wgFile2Content = ParseWGFile($inWGFile2);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my @errors;
	
	foreach $filename (sort keys %wgFile1Content)
	{
		my @wgFile1ItemArray = @{$wgFile1Content{$filename}};
		my @wgFile2ItemArray = @{$wgFile2Content{$filename}};
		
		if ((scalar @wgFile1ItemArray) != (scalar @wgFile2ItemArray))
		{
			$errors[$outNumOfErrors] = "### ERROR: $filename Number of items doesn't match\n";
			$outNumOfErrors++;
		}
		else
		{
			for ($index = 0; $index < (scalar @wgFile1ItemArray); $index++)
			{
				my %wgFile1ItemHash = %{$wgFile1ItemArray[$index]};
				my %wgFile2ItemHash = %{$wgFile2ItemArray[$index]};
				
				if ($wgFile1ItemHash{'base'} ne $wgFile2ItemHash{'base'})
				{
					$errors[$outNumOfErrors] = "### ERROR: $filename wrong base data\n";
					$outNumOfErrors++;
					$errors[$outNumOfErrors] = "           $wgFile1ItemHash{'base'}\n";
					$outNumOfErrors++;
					$errors[$outNumOfErrors] = "           $wgFile2ItemHash{'base'}\n";
					$outNumOfErrors++;

					next;					
				}

				if ($wgFile1ItemHash{'tran'} ne $wgFile2ItemHash{'tran'})
				{
					$errors[$outNumOfErrors] = "### Trans: $filename translation changed\n";
					$outNumOfErrors++;
					$errors[$outNumOfErrors] = "           base       : $wgFile1ItemHash{'base'}\n";
					$outNumOfErrors++;
					$errors[$outNumOfErrors] = "           tran (org) : $wgFile1ItemHash{'tran'}\n";
					$outNumOfErrors++;
					$errors[$outNumOfErrors] = "           tran (new) : $wgFile2ItemHash{'tran'}\n";
					$outNumOfErrors++;

					next;					
				}
			}
		}
	}

	AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
	AALocUtilities::PrintToReport("# " . AALocFileUtilities::GetFileURL($inWGFile1) . "\n");
	AALocUtilities::PrintToReport("# vs\n");
	AALocUtilities::PrintToReport("# " . AALocFileUtilities::GetFileURL($inWGFile2) . "\n");
	AALocUtilities::PrintToReport("\n");


	if ($outNumOfErrors > 0)
	{
		for ($index = 0; $index < $outNumOfErrors; $index++)
		{
			AALocUtilities::PrintToReport($errors[$index]);
		}
	}
	else
	{
		AALocUtilities::PrintToReport("No Different Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	IsWGNeedReview
#---------------------------------------------------------------------------------------------

sub IsWGNeedReview
{
	my($inWGFile) = @_;
	my $outNeedReview = 0;

	my $line;
	my $translatedString;


	open(WGFILE, "<$inWGFile") or die "Cannot open '$inWGFile': $!";
		@wgFileContent = <WGFILE>;
	close(WGFILE);

	foreach $line(@wgFileContent)
	{
		if ($line =~ m/^(.*?)<tran (.*?)>(.*)<\/tran>(.*)$/)
		{
			my ($f1, $f2, $f3, $f4) = ($1, $2, $3, $4);
			my $translatedString = $f3;

			#--Debug----------------------------------------------------------------------------------
			print STDERR "[Debug:IsWGNeedReview] Translation String: $translatedString\n" if ($gDebug);
			print STDERR "[Debug:IsWGNeedReview] Need Review: $outNeedReview\n" if ($gDebug);
			#-----------------------------------------------------------------------------------------

			if ($translatedString ne "")
			{
				$outNeedReview = 1;
				last;
			}
		}
	}
	
	return $outNeedReview;
}


#---------------------------------------------------------------------------------------------
#	ExtractWGNeedReview
#---------------------------------------------------------------------------------------------

sub ExtractWGNeedReview
{
	my($inAppleGlotEnvPath) = @_;

	$appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	$appleGlotWGNeedReviewPath = $inAppleGlotEnvPath . "_WorkGlossaryNeedReview/";


	if (!(-d "$appleGlotEnvWGPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $appleGlotEnvWGPath doesn't exist.\n");
		return;
	}
	
	AALocFileUtilities::RemoveFileAndFolder($appleGlotWGNeedReviewPath);
	`mkdir "$appleGlotWGNeedReviewPath"`;


	opendir(directory, $appleGlotEnvWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $file\n");
	
		if (IsWGNeedReview($appleGlotEnvWGPath . $file))
		{
			AALocUtilities::PrintLog("         $file need review\n");
			`cp "$appleGlotEnvWGPath$file" "$appleGlotWGNeedReviewPath$file"`;
		}
	}
}


#---------------------------------------------------------------------------------------------
#	IsWGNeedTranslate
#---------------------------------------------------------------------------------------------

sub IsWGNeedTranslate
{
	my($inWGFile) = @_;
	my $outNeedTranslate = 0;

	my $line;
	my $lastBase = "";
	my $tran = "";


	open(WGFILE, "<$inWGFile") or die "Cannot open '$inWGFile': $!";
		@wgFileContent = <WGFILE>;
	close(WGFILE);

	foreach $line(@wgFileContent)
	{
		# if ($line =~ m/<TextItem>/)
		# {
		#	$outNeedTranslate = 1;
		#	last;
		# }
		
		if ($line =~ m/base loc(.*?)>(.*?)<\/base>/)
		{
			$lastBase = $2;

			#--Debug--------------------------------------------------------------------------
			print STDERR "[Debug:IsWGNeedTranslate] base = $lastBase\n" if ($gDebug);
			#--Debug--------------------------------------------------------------------------
		}
		
		if ($line =~ m/tran loc(.*?)>(.*?)<\/tran>/)
		{
			$tran = $2;
			
			#--Debug--------------------------------------------------------------------------
			print STDERR "[Debug:IsWGNeedTranslate] tran = $tran\n" if ($gDebug);
			#--Debug--------------------------------------------------------------------------
			
			if (!($tran eq "" && $lastBase eq ""))
			{
				$outNeedTranslate = 1;
				last;
			}
		}
	}

	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:IsWGNeedTranslate] needTranslate = $outNeedTranslate\n" if ($gDebug);
	#--Debug----------------------------------------------------------------------------------
	
	return $outNeedTranslate;
}


#---------------------------------------------------------------------------------------------
#	ParseXliffFile
#---------------------------------------------------------------------------------------------

sub ParseXliffFile
{
	my($inXliffFile) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-e "$inXliffFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inXliffFile doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my %data = ();
	my %wgFileData = ();
	
	my $saveRS = $/;
	undef $/;
	
	open F, $inXliffFile or die;
	my $data = <F>;
	close F;
	
	$/ = $saveRS;
	
	
	while ($data =~ /<File>.*?<Filepath>(.+?)<\/Filepath>(.+?)<\/File>/gs)
	# while ($data =~ /<File  origin=\".*?\" source-language<Filepath>(.+?)<\/Filepath>(.+?)<\/File>/gs)
	{
		my $filename = $1;
		my $filedata = $2;
		my @filedata = ();
		
		while ($filedata =~ /<TextItem>(.+?)<\/TextItem>/gs)
		{
			my $item = $1;
			
			$item =~ /<Description>(.*?)<\/Description>/s;
			my $description = $1;
			$description = &escapeSpecialChar($description);
			
			$item =~ /<Position>(.*?)<\/Position>/s;
			my $position = $1;
			$position = &escapeSpecialChar($position);
			
			$item =~ /<TranslationSet>.*?<base.*?>(.*?)<\/base>.*?<\/TranslationSet>/s;
			my $base = $1;
			$base = &escapeSpecialChar($base);
			
			$item =~ /<base\s+loc\s*=\s*"([^\"]*?)".*>/s;
			my $baselocale = $1;
			$baselocale = &escapeSpecialChar($baselocale);
			
			$item =~ /<TranslationSet>.*?<tran.*?>(.*?)<\/tran>.*?<\/TranslationSet>/s;
			my $tran = $1;
			$tran = &escapeSpecialChar($tran);
			
			$item =~ /<tran\s+.*loc\s*=\s*"([^\"]*?)".*>/s;
			my $tranlocale = $1;
			$tranlocale = &escapeSpecialChar($tranlocale);
			
			$item =~ /<tran\s+.*origin\s*=\s*"([^\"]*?)".*>/s;
			my $tranorigin = $1;
			$tranorigin = &escapeSpecialChar($tranorigin);
			
			$item =~ /<!--ORIGIN INFO.*'loc_submission_filename'\s*=>\s*'(.*?)'.*-->/s;
			my $mb_submission = $1;
			$mb_submission = &escapeSpecialChar($mb_submission);
			
			$item =~ /<!--ORIGIN INFO.*'resource_file'\s*=>\s*'(.*?)'.*-->/s;
			my $mb_resourcefile = $1;
			$mb_resourcefile = &escapeSpecialChar($mb_resourcefile);
			
			$item =~ /<!--ORIGIN INFO.*'resource_path'\s*=>\s*'(.*?)'.*-->/s;
			my $mb_resourcepath = $1;
			$mb_resourcepath = &escapeSpecialChar($mb_resourcepath);
			
			
			#--Debug----------------------------------------------------------------------------------
			if ($gDebug)
			{
				print STDERR "[Debug:ParseXliffFile] description: $description\n";
				print STDERR "[Debug:ParseXliffFile] position: $position\n";
				print STDERR "[Debug:ParseXliffFile] base: $base\n";
				print STDERR "[Debug:ParseXliffFile] baselocale: $baselocale\n";
				print STDERR "[Debug:ParseXliffFile] tran: $tran\n";
				print STDERR "[Debug:ParseXliffFile] tranlocale: $tranlocale\n";
				print STDERR "[Debug:ParseXliffFile] mbsubmission: $mbsubmission\n";
				print STDERR "[Debug:ParseXliffFile] mbrsrcfile: $mbrsrcfile\n";
				print STDERR "[Debug:ParseXliffFile] mbrsrcpath: $mbrsrcpath\n";
			}
			#-----------------------------------------------------------------------------------------
			
			push @filedata, {	"description"	=> $description,
				"position"		=> $position,
				"base"			=> $base,
				"baselocale"	=> $baselocale,
				"tran"			=> $tran,
				"tranlocale"	=> $tranlocale,
				"tranorigin"	=> $tranorigin,
				"mbsubmission"	=> $mb_submission,
				"mbrsrcfile"	=> $mb_resourcefile,
				"mbrsrcpath"	=> $mb_resourcepath,
			};
		}
		
		%wgFileData->{$filename} = [ @filedata ];
	}
	
	return %wgFileData;
}

		
#---------------------------------------------------------------------------------------------
#	CheckXliffFileContent
#---------------------------------------------------------------------------------------------

sub CheckXliffFileContent
{
	my($inXliffFile, $inCountryCode) = @_;
	my $outNumOfError = 0;
	my $urlCountryCode = $AALocUtilities::kCountryCode2URLCC{$inCountryCode};
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-e "$inXliffFile"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inXliffFile doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Read DNT
	#-----------------------------------------------------------------------------------------
	
	my $saveRS = $/;
	undef $/;
	
	open(DNTFILECONTENT, "<$gDNTFilePath") or die "Cannot open '$gDNTFilePath': $!";
	@dntFileContent = split /[\n\r]/, <DNTFILECONTENT>;
	close(DNTFILECONTENT);
	
	$/ = $saveRS;
	
	
	#-----------------------------------------------------------------------------------------
	#	Read URL
	#-----------------------------------------------------------------------------------------
	
	open(URLFILECONTENT, "<$gURLFilePath") or die "Cannot open '$gURLFilePath': $!";
	@urlFileContent = <URLFILECONTENT>;
	close(URLFILECONTENT);
	
	my @englishURLs;
	my @localizedURLs;
	my $numOfURL = 0;
	
	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "country code = $urlCountryCode\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------
	
	foreach $line(@urlFileContent)
	{
		if ($line =~ m/^(.*?)\t(.*?)$/)
		{
			$englishURLs[$numOfURL] = $1;
			$localizedURLs[$numOfURL] = $2;
			$localizedURLs[$numOfURL]=~ s/\<cc\>/$urlCountryCode/;
			
			#--Debug----------------------------------------------------------------------------------
			print STDERR "$englishURLs[$numOfURL]	$localizedURLs[$numOfURL]\n" if ($gDebug);
			#-----------------------------------------------------------------------------------------
			
			$numOfURL++;
		}
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
	AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($inXliffFile) . "\n");
	AALocUtilities::PrintToReport("\n");
	
	my %xliffFileContent = ParseWGFile($inXliffFile);
	my @errors;
	
	foreach $filename (sort keys %xliffFileContent)
	{
		my @wgFileItemArray = @{$xliffFileContent{$filename}};
		
		for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
		{
			my %wgFileItemHash = %{$wgFileItemArray[$index]};
			
			#---------------------------------------------------------------------------------
			#	Check
			#	&amp;apos; ==> &apos;
			#	&amp;gt;   ==> &gt;
			#	&amp;lt;   ==> &lt;
			#	&amp;quot; ==> &quot;
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'tran'} =~ m/&amp;apos;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;apos;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}
			
			if ($wgFileItemHash{'tran'} =~ m/&amp;gt;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;gt;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}
			
			if ($wgFileItemHash{'tran'} =~ m/&amp;lt;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;lt;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}
			
			
			if ($wgFileItemHash{'tran'} =~ m/&amp;quot;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Contain &amp;quot;\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}
			
			
			#---------------------------------------------------------------------------------
			#	Check Don't localize string
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'description'} =~ m/DO NOT LOCALIZE/i
			|| $wgFileItemHash{'description'} =~ m/DON&apos;T LOCALIZE/i
			|| $wgFileItemHash{'description'} =~ m/DON&apos;T TRANSLATE/i
			|| $wgFileItemHash{'description'} =~ m/DO NOT TRANSLATE/i)
			{
				if ($wgFileItemHash{'base'} ne $wgFileItemHash{'tran'})
				{
					AALocUtilities::PrintToReport("### ERROR: Do not localize\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}
			
			
			#---------------------------------------------------------------------------------
			#	Check Product name string
			#---------------------------------------------------------------------------------
			
			foreach $dnt(@dntFileContent)
			{
				chomp($dnt);
				
				if ($wgFileItemHash{'base'} =~ m/\b$dnt\b/)
				{
					if (!($wgFileItemHash{'tran'} =~ m/\b$dnt\b/))
					{
						AALocUtilities::PrintToReport("### ERROR: $dnt translated\n");
						AALocUtilities::PrintToReport("            \"$filename\"\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
						
						$outNumOfError++;
					}
				}
				
				
				if ($wgFileItemHash{'tran'} =~ m/\b$dnt\b/)
				{
					if (!($wgFileItemHash{'base'} =~ m/\b$dnt\b/))
					{
						AALocUtilities::PrintToReport("### ERROR: Extra $dnt in tran\n");
						AALocUtilities::PrintToReport("           \"$filename\"\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
						
						$outNumOfError++;
					}
				}
			}
			
			
			#---------------------------------------------------------------------------------
			#	check .Mac
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'base'} =~ m/\.Mac/)
			{
				if (!($wgFileItemHash{'tran'} =~ m/\.Mac/))
				{
					AALocUtilities::PrintToReport("### ERROR: .Mac translated\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}
			
			
			if ($wgFileItemHash{'tran'} =~ m/\.Mac/)
			{
				if (!($wgFileItemHash{'base'} =~ m/\.Mac/))
				{
					AALocUtilities::PrintToReport("### ERROR: Extra .Mac in tran\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}
			
			
			#---------------------------------------------------------------------------------
			#	Check URL
			#---------------------------------------------------------------------------------
			
			for ($urlIndex = 0; $urlIndex < $numOfURL; $urlIndex++)
			{
				if ($wgFileItemHash{'base'} =~ m/\b$englishURLs[$urlIndex]\b/)
				{
					if (!($wgFileItemHash{'tran'} =~ m/\b$localizedURLs[$urlIndex]\b/))
					{
						AALocUtilities::PrintToReport("### ERROR: URL $englishURLs[$urlIndex] not localized correctly\n");
						AALocUtilities::PrintToReport("            \"$filename\"\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
						AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
						
						$outNumOfError++;
					}
				}
			}
			
			
			#---------------------------------------------------------------------------------
			#	string "?#x0000;" and "?#x0001;" should not be there
			#	char 0x0d should be replaced with string "?#x000d;"
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'tran'} =~ m/\x0d/)
			{
				AALocUtilities::PrintToReport("### ERROR: Found character 0X0d (need to be replaced with string ?#x000d;)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}		
			
			if ($wgFileItemHash{'tran'} =~ m/\?#x0000;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Found character ?#x0000 (need to be removed)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}		
			
			if ($wgFileItemHash{'tran'} =~ m/\?#x0001;/)
			{
				AALocUtilities::PrintToReport("### ERROR: Found character ?#x0001 (need to be removed)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}		
			
			
			#---------------------------------------------------------------------------------
			#	Compare number of return in base and tran
			#---------------------------------------------------------------------------------
			
			my $baseNumberOfReturn = CountNumberOfReturn($wgFileItemHash{'base'});
			my $tranNumberOfReturn = CountNumberOfReturn($wgFileItemHash{'tran'});
			
			if ($baseNumberOfReturn ne $tranNumberOfReturn)
			{
				AALocUtilities::PrintToReport("### ERROR: Number of return in tran ($tranNumberOfReturn) not equal to base ($baseNumberOfReturn)\n");
				AALocUtilities::PrintToReport("           \"$filename\"\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
				AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
				
				$outNumOfError++;
			}
			
			
			#---------------------------------------------------------------------------------
			#	Check CFBundleHelpBookFolder
			#---------------------------------------------------------------------------------
			
			if ($wgFileItemHash{'position'} eq "CFBundleHelpBookFolder")
			{
				if ($wgFileItemHash{'base'} ne $wgFileItemHash{'tran'})
				{
					AALocUtilities::PrintToReport("### ERROR: CFBundleHelpBookFolder was translated\n");
					AALocUtilities::PrintToReport("           \"$filename\"\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'base'}\n");
					AALocUtilities::PrintToReport("\t$wgFileItemHash{'tran'}\n");
					
					$outNumOfError++;
				}
			}
		}
	}
	
	
	if ($outNumOfError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}
	
	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfError;
}
		

#---------------------------------------------------------------------------------------------
#	PowerCompareXliffFolder
#---------------------------------------------------------------------------------------------

sub FindXliffFile
{
	my($inFolder, $inComponentName) = @_;
	my $resultXliffFile = "";

	
	opendir(directory, $inFolder);
    @searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
	foreach $file (@searchResult)
	{
		$xliffFile = $inFolder . $file;
		
		if (-d "$xliffFile")
		{
			$file =~ m/^(.*)_(.*?)_(.*?)\.(.*)/;
			my ($component, $build, $language, $type) = ($1, $2, $3, $4);
			
			if ($type eq "xtrans")
			{
				$resultXliffFile = $inFolder . "/$file/" . $component . "_" . $build . "_" . $language . ".glotenv/_Translations/" . $component . ".xliff";
				$componentName = $component;
			}
			elsif ($type eq "glotenv")
			{
				$resultXliffFile = $inFolder . "/$file/_Translations/" . $component . ".xliff";
				$componentName = $component;
			}
			else
			{
				$resultXliffFile = "";
				$componentName = "";
			}
		}
		else
		{
			$file =~ m/^(.*)\.(.*?)/;
			$componentName = $1;
			
			$resultXliffFile = $inFolder . $file;
		}
		
		if ($componentName eq $inComponentName)
		{
			return $resultXliffFile;
		}
	}
	
	return "";
}
		
		
sub PowerCompareXliffFolder
{
	my($inFolder1, $inFolder2) = @_;
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare xliff Folder\n");
	AALocUtilities::PrintLog("#		$inFolder1\n");
	AALocUtilities::PrintLog("#		$inFolder2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	#	$result = `$gPcxPath -ski -str -agg '$inFolder1' '$inFolder2'  | $gFpcxPath`;
	
	opendir(directory, $inFolder1);
    @searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	opendir(directory, $inFolder2);
	@folder2SearchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
        my %hashfolder2;
        my $missingstrings="";
        my $stirngsSame="";
        my $stirngsChange="";
        my $MissingExtra="";
        my $result="";
        
        foreach my $folderFile2 (@folder2SearchResult)
        {
            $hashfolder2{$folderFile2}=$folderFile2;
        }
        
        foreach my $tempfile1 (@searchResult)
        {
            if (exists $hashfolder2{$tempfile1}) {
                delete $hashfolder2{$tempfile1};
            }
            else
            {
                $missingstrings.=$tempfile1 . "\n";
            }
        }
        
        unless ($missingstrings eq "") {
            $MissingExtra .= "=====================================\n" . "##Missing Xliff Files in New folder##\n" . $missingstrings . "=====================================\n";
        }
        
        my $hashSize=keys %hashfolder2;
        my $extraList="";
        if ($hashSize >0) {
            
            foreach $key (sort keys %hashfolder2)
            {
                $extraList.=$key ."\n";
            }
            $MissingExtra .= "=====================================\n" . "##Extra Xliff Files in Old folder##\n" . $extraList . "=====================================\n";
        }
        
        
	foreach $file (@searchResult)
	{
		$xliffFile = $inFolder1 . $file;
		$file1 = "";
		$file2 = "";
		$componentName = "";
		
		if (-d "$xliffFile")
		{
			$file =~ m/^(.*)_(.*?)_(.*?)\.(.*)/;
			my ($component, $build, $language, $type) = ($1, $2, $3, $4);
			
			if ($type eq "xtrans")
			{
				$file1 = $inFolder1 . "$file/" . $component . "_" . $build . "_" . $language . ".glotenv/_Translations/" . $component . ".xliff";
				$componentName = $component;
			}
			elsif ($type eq "glotenv")
			{
				$file1 = $inFolder1 . "$file/_Translations/" . $component . ".xliff";
				$componentName = $component;
			}
			else
			{
				$file1 = "";
				$componentName = "";
			}
		}
		else
		{
			$file =~ m/^(.*?)\.(.*?)/;
			$componentName = $1;

			$file1 = $inFolder1 . $file;
		}
		
		
		foreach $folder2File (@folder2SearchResult)
		{
			$xliffFile = $inFolder2 . $folder2File;
			
			if (-d "$xliffFile")
			{
				$folder2File =~ m/^(.*)_(.*?)_(.*?)\.(.*)/;
				my ($component, $build, $language, $type) = ($1, $2, $3, $4);
				
				if ($type eq "xtrans")
				{
					$file2 = $inFolder2 . "$folder2File/" . $component . "_" . $build . "_" . $language . ".glotenv/_Translations/" . $component . ".xliff";
					$folder2ComponentName = $component;
				}
				elsif ($type eq "glotenv")
				{
					$file2 = $inFolder2 . "$folder2File/_Translations/" . $component . ".xliff";
					$folder2ComponentName = $component;
				}
				else
				{
					$file2 = "";
					$folder2ComponentName = "";
				}
			}
			else
			{
				$folder2File =~ m/^(.*)\.(.*?)/;
				$folder2ComponentName = $1;
				
				$file2 = $inFolder2 . $folder2File;
			}
			
			
			if ($componentName eq $folder2ComponentName)
			{

				if ($file1 ne "" && $file2 ne "")
				{
					$fileResult = `$gPcxPath -ski -str -agg '$file1' '$file2'  | $gFpcxPath`;
					
                                        if ($fileResult =~/Changed/) {
                                            
                                            $stirngsChange.=$fileResult;
                                            
                                        }
                                        else
                                        {
                                            $stirngsSame.="==>Identical: " . $componentName . "\n";
                                        }
                                        
					#$result =$result  . $fileResult;
				}

				last;
			}
		}
	}
	
	$result = $stirngsSame ."\n\n" . $MissingExtra ."\n\n" . $stirngsChange;
	return $result;
}


#---------------------------------------------------------------------------------------------
#	PowerCompareXliffFile
#---------------------------------------------------------------------------------------------

sub PowerCompareXliffFile
{
	my($inFile1, $inFile2) = @_;
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare xliff File\n");
	AALocUtilities::PrintLog("#		$inFile1\n");
	AALocUtilities::PrintLog("#		$inFile2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	$result = `$gPcxPath -ski -str -agg '$inFile1' '$inFile2'  | $gFpcxPath`;

        
	return $result;
}

		
#---------------------------------------------------------------------------------------------
#	PowerCompareWGFolder
#---------------------------------------------------------------------------------------------

sub PowerCompareWGFolder
{
	my($inWGFolder1, $inWGFolder2) = @_;
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare WG/AD Folder\n");
	AALocUtilities::PrintLog("#		$inWGFolder1\n");
	AALocUtilities::PrintLog("#		$inWGFolder2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	$result = `$gPcxPath '$inWGFolder1' '$inWGFolder2' -pc -ski -p -nd -objinfo -faddrstr -agg | $gFpcxPath -purl`;

	return $result;
}


#---------------------------------------------------------------------------------------------
#	PowerCompareWGFile
#---------------------------------------------------------------------------------------------

sub PowerCompareWGFile
{
	my($inWGFile1, $inWGFile2) = @_;
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare WG/AD File\n");
	AALocUtilities::PrintLog("#		$inWGFile1\n");
	AALocUtilities::PrintLog("#		$inWGFile2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	$result = `$gPcxPath '$inWGFile1' '$inWGFile2' -pc -ski -p -nd -objinfo -faddrstr -agg | $gFpcxPath -purl`;

	return $result;
}


#---------------------------------------------------------------------------------------------
#	PowerCompareTarballFolder
#---------------------------------------------------------------------------------------------

sub PowerCompareTarballFolder
{
	my($inFolder1, $inFolder2, $inLproj) = @_;
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare Tarball Folder\n");
	AALocUtilities::PrintLog("#		$inFolder1\n");
	AALocUtilities::PrintLog("#		$inFolder2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			if ($inLproj ne "")
			{
				$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -p -nd -objinfo -lproj $inLproj -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl`; 
			}
			else
			{
				$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -p -nd -objinfo -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl`; 
			}
		}
		else
		{
			if ($inLproj ne "")
			{
				$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -p -nd -objinfo -lproj $inLproj -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl`; 
			}
			else
			{
				$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -p -nd -objinfo -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl`; 
			}
		}
	}
	else
	{
		# $result = `$gPcxPath '$inFolder1' '$inWGFolder2' -pc -ski -p -nd -objinfo -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib | $gFpcxPath -l -purl`; 
		if ($inLproj ne "")
		{
			$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -p -nd -objinfo -lproj $inLproj -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib | $gFpcxPath -l -purl`;
		}
		else
		{
			$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -p -nd -objinfo -faddrstr -exp -ppsou $gMaskNumberAndCountryInTarPath -ppsnl $gMaskNumberAndCountryInTarPath -cacheDir2 ~/Library/Caches/LocCache/nib | $gFpcxPath -l -purl`;
		}
	}

	
	AALocFileUtilities::RemoveFoldersInside($inFolder1);
	AALocFileUtilities::RemoveFoldersInside($inFolder2);

	return $result;
}


#---------------------------------------------------------------------------------------------
#	FilterCheckLocFilesReport
#---------------------------------------------------------------------------------------------

sub FilterCheckLocFilesReport
{
	my($inCheckLocFilesReport) = @_;

	$filteredCheckLocFilesReportPath = $inCheckLocFilesReport . ".filtered";


	if (!(-e "$inCheckLocFilesReport"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inCheckLocFilesReport doesn't exist.\n");
		return;
	}
	
	if (-e $filteredCheckLocFilesReportPath)
	{
		system "rm $filteredCheckLocFilesReportPath";
	}

	open(LOGFILECONTENT, "<$inCheckLocFilesReport") or die "Cannot open '$inCheckLocFilesReport': $!";
		@logFileContent = <LOGFILECONTENT>;
	close(LOGFILECONTENT);

	open filteredLogFile, ">> $filteredCheckLocFilesReportPath" or die "Failed to open $filteredCheckLocFilesReportPath\n";

	foreach $line(@logFileContent)
	{
		if (!(($line =~ m/classes.nib]. This file doesn't seem to be touched at all./)
				|| ($line =~ m/data.dependency]. This file doesn't seem to be touched at all./)))
		{
			print filteredLogFile $line;
		}
	}
	
	close filteredLogFile;
}


#---------------------------------------------------------------------------------------------
#	CountWGFolder
#---------------------------------------------------------------------------------------------

sub WdCount
{
	my ( $new_text ) = $_[0];
	my ( $old_text ) = $_[1];
	my ( @newall_w, @new_w, @sym_w, @old_w, $new_c, $sym_c, $old_c );
	
	$new_text =~ s/\s+/ /g;
	$new_text =~ s/^ | $//g;
	$old_text =~ s/\s+/ /g;
	$old_text =~ s/^ | $//g;
	@newall_w = split( / +/, $new_text );
	if ( $newrule )
	{
		$new_c = @new_w = grep {   /^[\"a-z]/i } @newall_w;
		$sym_c = @sym_w = grep { ! /^[\"a-z]/i } @newall_w;
		$old_c = @old_w = split( /\s+/, $old_text );
	}
	else
	{
		$new_c = @new_w = grep {   /[a-z]/i } @newall_w;
		$sym_c = @sym_w = grep { ! /[a-z]/i } @newall_w;
		$old_c = @old_w = split( /\s+/, $old_text );
	}


	( $new_c, $sym_c, $old_c );
}


sub CountWGFolder
{
	my($inWGFolder, $inFormat) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inWGFolder"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified folder $inWGFolder doesn't exist.\n");
		return;
	}

	#-----------------------------------------------------------------------------------------
	#	Count WG files
	#-----------------------------------------------------------------------------------------

	my $totalNewLines = 0;
	my $totalTranslines = 0;
	my $totalNewWords = 0;
	my $totalSymWords = 0;
	my $totalTransWords = 0;
	my $totalStringsFiles = 0;
	my $totalNibFiles = 0;
	my $totalOtherFiles = 0;

	my ( $newLinesNumber, $transLinesNumber ) = ( 0, 0 );
	my ( $stringsFilesNumber, $nibFilesNumber, $otherFilesNumber ) = ( 0, 0, 0 );
	my ( $newWords, $transWords, $newWordsNumber, $transWordsNumber, $symWordsNumber );
	my ( @nibFiles, @stringsFiles, @otherFiles );


	my $directory;
	my $file;
	my $wgFile;


	opendir(directory, $inWGFolder);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	if (@searchResult == 0)
	{
		if ($inFormat eq kInHTMLFormat)
		{
		
		}
		else
		{
			AALocUtilities::PrintToReport("### ERROR: The folder is empty\n");
		}
	}
	else
	{
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<table border=0 cellpadding=5 cellspacing=0 width=1080 style='border-collapse: collapse;table-layout:fixed'>\n");
			AALocUtilities::PrintToReport(" <col width=280>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <col width=80>\n");
			AALocUtilities::PrintToReport(" <tr height=17>\n");
			AALocUtilities::PrintToReport("  <td height=17 class=xl24 width=280>File</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>New<br>Entry</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>Translated<br>Entry</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>Entry<br>Subtotal</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>New word<br>(General)</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>New word<br>(Sym/Num)</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>Translated<br>word</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>Word<br>Subtotal</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>.strings<br>file</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>Nib<br>file</td>\n");
			AALocUtilities::PrintToReport("  <td class=xl24 width=80>.rsrc<br>file</td>\n");
			AALocUtilities::PrintToReport(" </tr>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("File\tNew US Entry\tTranslated Entry\tEntry Subtotal\t");
			AALocUtilities::PrintToReport("New US word (General)\tNew US word(Symbol/Number)\t");
			AALocUtilities::PrintToReport("Translated word\tWord Subtotal\t.strings file\tNib file\t.rsrc file\n");
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
		}

		foreach $file (@searchResult)
		{
			if (AALocFileUtilities::GetFileExtension($file) eq "tmx")
			{
				next;
			}
		
			$newLinesNumber = 0;
			$transLinesNumber = 0;
			$stringsFilesNumber = 0;
			$nibFilesNumber = 0;
			$otherFilesNumber = 0;
			
			$newWords = "";
			$transWords = "";
			
			@nibFiles = ();
			@stringsFiles = ();
			@otherFiles = ();

			$wgFile = $inWGFolder . $file;
	
			AALocUtilities::PrintLog("Counting $file\n");
		
			my %wgFileContent = ParseWGFile($wgFile);
			
			foreach $filename (sort keys %wgFileContent)
			{
				my $fileBaseName = basename($filename);

				if ($fileBaseName =~ /\.nib\.strings$/i)
				{
					# push(@nibFiles, $filename);
					$nibFilesNumber++;
				}
				elsif ($filename =~ /\.strings$/i)
				{
					# push(@stringsFiles, $filename);
					$stringsFilesNumber++;
				}
				elsif ($filename =~ /\.rsrc$/i)
				{
					push(@otherFiles, $filename);
					$otherFilesNumber++;
				}
			
				my @wgFileItemArray = @{$wgFileContent{$filename}};
				
				for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
				{
					my %wgFileItemHash = %{$wgFileItemArray[$index]};
					
					if ($wgFileItemHash{'tran'} eq "")
					{
						$newWords .= $wgFileItemHash{'base'} . " ";
						$newLinesNumber++;
					}
					else
					{
						$transWords .= $wgFileItemHash{'base'} . " ";
						$transLinesNumber++;
					}
				}
			}
			
			# $nibFilesNumber = @nibFiles;
			# $stringsFilesNumber = @stringsFiles;
			# $otherFilesNumber = @otherFiles;
			
			($newWordsNumber, $symWordsNumber, $transWordsNumber) = WdCount($newWords, $transWords);
		
			if ($inFormat eq kInHTMLFormat)
			{
				AALocUtilities::PrintToReport("<tr height=14>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$file</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$newLinesNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$transLinesNumber</td>\n");
				$tempNumber = $newLinesNumber + $transLinesNumber;
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$tempNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$newWordsNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$symWordsNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$transWordsNumber</td>\n");
				$tempNumber = $newWordsNumber + $symWordsNumber + $transWordsNumber;
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$tempNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$stringsFilesNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$nibFilesNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$otherFilesNumber</td>\n");
				AALocUtilities::PrintToReport("</tr>\n");
			}
			else
			{
				AALocUtilities::PrintToReport("$file\t");

				AALocUtilities::PrintToReport("$newLinesNumber\t");
				AALocUtilities::PrintToReport("$transLinesNumber\t");
				$tempNumber = $newLinesNumber + $transLinesNumber;
				AALocUtilities::PrintToReport("$tempNumber\t");
				AALocUtilities::PrintToReport("$newWordsNumber\t");
				AALocUtilities::PrintToReport("$symWordsNumber\t");
				AALocUtilities::PrintToReport("$transWordsNumber\t");
				$tempNumber = $newWordsNumber + $symWordsNumber + $transWordsNumber;
				AALocUtilities::PrintToReport("$tempNumber\t");
				AALocUtilities::PrintToReport("$stringsFilesNumber\t");
				AALocUtilities::PrintToReport("$nibFilesNumber\t");
				AALocUtilities::PrintToReport("$otherFilesNumber\n");
			}
			
			$totalNewLines += $newLinesNumber;
			$totalTranslines += $transLinesNumber;
	
			$totalNewWords += $newWordsNumber;
			$totalSymWords += $symWordsNumber;
			$totalTransWords += $transWordsNumber;
	
			$totalStringsFiles += $stringsFilesNumber;
			$totalNibFiles += $nibFilesNumber;
			$totalOtherFiles += $otherFilesNumber;
		}
		
		
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<tr height=14>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>Total</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalNewLines</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalTranslines</td>\n");
			$tempNumber = $totalNewLines + $totalTranslines;
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$tempNumber</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalNewWords</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalSymWords</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalTransWords</td>\n");
			$tempNumber = $totalNewWords + $totalSymWords + $totalTransWords;
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$tempNumber</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalStringsFiles</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalNibFiles</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalOtherFiles</td>\n");
			AALocUtilities::PrintToReport("</tr>\n");
			AALocUtilities::PrintToReport("</table>\n");
			AALocUtilities::PrintToReport("<br>\n");
			AALocUtilities::PrintToReport("<br>\n");
			AALocUtilities::PrintToReport("<br>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			
			AALocUtilities::PrintToReport("Total:\t");

			AALocUtilities::PrintToReport("$totalNewLines\t");
			AALocUtilities::PrintToReport("$totalTranslines\t");
			$tempNumber = $totalNewLines + $totalTranslines;
			AALocUtilities::PrintToReport("$tempNumber\t");
			AALocUtilities::PrintToReport("$totalNewWords\t");
			AALocUtilities::PrintToReport("$totalSymWords\t");
			AALocUtilities::PrintToReport("$totalTransWords\t");
			$tempNumber = $totalNewWords + $totalSymWords + $totalTransWords;
			AALocUtilities::PrintToReport("$tempNumber\t");
			AALocUtilities::PrintToReport("$totalStringsFiles\t");
			AALocUtilities::PrintToReport("$totalNibFiles\t");
			AALocUtilities::PrintToReport("$totalOtherFiles\n");

			AALocUtilities::PrintToReport("\n");
			AALocUtilities::PrintToReport("\n");
		}
	}
}
		
		
sub MyCountWGFolders
{
	my($inAppleGlotEnvPath, $inFormat) = @_;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified folder $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotWGNotTranslatedPath = $inAppleGlotEnvPath . "_WorkGlossary_NotTranslatedStrings/";
	my $appleGlotADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";

	
	#-----------------------------------------------------------------------------------------
	#	HTML Header
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintToReport("<html>\n");
	AALocUtilities::PrintToReport("\n");
	AALocUtilities::PrintToReport("<!--This file created by AALocCommand version $version-->\n");
	AALocUtilities::PrintToReport("\n");
	AALocUtilities::PrintToReport("<head>\n");
	AALocUtilities::PrintToReport("<style>\n");
	AALocUtilities::PrintToReport("<!--table {}\n");
	AALocUtilities::PrintToReport(".style0\n");
	AALocUtilities::PrintToReport("	{text-align:general;\n");
	AALocUtilities::PrintToReport("	vertical-align:bottom;\n");
	AALocUtilities::PrintToReport("	white-space:nowrap;\n");
	AALocUtilities::PrintToReport("	color:windowtext;\n");
	AALocUtilities::PrintToReport("	font-size:10.0pt;\n");
	AALocUtilities::PrintToReport("	font-style:normal;\n");
	AALocUtilities::PrintToReport("	text-decoration:none;\n");
	AALocUtilities::PrintToReport("	font-family:Verdana;\n");
	AALocUtilities::PrintToReport("	border:none;}\n");
	AALocUtilities::PrintToReport("td\n");
	AALocUtilities::PrintToReport("	{padding-top:1px;\n");
	AALocUtilities::PrintToReport("	padding-right:1px;\n");
	AALocUtilities::PrintToReport("	padding-left:1px;\n");
	AALocUtilities::PrintToReport("	color:windowtext;\n");
	AALocUtilities::PrintToReport("	font-size:10.0pt;\n");
	AALocUtilities::PrintToReport("	font-style:normal;\n");
	AALocUtilities::PrintToReport("	text-decoration:none;\n");
	AALocUtilities::PrintToReport("	font-family:Verdana;\n");
	AALocUtilities::PrintToReport("	text-align:general;\n");
	AALocUtilities::PrintToReport("	vertical-align:bottom;\n");
	AALocUtilities::PrintToReport("	border:none;\n");
	AALocUtilities::PrintToReport("	white-space:nowrap;}\n");
	AALocUtilities::PrintToReport(".xl24\n");
	AALocUtilities::PrintToReport("	{font-size:8.0pt;\n");
	AALocUtilities::PrintToReport("	font-weight:bold;\n");
	AALocUtilities::PrintToReport("	text-align:center;\n");
	AALocUtilities::PrintToReport("	border-top:1.0pt solid windowtext;\n");
	AALocUtilities::PrintToReport("	border-right:none;\n");
	AALocUtilities::PrintToReport("	border-bottom:none;\n");
	AALocUtilities::PrintToReport("	border-left:1.0pt solid windowtext;\n");
	AALocUtilities::PrintToReport("	background:#e9e9e9;}\n");
	AALocUtilities::PrintToReport(".xl27\n");
	AALocUtilities::PrintToReport("	{font-size:8.0pt; border:1.0pt solid windowtext;}\n");
	AALocUtilities::PrintToReport(".xl28\n");
	AALocUtilities::PrintToReport("	{font-size:8.0pt; border:1.0pt solid windowtext; font-weight:bold}\n");
	AALocUtilities::PrintToReport("-->\n");
	AALocUtilities::PrintToReport("</style>\n");
	AALocUtilities::PrintToReport("</head>\n");
	AALocUtilities::PrintToReport("<body >\n");

	
	#-----------------------------------------------------------------------------------------
	#	Count WG files
	#-----------------------------------------------------------------------------------------
	
	my $totalNewLines = 0;
	my $totalTranslines = 0;
	my $totalNewWords = 0;
	my $totalSymWords = 0;
	my $totalTransWords = 0;
	my $totalStringsFiles = 0;
	my $totalNibFiles = 0;
	my $totalOtherFiles = 0;
	
	my ( $newLinesNumber, $transLinesNumber ) = ( 0, 0 );
	my ( $stringsFilesNumber, $nibFilesNumber, $otherFilesNumber ) = ( 0, 0, 0 );
	my ( $newWords, $transWords, $newWordsNumber, $transWordsNumber, $symWordsNumber );
	my ( @nibFiles, @stringsFiles, @otherFiles );
	
	
	my $directory;
	my $file;
	my $wgFile;
	
	
	$totalTransADWordsNumber = 0;
	$totalTransWGWordsNumber = 0;
	$totalTransWGNotTranslatedWordsNumber = 0;
	
	opendir(directory, $appleGlotADPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
	if (@searchResult == 0)
	{
	}
	else
	{
		AALocUtilities::PrintToReport("<table border=0 cellpadding=5 cellspacing=0 width=1080 style='border-collapse: collapse;table-layout:fixed'>\n");
		AALocUtilities::PrintToReport(" <col width=280>\n");
		AALocUtilities::PrintToReport(" <col width=80>\n");
		AALocUtilities::PrintToReport(" <col width=80>\n");
		AALocUtilities::PrintToReport(" <col width=80>\n");
		AALocUtilities::PrintToReport(" <col width=80>\n");
		AALocUtilities::PrintToReport(" <tr height=17>\n");
		AALocUtilities::PrintToReport("  <td height=17 class=xl24 width=280>File</td>\n");
		AALocUtilities::PrintToReport("  <td class=xl24 width=80>AD Words</td>\n");
		AALocUtilities::PrintToReport("  <td class=xl24 width=80>WG Words</td>\n");
		AALocUtilities::PrintToReport("  <td class=xl24 width=80>WG Words (NT)</td>\n");
		AALocUtilities::PrintToReport("  <td class=xl24 width=80>WG Total</td>\n");
		AALocUtilities::PrintToReport(" </tr>\n");
		
		foreach $file (@searchResult)
		{
			if (AALocFileUtilities::GetFileExtension($file) eq "tmx")
			{
				next;
			}
			
			$filenameWithoutExtension = AALocFileUtilities::GetFilenameWithoutExtension($file);
			
			$newADWords = "";
			$transADWords = "";
			$newWGWords = "";
			$transWGWords = "";
			$newWGNotTranslatedWords = "";
			$transWGNotTranslatedWords = "";
			
			$transADWordsNumber = 0;
			$transWGWordsNumber = 0;
			$transWGNotTranslatedWordsNumber = 0;
			
			
			$adFile = $appleGlotADPath . $file;
			$wgFile = $appleGlotWGPath . $filenameWithoutExtension . ".wg";
			$wgNotTranslatedFile = $appleGlotWGNotTranslatedPath . $filenameWithoutExtension . ".wg";
			
			AALocUtilities::PrintLog("Counting $filenameWithoutExtension\n");
			
			my %adFileContent = ParseWGFile($adFile);
			
			foreach $filename (sort keys %adFileContent)
			{
				my @adFileItemArray = @{$adFileContent{$filename}};
				
				for ($index = 0; $index < (scalar @adFileItemArray); $index++)
				{
					my %adFileItemHash = %{$adFileItemArray[$index]};
					
					if ($adFileItemHash{'tran'} eq "")
					{
						$newADWords .= $adFileItemHash{'base'} . " ";
					}
					else
					{
						$transADWords .= $adFileItemHash{'base'} . " ";
					}
				}
			}
			
			($newADWordsNumber, $symADWordsNumber, $transADWordsNumber) = WdCount($newADWords, $transADWords);

			
			if (-e $wgFile)
			{
				my %wgFileContent = ParseWGFile($wgFile);
				
				foreach $filename (sort keys %wgFileContent)
				{
					my @wgFileItemArray = @{$wgFileContent{$filename}};
					
					for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
					{
						my %wgFileItemHash = %{$wgFileItemArray[$index]};
						
						if ($wgFileItemHash{'tran'} eq "")
						{
							$newWGWords .= $wgFileItemHash{'base'} . " ";
						}
						else
						{
							$transWGWords .= $wgFileItemHash{'base'} . " ";
						}
					}
				}
				
				($newWGWordsNumber, $symWGWordsNumber, $transWGWordsNumber) = WdCount($newWGWords, $transWGWords);
			}
			
			
			if (-e $wgNotTranslatedFile)
			{
				my %wgNotTranslatedFileContent = ParseWGFile($wgNotTranslatedFile);
				
				foreach $filename (sort keys %wgNotTranslatedFileContent)
				{
					my @wgNotTranslatedFileItemArray = @{$wgNotTranslatedFileContent{$filename}};
					
					for ($index = 0; $index < (scalar @wgNotTranslatedFileItemArray); $index++)
					{
						my %wgNotTranslatedFileItemHash = %{$wgNotTranslatedFileItemArray[$index]};
						
						if ($wgNotTranslatedFileItemHash{'tran'} eq "")
						{
							$newWGNotTranslatedWords .= $wgNotTranslatedFileItemHash{'base'} . " ";
						}
						else
						{
							$transWGNotTranslatedWords .= $wgNotTranslatedFileItemHash{'base'} . " ";
						}
					}
				}
				
				($newWGNotTranslatedWordsNumber, $symWGNotTranslatedWordsNumber, $transWGNotTranslatedWordsNumber) = WdCount($newWGNotTranslatedWords, $transWGNotTranslatedWords);
			}
			
			
			
			if ($inFormat eq kInHTMLFormat)
			{
				AALocUtilities::PrintToReport("<tr height=14>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$filenameWithoutExtension</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$transADWordsNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$transWGWordsNumber</td>\n");
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$transWGNotTranslatedWordsNumber</td>\n");
				$tempNumber = $transWGWordsNumber + $transWGNotTranslatedWordsNumber;
				AALocUtilities::PrintToReport("<td height=14 class=xl27>$tempNumber</td>\n");
				AALocUtilities::PrintToReport("</tr>\n");
			}
			else
			{
				AALocUtilities::PrintToReport("$file\t");
				
				AALocUtilities::PrintToReport("$newLinesNumber\t");
				AALocUtilities::PrintToReport("$transLinesNumber\t");
				$tempNumber = $newLinesNumber + $transLinesNumber;
				AALocUtilities::PrintToReport("$tempNumber\t");
				AALocUtilities::PrintToReport("$newWordsNumber\t");
				AALocUtilities::PrintToReport("$symWordsNumber\t");
				AALocUtilities::PrintToReport("$transWordsNumber\t");
				$tempNumber = $newWordsNumber + $symWordsNumber + $transWordsNumber;
				AALocUtilities::PrintToReport("$tempNumber\t");
				AALocUtilities::PrintToReport("$stringsFilesNumber\t");
				AALocUtilities::PrintToReport("$nibFilesNumber\t");
				AALocUtilities::PrintToReport("$otherFilesNumber\n");
			}
			
			
			$totalTransADWordsNumber += $transADWordsNumber;
			$totalTransWGWordsNumber += $transWGWordsNumber;
			$totalTransWGNotTranslatedWordsNumber += $transWGNotTranslatedWordsNumber;
		}
		
		
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<tr height=14>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>Total</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalTransADWordsNumber</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalTransWGWordsNumber</td>\n");
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$totalTransWGNotTranslatedWordsNumber</td>\n");
			$tempNumber = $totalTransWGWordsNumber + $totalTransWGNotTranslatedWordsNumber;
			AALocUtilities::PrintToReport("<td height=14 class=xl28>$tempNumber</td>\n");
			AALocUtilities::PrintToReport("</tr>\n");
			AALocUtilities::PrintToReport("</table>\n");
			AALocUtilities::PrintToReport("<br>\n");
			AALocUtilities::PrintToReport("<br>\n");
			AALocUtilities::PrintToReport("<br>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			
			AALocUtilities::PrintToReport("Total:\t");
			
			AALocUtilities::PrintToReport("$totalNewLines\t");
			AALocUtilities::PrintToReport("$totalTranslines\t");
			$tempNumber = $totalNewLines + $totalTranslines;
			AALocUtilities::PrintToReport("$tempNumber\t");
			AALocUtilities::PrintToReport("$totalNewWords\t");
			AALocUtilities::PrintToReport("$totalSymWords\t");
			AALocUtilities::PrintToReport("$totalTransWords\t");
			$tempNumber = $totalNewWords + $totalSymWords + $totalTransWords;
			AALocUtilities::PrintToReport("$tempNumber\t");
			AALocUtilities::PrintToReport("$totalStringsFiles\t");
			AALocUtilities::PrintToReport("$totalNibFiles\t");
			AALocUtilities::PrintToReport("$totalOtherFiles\n");
			
			AALocUtilities::PrintToReport("\n");
			AALocUtilities::PrintToReport("\n");
		}
	}

	
	#-----------------------------------------------------------------------------------------
	#	HTML Footer
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintToReport("</body>\n");
	AALocUtilities::PrintToReport("</html>\n");
}
		
		

#---------------------------------------------------------------------------------------------
#	FindAllCommentsInStrings
#---------------------------------------------------------------------------------------------

sub FindAllCommentsInStrings
{
	my($inAppleGlotEnvPath, $inUpdatedOnly) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc";

	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$language};


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:FindAllCommentsInStrings] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Find comments in .strings Files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $stringsFilesCommentLogFile;
	
	if ($inUpdatedOnly == kUpdatedOnly)
	{
		$stringsFilesCommentLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_updatedStringsCommentLog.txt";
	}
	else
	{
		$stringsFilesCommentLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_stringsCommentLog.txt";
	}


	if (-e $checkNibFilesLogFile)
	{
		# SA system "rm '$checkNibFilesLogFile'";
		`rm "$stringsFilesCommentLogFile"`;
	}
	
	open logFile, "> $stringsFilesCommentLogFile" or die "Failed to open $stringsFilesCommentLogFile\n";


	print logFile "#==========================================================================\n";
	print logFile "# $appleGlotEnvironmentName .strings Files Comments Result\n";
	print logFile "# ";
	print logFile `date`;
	print logFile "#==========================================================================\n";
	print logFile "\n";


	#-----------------------------------------------------------------------------------------
	#	Find comment in .strings files
	#-----------------------------------------------------------------------------------------

	my $numOfCheckingError = 0;
	my $numOfError = 0;
	my $localizedFile;
	my $englishFile;
	my $oldLocalizedFile;
	my $index;
	my $line;
	my $partialLocalizedFile;


	chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.strings" -or -path "*/$shortFormLanguage.lproj/*.strings" \\) | grep -v ".plist.strings" | grep -v ".nib.strings"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		
		AALocUtilities::PrintLog("Checking $localizedFile\n");
		
		if (($inUpdatedOnly == kUpdatedOnly) && !AALocFileUtilities::IsFileUpdatedOrNew($localizedFile))
		{
			AALocUtilities::PrintLog("\tSkipped not updated\n");
			next;
		}
		
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		if (-e "$englishFile")
		{
			open(LOGFILECONTENT, "<$englishFile") or die "Cannot open '$englishFile': $!";
				@logFileContent = <LOGFILECONTENT>;
			close(LOGFILECONTENT);


			$lineNumber = 0;
		
			foreach $line(@logFileContent)
			{
				$lineNumber++;
				
				if (($line =~ m/\/\//) || ($line =~ m/\/*/))
				{
					print logFile "$englishFile $lineNumer: $line";
				}
			}
		}
		else
		{
		
		}
	}


	print logFile "\n\n";
	close logFile;
}


#---------------------------------------------------------------------------------------------
#	CountLXWGFolders
#---------------------------------------------------------------------------------------------

sub CountLXWGFolders
{
	my($inLXPath, $inFormat) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLXPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified $inLXPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotWGPath = $inLXPath . "_WorkGlossary/";
	my $appleGlotWGNewPath = $inLXPath . "_WorkGlossary_New/";
	my $appleGlotWGCandidatesPath = $inLXPath . "_WorkGlossary_Candidates/";
	my $appleGlotWGReviewPath = $inLXPath . "_WorkGlossary_Review/";
	my $appleGlotWGNotTranslatedPath = $inLXPath . "_WorkGlossary_NotTranslatedStrings/";
	my $appleGlotADPath = $inLXPath . "_ApplicationDictionaries/";
	
	


	#-----------------------------------------------------------------------------------------
	#	HTML Header
	#-----------------------------------------------------------------------------------------

	if ($inFormat eq kInHTMLFormat)
	{
		AALocUtilities::PrintToReport("<html>\n");
		AALocUtilities::PrintToReport("\n");
		AALocUtilities::PrintToReport("<!--This file created by AALocCommand version $version-->\n");
		AALocUtilities::PrintToReport("\n");
		AALocUtilities::PrintToReport("<head>\n");
		AALocUtilities::PrintToReport("<style>\n");
		AALocUtilities::PrintToReport("<!--table {}\n");
		AALocUtilities::PrintToReport(".style0\n");
		AALocUtilities::PrintToReport("	{text-align:general;\n");
		AALocUtilities::PrintToReport("	vertical-align:bottom;\n");
		AALocUtilities::PrintToReport("	white-space:nowrap;\n");
		AALocUtilities::PrintToReport("	color:windowtext;\n");
		AALocUtilities::PrintToReport("	font-size:10.0pt;\n");
		AALocUtilities::PrintToReport("	font-style:normal;\n");
		AALocUtilities::PrintToReport("	text-decoration:none;\n");
		AALocUtilities::PrintToReport("	font-family:Verdana;\n");
		AALocUtilities::PrintToReport("	border:none;}\n");
		AALocUtilities::PrintToReport("td\n");
		AALocUtilities::PrintToReport("	{padding-top:1px;\n");
		AALocUtilities::PrintToReport("	padding-right:1px;\n");
		AALocUtilities::PrintToReport("	padding-left:1px;\n");
		AALocUtilities::PrintToReport("	color:windowtext;\n");
		AALocUtilities::PrintToReport("	font-size:10.0pt;\n");
		AALocUtilities::PrintToReport("	font-style:normal;\n");
		AALocUtilities::PrintToReport("	text-decoration:none;\n");
		AALocUtilities::PrintToReport("	font-family:Verdana;\n");
		AALocUtilities::PrintToReport("	text-align:general;\n");
		AALocUtilities::PrintToReport("	vertical-align:bottom;\n");
		AALocUtilities::PrintToReport("	border:none;\n");
		AALocUtilities::PrintToReport("	white-space:nowrap;}\n");
		AALocUtilities::PrintToReport(".xl24\n");
		AALocUtilities::PrintToReport("	{font-size:8.0pt;\n");
		AALocUtilities::PrintToReport("	font-weight:bold;\n");
		AALocUtilities::PrintToReport("	text-align:center;\n");
		AALocUtilities::PrintToReport("	border-top:1.0pt solid windowtext;\n");
		AALocUtilities::PrintToReport("	border-right:none;\n");
		AALocUtilities::PrintToReport("	border-bottom:none;\n");
		AALocUtilities::PrintToReport("	border-left:1.0pt solid windowtext;\n");
		AALocUtilities::PrintToReport("	background:#e9e9e9;}\n");
		AALocUtilities::PrintToReport(".xl27\n");
		AALocUtilities::PrintToReport("	{font-size:8.0pt; border:1.0pt solid windowtext;}\n");
		AALocUtilities::PrintToReport(".xl28\n");
		AALocUtilities::PrintToReport("	{font-size:8.0pt; border:1.0pt solid windowtext; font-weight:bold}\n");
		AALocUtilities::PrintToReport("-->\n");
		AALocUtilities::PrintToReport("</style>\n");
		AALocUtilities::PrintToReport("</head>\n");
		AALocUtilities::PrintToReport("<body >\n");
	}
	

	#-----------------------------------------------------------------------------------------
	#	Count _WorkGlossary
	#-----------------------------------------------------------------------------------------

	if (-d $appleGlotWGPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Count AppleGlot _WordGlossary Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<h3>Workload Information of _WorkGlossary</h3>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("#==========================================================================\n");
			AALocUtilities::PrintToReport("# Workload Information of _WorkGlossary\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
		}
	

		CountWGFolder($appleGlotWGPath, $inFormat);
	}


	#-----------------------------------------------------------------------------------------
	#	Count _WorkGlossary_New
	#-----------------------------------------------------------------------------------------

	if (-d $appleGlotWGNewPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Count AppleGlot _WorkGlossary_New Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<h3>Workload Information of _WorkGlossary_New</h3>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("\n\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
			AALocUtilities::PrintToReport("# Workload Information of _WorkGlossary_New\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
		}
	
		CountWGFolder($appleGlotWGNewPath, $inFormat);
	}


	#-----------------------------------------------------------------------------------------
	#	Count _WorkGlossary_Candidates
	#-----------------------------------------------------------------------------------------

	if (-d $appleGlotWGCandidatesPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Count AppleGlot _WorkGlossary_Candidates Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<h3>Workload Information of _WorkGlossary_Candidates</h3>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("\n\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
			AALocUtilities::PrintToReport("# Workload Information of _WorkGlossary_Candidates\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
		}
	
		CountWGFolder($appleGlotWGCandidatesPath, $inFormat);
	}


	#-----------------------------------------------------------------------------------------
	#	Count _WorkGlossary_Review
	#-----------------------------------------------------------------------------------------

	if (-d $appleGlotWGReviewPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Count AppleGlot _WorkGlossary_Review Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<h3>Workload Information of _WorkGlossary_Review</h3>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("\n\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
			AALocUtilities::PrintToReport("# Workload Information of _WorkGlossary_Review\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
		}
	
		CountWGFolder($appleGlotWGReviewPath, $inFormat);
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Count _WorkGlossary_NotTranslatedStrings
	#-----------------------------------------------------------------------------------------
	
	if (-d $appleGlotWGNotTranslatedPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Count AppleGlot _WorkGlossary_NotTranslatedStrings Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<h3>Workload Information of _WorkGlossary_NotTranslatedStrings</h3>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("#==========================================================================\n");
			AALocUtilities::PrintToReport("# Workload Information of _WorkGlossary_NotTranslatedStrings\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
		}
		
		
		CountWGFolder($appleGlotWGNotTranslatedPath, $inFormat);
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Count _ApplicationDictionaries
	#-----------------------------------------------------------------------------------------
	
	if (-d $appleGlotADPath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Count AppleGlot _ApplicationDictionaries Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		if ($inFormat eq kInHTMLFormat)
		{
			AALocUtilities::PrintToReport("<h3>Workload Information of _ApplicationDictionaries</h3>\n");
		}
		else
		{
			AALocUtilities::PrintToReport("#==========================================================================\n");
			AALocUtilities::PrintToReport("# Workload Information of _ApplicationDictionaries\n");
			AALocUtilities::PrintToReport("#==========================================================================\n");
		}
		
		
		CountWGFolder($appleGlotADPath, $inFormat);
	}
	

	#-----------------------------------------------------------------------------------------
	#	HTML Footer
	#-----------------------------------------------------------------------------------------

	if ($inFormat eq kInHTMLFormat)
	{
		AALocUtilities::PrintToReport("</body>\n");
		AALocUtilities::PrintToReport("</html>\n");
	}
}


#---------------------------------------------------------------------------------------------
#	CountAppleGlotWGFiles
#---------------------------------------------------------------------------------------------

sub CountAppleGlotWGFiles
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $wgWordCountFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_WGWordCount.html";

	open STDOUT, "> $wgWordCountFile" or die "Failed to open $wgWordCountFile\n";
	
	# CountLXWGFolders($inAppleGlotEnvPath, kInHTMLFormat);
	MyCountWGFolders($inAppleGlotEnvPath, kInHTMLFormat);

	close STDOUT;
}


#---------------------------------------------------------------------------------------------
#	CheckAppleGlotLog
#---------------------------------------------------------------------------------------------

sub CheckAppleGlotLog
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	my $appleGlotLogPath = $inAppleGlotEnvPath . "_Logs/";
	my $checkAppleGlotLogLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkAppleGlotLogFilesLog.txt";

	if (-e $checkAppleGlotLogLogFile)
	{
		system "rm '$checkAppleGlotLogLogFile'";
	}

	open STDOUT, ">> $checkAppleGlotLogLogFile" or die "Failed to open $checkAppleGlotLogLogFile\n";
	
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# $appleGlotEnvironmentName Check Result\n");
	AALocUtilities::PrintToReport("# ");
	AALocUtilities::PrintToReport(`date`);
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("\n");

	my $directory;
	my $file;
	my @logFileContent;
	my $logFile;
	my $line;
	my $lineNumber = 0;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check AppleGlot Log\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	opendir(directory, $appleGlotNewBasePath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		my $numOfError = 0;
		
		AALocUtilities::PrintLog("Checking AppleGlot log file $file\n");
		
		$logFile = $appleGlotLogPath . $file;

		AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
		AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($logFile) . "\n");
		AALocUtilities::PrintToReport("\n");


		open(LOGFILECONTENT, "<$logFile") or die "Cannot open '$logFile': $!";
			@logFileContent = <LOGFILECONTENT>;
		close(LOGFILECONTENT);
		
		$lineNumber = 0;
		
		foreach $line(@logFileContent)
		{
			$lineNumber++;
			
			if (($line =~ m/ErrK/)
				|| ($line =~ m/Uncaught exception/)
				|| ($line =~ m/palette needed/)
				|| ($line =~ m/nibtool: could not load/)
				|| ($line =~ m/No Translator found for resource type/))
			{
				AALocUtilities::PrintToReport("### ERROR line $lineNumber: $line");
				$numOfError++;
			}
		}
		
		if ($numOfError == 0)
		{
			AALocUtilities::PrintToReport("No Problem Found\n");
		}
	
		AALocUtilities::PrintToReport("\n\n");
	}
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("#                     E N D    O F    R E P O R T                          \n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	close STDOUT;
}


#---------------------------------------------------------------------------------------------
#	CleanupAppleGlotOldADandTemp
#---------------------------------------------------------------------------------------------

sub CleanupAppleGlotOldADandTemp
{
	my ($inAppleGlotEnvPath) = @_;
	
	my $appleGlotProjectFolderPath = $inAppleGlotEnvPath . "_Projects/";

	
	#-----------------------------------------------------------------------------------------
	#	Cleanup .oldad
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Cleanup .oldad\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	chomp(@searchResult = `find "$appleGlotProjectFolderPath" -type f \\( -path "*.oldad" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Removing $file\n");
		AALocFileUtilities::RemoveFile($file);
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Cleanup .temp
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Cleanup .temp\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	chomp(@searchResult = `find "$appleGlotProjectFolderPath" -type f \\( -path "*.temp" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Removing $file\n");
		AALocFileUtilities::RemoveFile($file);
	}
}


#---------------------------------------------------------------------------------------------
#	CleanupAppleGlotProj
#---------------------------------------------------------------------------------------------

sub CleanupAppleGlotProj
{
	my ($inAppleGlotEnvPath) = @_;
	
	my $appleGlotProjectFolderPath = $inAppleGlotEnvPath . "_Projects/";

	
	#-----------------------------------------------------------------------------------------
	#	Cleanup .proj
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Cleanup .proj\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	chomp(@searchResult = `find "$appleGlotProjectFolderPath" -type f \\( -path "*.proj" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Removing $file\n");
		AALocFileUtilities::RemoveFile($file);
	}
}


#---------------------------------------------------------------------------------------------
#	SearchDontLocalizeComment
#---------------------------------------------------------------------------------------------

sub SearchDontLocalizeComment
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotNewLocPath = $inAppleGlotEnvPath . "_NewLoc";
	my $language = GetLprojLanguage($appleGlotNewLocPath);


	chomp(@searchResult = `find $appleGlotNewLocPath -type f \\( -path "*/$language.lproj/*.strings" \\)`);


	foreach $file (@searchResult)
	{
		# AALocUtilities::PrintLog("Checking $file\n");
	
		open(FILECONTENT, "<$file") or die "Cannot open '$file': $!";
			@fileContent = <FILECONTENT>;
		close(FILECONTENT);
	
		$lineNumber = 0;
	
		foreach $line(@fileContent)
		{
			$lineNumber++;
		
			# AALocUtilities::PrintLog("$lineNumber $line");
			
			if (($line =~ m/\0D\0O\0 \0N\0O\0T\0 \0L\0O\0C\0A\0L\0I\0Z\0E/)
				|| ($line =~ m/DO NOT LOCALIZE/)
				|| ($line =~ m/\0L\0O\0C\0A\0L\0I\0Z\0E/)
				|| ($line =~ m/LOCALIZE/)
				|| ($line =~ m/\0N\0o\0n\0-\0l\0o\0c\0a\0l\0i\0z\0e\0d\0 \0s\0t\0r\0i\0n\0g\0s/)
				|| ($line =~ m/Non-localized strings/))
			{
				AALocUtilities::PrintLog("$file\n");
				AALocUtilities::PrintLog("$lineNumber $line");
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	NibScreenshot
#---------------------------------------------------------------------------------------------

sub NibScreenshot
{
	my($inAppleGlotEnvPath, $inUpdatedOnly, $inNewBase, $inNewLoc) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create Nibs Screenshot\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	my $appleGlotNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $appleGlotScreendumpPath = $inAppleGlotEnvPath . "NibScreenshot/";
	my $language = GetLprojLanguage($appleGlotNewLocPath);
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$language};
	my $componentName;
	my $nibFileName;
	my $screenDumpPath;
	
	
	if ($inUpdatedOnly == kUpdatedOnly)
	{
		$appleGlotScreendumpPath = $inAppleGlotEnvPath . "UpdatedNibScreenshot/";
	}


	# AALocFileUtilities::RemoveFolder($appleGlotScreendumpPath);
	AALocFileUtilities::CreateFolderIfNotExist($appleGlotScreendumpPath);

	chomp(@searchResult = `find "$appleGlotNewLocPath" -type d \\( -path "*/$language.lproj/*.nib" -or -path "*/$shortFormLanguage.lproj/*.nib" \\) | grep -v "~.nib"`);


	foreach $file (@searchResult)
	{
		$componentName = $file;
		$componentName =~ s/$appleGlotNewLocPath\///;
		($componentName, $others) = split('/', $componentName);
		
		$nibFileName = $file;
		($nibFileName, $others) = reverse(split('/', $nibFileName));
		
		
		if (($inUpdatedOnly == kUpdatedOnly) && !AALocFileUtilities::IsFileUpdatedOrNew($file))
		{
			AALocUtilities::PrintLog("           $nibFileName of $componentName (not updated)\n");
			next;
		}
		
		AALocUtilities::PrintLog("Processing $nibFileName of $componentName\n");
	
		AALocFileUtilities::CreateFolderIfNotExist($appleGlotScreendumpPath . "$componentName/");
		
		if ($inNewLoc)
		{
			$screenDumpPath = $appleGlotScreendumpPath . $componentName . "/_NewLoc/";
			AALocFileUtilities::CreateFolderIfNotExist("$screenDumpPath");
		
			`"$gNibImageRiperPath" "$file" -d "$screenDumpPath"`;
		}
		

		if ($inNewBase)
		{
			my $englishNibFile = AALocUtilities::GetEnglishPathFromLocPath($file);
						
			if (-d $englishNibFile)
			{
				$screenDumpPath = $appleGlotScreendumpPath . $componentName . "/_NewBase/";
				AALocFileUtilities::CreateFolderIfNotExist($screenDumpPath);
				
				`"$gNibImageRiperPath" "$englishNibFile" -d "$screenDumpPath"`;
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	BuildAllFileList
#---------------------------------------------------------------------------------------------

sub BuildAllFileList
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Build File Lists\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	
	#	AALocUtilities::PrintLog("Building .rtf file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".rtf");

	#	AALocUtilities::PrintLog("Building .plsit file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".plist");

	#	AALocUtilities::PrintLog("Building .xml file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".xml");

	#	AALocUtilities::PrintLog("Building .html file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".html");

	#	AALocUtilities::PrintLog("Building .nib/.xib file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".nib");

	#	AALocUtilities::PrintLog("Building .rsrc file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".rsrc");

	#	AALocUtilities::PrintLog("Building .strings file list\n");
	#	BuildFileList($inAppleGlotEnvPath, ".strings");
	
	BuildCompleteFileList($inAppleGlotEnvPath);
}


sub BuildFileList
{
	my($inAppleGlotEnvPath, $inFileType) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "RTFFileList.txt";
	my $updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "RTFUpdatedFileList.txt";
	my $language = GetLprojLanguage($inAppleGlotEnvPath);
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$language};
	my $fileBaseName;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inFileType eq ".rtf")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "RTFFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "RTFUpdatedFileList.txt";
	}
	elsif ($inFileType eq ".plist")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "PlistFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "PlistUpdatedFileList.txt";
	}
	elsif ($inFileType eq ".xml")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "XMLFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "XMLUpdatedFileList.txt";
	}
	elsif ($inFileType eq ".html")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "HTMLFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "HTMLUpdatedFileList.txt";
	}
	elsif ($inFileType eq ".nib")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "NibFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "NibUpdatedFileList.txt";
	}
	elsif ($inFileType eq ".rsrc")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "RsrcFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "RsrcUpdatedFileList.txt";
	}
	elsif ($inFileType eq ".strings")
	{
		$fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "StringsFileList.txt";
		$updatedFileLogPath = $inAppleGlotEnvPath . "_Logs/" . "StringsUpdatedFileList.txt";
	}


	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	if ($inFileType eq ".rtf")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.rtf" -or -path "*/$shortFormLanguage.lproj/*.rtf" \\)`);
	}
	elsif ($inFileType eq ".plist")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.plist" -or -path "*/$shortFormLanguage.lproj/*.plist" \\) | grep -v "locversion.plist"`);
	}
	elsif ($inFileType eq ".xml")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.xml" -or -path "*/$shortFormLanguage.lproj/*.xml" \\)`);
	}
	elsif ($inFileType eq ".html")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.html" -or -path "*/$shortFormLanguage.lproj/*.html" \\)`);
	}
	elsif ($inFileType eq ".nib")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type d \\( -path "*/$language.lproj/*.nib" -or -path "*/$shortFormLanguage.lproj/*.nib" \\) | grep -v "~.nib"`);
		chomp(@searchResultXib = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.xib" -or -path "*/$shortFormLanguage.lproj/*.xib" \\) | grep -v ".nib/objects.xib"`);
		
		push(@searchResult, @searchResultXib);
	}
	elsif ($inFileType eq ".rsrc")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.rsrc" -or -path "*/$shortFormLanguage.lproj/*.rsrc" \\)`);
	}
	elsif ($inFileType eq ".strings")
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.strings" -or -path "*/$shortFormLanguage.lproj/*.strings" \\) | grep -v ".plist.strings" | grep -v ".nib.strings"`);
	}
	else
	{
		chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*" -or -path "*/$shortFormLanguage.lproj/*" \\) | grep -v ".nib.strings" | grep $inFileType`);
	}


	open fileLog, "> $fileLogPath" or die "Failed to open $fileLogPath\n";
	open updatedFileLog, "> $updatedFileLogPath" or die "Failed to open $updatedFileLogPath\n";

	foreach $file (@searchResult)
	{
		my $localizedFile = $file;
		my $englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		$englishFile =~ s/$appleGlotEnvNewLocPath//;
		$localizedFile =~ s/$appleGlotEnvNewLocPath//;
		$fileBaseName = basename($file);

		if ($inFileType eq ".nib" || $inFileType eq ".rsrc")
		{
			my $fileStatus = AALocFileUtilities::GetFileStatus($file);
		
			if (($fileStatus eq "Updated") || ($fileStatus eq "New"))
			{
				print updatedFileLog "$fileBaseName\t$localizedFile\t$fileStatus\n";
			}
	
			print fileLog "$fileBaseName\t$localizedFile\t$fileStatus\n";
		}
		elsif ($inFileType eq ".rtf")
		{
			if ($fileBaseName eq "TXT.rtf")
			{
				$englishFile =~ s/\/TXT.rtf//;		# take out "TXT.rtf"
				$localizedFile =~ s/\/TXT.rtf//;		# take out "TXT.rtf"
				
				$fileBaseName = basename($localizedFile);
			}


			if (AALocFileUtilities::IsFileUpdatedOrNew($file))
			{
				print updatedFileLog "$fileBaseName\t$englishFile\t$localizedFile\n";
			}
	
			print fileLog "$fileBaseName\t$englishFile\t$localizedFile\n";
		}
		else
		{
			if (AALocFileUtilities::IsFileUpdatedOrNew($file))
			{
				print updatedFileLog "$fileBaseName\t$englishFile\t$localizedFile\n";
			}
	
			print fileLog "$fileBaseName\t$englishFile\t$localizedFile\n";
		}
	}

	close fileLog;
	close updatedFileLog;
}
		
		
sub BuildCompleteFileList
{
	my($inAppleGlotEnvPath) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $fileLogPath = $inAppleGlotEnvPath . "_Logs/" . "FileList.txt";
	my $language = GetLprojLanguage($inAppleGlotEnvPath);
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$language};
	my $fileBaseName;
	
	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	
	chomp(@searchResult = `find $appleGlotEnvNewLocPath -type f \\( -path "*/$language.lproj/*"  -or -path "*/$shortFormLanguage.lproj/*" \\) | grep -v ".rtf" | grep -v ".rtfd" | grep -v ".nib" | grep -v ".xib" | grep -v ".plist.strings" | grep -v ".nib.strings" | grep -v "locversion.plist" | grep -v ".DS_Store"`);
	chomp(@searchResultNib = `find "$appleGlotEnvNewLocPath" -type d \\( -path "*/$language.lproj/*.nib" -or -path "*/$shortFormLanguage.lproj/*.nib" \\) | grep -v "~.nib"`);
	chomp(@searchResultXib = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.xib" -or -path "*/$shortFormLanguage.lproj/*.xib" \\) | grep -v ".nib/objects.xib"`);
	chomp(@searchResultRTF = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/$language.lproj/*.rtf" -or -path "*/$shortFormLanguage.lproj/*.rtf" \\)`);
	chomp(@searchResultRTFD = `find "$appleGlotEnvNewLocPath" -type d \\( -path "*/$language.lproj/*.rtfd" -or -path "*/$shortFormLanguage.lproj/*.rtfd" \\)`);

	
	open fileLog, "> $fileLogPath" or die "Failed to open $fileLogPath\n";

	
	AALocUtilities::PrintLog("Building .nib file list\n");
	
	foreach $file (@searchResultNib)
	{
		my $localizedFile = $file;
		my $englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		$englishFile =~ s/$appleGlotEnvNewLocPath//;
		$localizedFile =~ s/$appleGlotEnvNewLocPath//;
		$fileBaseName = basename($file);
		
		my $fileStatus = AALocFileUtilities::GetFileStatus($file);
		
		print fileLog "$fileBaseName\t$englishFile\t$localizedFile\t$fileStatus\n";
	}
	
	
	AALocUtilities::PrintLog("Building .xib file list\n");
	
	foreach $file (@searchResultXib)
	{
		my $localizedFile = $file;
		my $englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		$englishFile =~ s/$appleGlotEnvNewLocPath//;
		$localizedFile =~ s/$appleGlotEnvNewLocPath//;
		$fileBaseName = basename($file);
		
		my $fileStatus = AALocFileUtilities::GetFileStatus($file);
		
		print fileLog "$fileBaseName\t$englishFile\t$localizedFile\t$fileStatus\n";
	}
	
	
	
	AALocUtilities::PrintLog("Building .rtf file list\n");
	
	foreach $file (@searchResultRTF)
	{
		my $localizedFile = $file;
		my $englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		$englishFile =~ s/$appleGlotEnvNewLocPath//;
		$localizedFile =~ s/$appleGlotEnvNewLocPath//;
		$fileBaseName = basename($file);
		
		my $fileStatus = AALocFileUtilities::GetFileStatus($file);

		$englishFile =~ s/\/TXT.rtf//;		# take out "TXT.rtf"
		$localizedFile =~ s/\/TXT.rtf//;		# take out "TXT.rtf"		
		$fileBaseName = basename($localizedFile);
		
		print fileLog "$fileBaseName\t$englishFile\t$localizedFile\t$fileStatus\n";
	}

	
	AALocUtilities::PrintLog("Building .rtfd file list\n");

	foreach $file (@searchResultRTFD)
	{
		my $localizedFile = $file;
		my $englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		$englishFile =~ s/$appleGlotEnvNewLocPath//;
		$localizedFile =~ s/$appleGlotEnvNewLocPath//;
		$fileBaseName = basename($file);
		
		my $fileStatus = AALocFileUtilities::GetFileStatus($file);
		
		print fileLog "$fileBaseName\t$englishFile\t$localizedFile\t$fileStatus\n";
	}
	
	
	
	AALocUtilities::PrintLog("Building other files list\n");
	
	foreach $file (@searchResult)
	{
		my $localizedFile = $file;
		my $englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
		
		$englishFile =~ s/$appleGlotEnvNewLocPath//;
		$localizedFile =~ s/$appleGlotEnvNewLocPath//;
		$fileBaseName = basename($file);
		
		my $fileStatus = AALocFileUtilities::GetFileStatus($file);

		print fileLog "$fileBaseName\t$englishFile\t$localizedFile\t$fileStatus\n";
	}
	
	
	close fileLog;
}
		

#---------------------------------------------------------------------------------------------
#	BuildHelpHTMLFileList
#---------------------------------------------------------------------------------------------

sub BuildHelpHTMLFileList
{
	my($inHelpEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inHelpEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Help environment $inHelpEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $helpEnvHTMLLeveragedPath = $inHelpEnvPath . "_Working/_Leveraged/_html/";
	my $helpEnvHTMLLocRequiredPath = $inHelpEnvPath . "_Working/_LocRequired/_html/";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$fileLogPath = $inHelpEnvPath . "HTMLFileList.txt";
	$updatedFileLogPath = $inHelpEnvPath . "HTMLUpdatedFileList.txt";

	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	opendir(directory, $helpEnvHTMLLeveragedPath);
	@leveragedHTMLFiles = grep { !/^\./} readdir(directory);
	closedir(directory);

	opendir(directory, $helpEnvHTMLLocRequiredPath);
	@locRequiredHTMLFiles = grep { !/^\./} readdir(directory);
	closedir(directory);

	

	open fileLog, "> $fileLogPath" or die "Failed to open $fileLogPath\n";
	open updatedFileLog, "> $updatedFileLogPath" or die "Failed to open $updatedFileLogPath\n";

	foreach $file (@locRequiredHTMLFiles)
	{
		print updatedFileLog "$file\n";
	}

	foreach $file (@leveragedHTMLFiles)
	{
		print fileLog "$file\n";
	}

	close fileLog;
	close updatedFileLog;
}


#---------------------------------------------------------------------------------------------
#	PrepareTranslationKit
#
#	Prepare WG for TM from _WorkGlossary to WG_Transit folder
#	Use AAProcessNonGlotableFiles to extract non-glottable files by project to _NonGlotable folder
#	Backup _NonGlotable folder to _NonGlotable_Org
#	Backup _WorkGlossary folder to _WorkGlossary_Org
#
#	Copy AD files (_ApplicationDictionaries) to Translation Kit (AD)
#	Copy TM ready WG files (WG_Transit) that need to translate to Translation Kit (WG)
#	Copy Non-Glottable files (_NonGlotable) to Translation Kit (Others)
#---------------------------------------------------------------------------------------------

sub PrepareTranslationKit
{
	my($inAppleGlotEnvPath, $inTranslationKitPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Prepare Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $appleGlotEnvNonGlotableReferencePath = $inAppleGlotEnvPath . "_NonGlotable_Reference/";
	my $appleGlotEnvNonGlotableOrgPath = $inAppleGlotEnvPath . "_NonGlotable_Org/";
	my $appleGlotEnvTMXPath = $inAppleGlotEnvPath . "ADsAndWGs.tmx";
	my $translationKitADPath = $inTranslationKitPath . "AD/";
	my $translationKitWGPath = $inTranslationKitPath . "WG/";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";
	my $translationKitNonGlotableReferencePath = $inTranslationKitPath . "_NonGlotable_Reference/";
	my $translationKitTMXPath = $inTranslationKitPath . "ADsAndWGs.tmx";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Prepare Glossary For TM\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::RemoveFileAndFolder($appleGlotEnvWGTransitPath);
	`mkdir "$appleGlotEnvWGTransitPath"`;

	opendir(directory, $appleGlotEnvWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGPath . $file;
		
		system "prepGlossaryForTM -file $wgfile -saveDir $appleGlotEnvWGTransitPath";
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottable Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	AALocUtilities::PrintLog("Extract Non-Glottable Files by project\n");
	# SA system "$gAAProcessNonGlotableFilesPath -extractByProject '$inAppleGlotEnvPath'";
	`"$gAAProcessNonGlotableFilesPath" -extractByProject "$inAppleGlotEnvPath"`;

	AALocUtilities::PrintLog("Backup NonGlotable Folder\n\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$appleGlotEnvNonGlotableOrgPath"`;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Files to Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	if (!(-d $appleGlotEnvWGOrgPath))
	{
		AALocUtilities::PrintLog("Backup WG Folder\n\n");
		`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGOrgPath"`;
	}

	
	AALocFileUtilities::RemoveFileAndFolder($translationKitADPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitNonGlotablePath);

	AALocUtilities::PrintLog("Copying AD Files\n");
	`ditto "$appleGlotEnvADPath" "$translationKitADPath"`;


	#-----------------------------------------------------------------------------------------
	#	WG Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying WG Files\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGTransitPath . $file;
		$tkfile = $translationKitWGPath . $file;
	
		if (IsWGNeedTranslate($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGPath);

			AALocUtilities::PrintLog("   $file need translate\n");
			`cp "$wgfile" "$tkfile"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to translate\n");
		}
	}	


	#-----------------------------------------------------------------------------------------
	#	Non Glottable Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying Non Glottable Files\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$translationKitNonGlotablePath"`;
	`ditto "$appleGlotEnvNonGlotableReferencePath" "$translationKitNonGlotableReferencePath"`;


	#-----------------------------------------------------------------------------------------
	#	TMX Files
	#-----------------------------------------------------------------------------------------

	if (-e $appleGlotEnvTMXPath)
	{
		AALocUtilities::PrintLog("Copying TMX File\n");
		`cp "$appleGlotEnvTMXPath" "$translationKitTMXPath"`;
	}
}


#---------------------------------------------------------------------------------------------
#	PrepareTranslationKitLKCX
#
#	Thin WG from _WorkGlossary to WG_Transit folder
#	Use AAProcessNonGlotableFiles to extract non-glottable files by project to _NonGlotable folder
#	Backup _NonGlotable folder to _NonGlotable_Org
#	Backup _WorkGlossary folder to _WorkGlossary_Org
#
#	Copy AD files (_ApplicationDictionaries) to Translation Kit (AD)
#	# Copy Thinned WG files (WG_Transit) that need to translate to Translation Kit (WG)
#	Use prepGlossaryForTM to copy Thinned WG files (WG_Transit) that need to translate
#		to Translation Kit (WG)
#	Copy WG files (_WorkGlossary_Org) that need to review to Translation Kit (WG_Org)
#	Copy Non-Glottable files (_NonGlotable) to Translation Kit (Others)
#---------------------------------------------------------------------------------------------

sub PrepareTranslationKitLKCX
{
	my($inAppleGlotEnvPath, $inTranslationKitPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Prepare Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $appleGlotEnvNonGlotableReferencePath = $inAppleGlotEnvPath . "_NonGlotable_Reference/";
	my $appleGlotEnvNonGlotableOrgPath = $inAppleGlotEnvPath . "_NonGlotable_Org/";
	my $translationKitADPath = $inTranslationKitPath . "AD/";
	my $translationKitWGPath = $inTranslationKitPath . "WG/";
	my $translationKitWGOrgPath = $inTranslationKitPath . "WG_Org/";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";
	my $translationKitNonGlotableReferencePath = $inTranslationKitPath . "Others_Reference/";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Create Thin WG\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	CreateThinWG($inAppleGlotEnvPath);


	# AALocUtilities::PrintLog("\n");
	# AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	# AALocUtilities::PrintLog("# Check WG need review\n");
	# AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	# ExtractWGNeedReview($inAppleGlotEnvPath);


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottable Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	AALocUtilities::PrintLog("Extract Non-Glottable Files by project\n");
	# SA system "$gAAProcessNonGlotableFilesPath -extractByProject '$inAppleGlotEnvPath'";
	`"$gAAProcessNonGlotableFilesPath" -extractByProject "$inAppleGlotEnvPath"`;

	AALocUtilities::PrintLog("Backup NonGlotable Folder\n\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$appleGlotEnvNonGlotableOrgPath"`;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Files to Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	if (!(-d $appleGlotEnvWGOrgPath))
	{
		AALocUtilities::PrintLog("Backup WG Folder\n\n");
		`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGOrgPath"`;
	}

	
	AALocFileUtilities::RemoveFileAndFolder($translationKitADPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGOrgPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitNonGlotablePath);

	AALocUtilities::PrintLog("Copying AD Files\n");
	`ditto "$appleGlotEnvADPath" "$translationKitADPath"`;


	#-----------------------------------------------------------------------------------------
	#	WG Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying WG Files\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGTransitPath . $file;
		$tkfile = $translationKitWGPath . $file;
	
		if (IsWGNeedTranslate($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGPath);

			AALocUtilities::PrintLog("   $file need translate\n");
			# `cp "$wgfile" "$tkfile"`;
			# SA system "prepGlossaryForTM -file $wgfile -saveDir $translationKitWGPath";
			`prepGlossaryForTM -file "$wgfile" -saveDir "$translationKitWGPath"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to translate\n");
		}
	}	


	#-----------------------------------------------------------------------------------------
	#	WG Org
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying WG Org Files\n");
	
	opendir(directory, $appleGlotEnvWGOrgPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGOrgPath . $file;
		$tkfile = $translationKitWGOrgPath . $file;
	
		if (IsWGNeedReview($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGOrgPath);

			AALocUtilities::PrintLog("   $file need review\n");
			`cp "$wgfile" "$tkfile"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to review\n");
		}
	}	


	#-----------------------------------------------------------------------------------------
	#	Non Glottable Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying Non Glottable Files\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$translationKitNonGlotablePath"`;
	`ditto "$appleGlotEnvNonGlotableReferencePath" "$translationKitNonGlotableReferencePath"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	#	AALocUtilities::PrintLog("Copying Translation Kit Template\n");
	#	AALocFileUtilities::CopyFile($gLocTemplatesFolderPath . "$gTranslationKitNoteTemplateName", $inTranslationKitPath . "$gTranslationKitNoteTemplateName", kNotOpen);
}


#---------------------------------------------------------------------------------------------
#	PrepareTranslationKitLX
#
#	prepGlossaryForTM WG files from _WorkGlossary_New to WG_Transit folder
#	Use AAProcessNonGlotableFiles to extract non-glottable files by project to _NonGlotable folder
#	Backup _NonGlotable folder to _NonGlotable_Org
#	Backup _WorkGlossary folder to _WorkGlossary_Org
#
#	Copy AD files from _ApplicationDictionaries to Translation Kit _ApplicationDictionaries folder
#	Copy WG files from WG_Transit to Translation Kit _WorkGlossary_New folder
#	Copy WG files from _WorkGlossary_Candidates to Translation Kit _WorkGlossary_Candidates folder
#	Copy TMX file (_WorkGlossary_Candidates.tmx) of _WorkGlossary_Candidates to Translation Kit
#	Copy WG files from _WorkGlossary_Review to Translation Kit _WorkGlossary_Review folder
#	Copy Non-Glottable files (_NonGlotable) to Translation Kit (Others)
#---------------------------------------------------------------------------------------------

sub PrepareTranslationKitLX
{
	my($inAppleGlotEnvPath, $inTranslationKitPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Prepare Translation Kit LX\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";	
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $appleGlotEnvNonGlotableReferencePath = $inAppleGlotEnvPath . "_NonGlotable_Reference/";
	my $appleGlotEnvNonGlotableOrgPath = $inAppleGlotEnvPath . "_NonGlotable_Org/";
	my $appleGlotEnvWGNewPath = $inAppleGlotEnvPath . "_WorkGlossary_New/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";
	my $translationKitADPath = $inTranslationKitPath . "_ApplicationDictionaries/";
	my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary_New/";
	# my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary/";
	my $translationKitWGCandidatesPath = $inTranslationKitPath . "_WorkGlossary_Candidates/";
	my $translationKitWGReviewPath = $inTranslationKitPath . "_WorkGlossary_Review/";
	my $translationKitWGCandidatesTMXPath = $inTranslationKitPath . "_WorkGlossary_Candidates.tmx";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";
	my $translationKitNonGlotableReferencePath = $inTranslationKitPath . "Others_Reference/";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Prepare Glossary For TM\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");


	AALocFileUtilities::RemoveFileAndFolder($appleGlotEnvWGTransitPath);
	`mkdir "$appleGlotEnvWGTransitPath"`;

	opendir(directory, $appleGlotEnvWGNewPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGNewPath . $file;
		
		system "prepGlossaryForTM -file $wgfile -saveDir $appleGlotEnvWGTransitPath";
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottable Files\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	
	AALocUtilities::PrintLog("Extract Non-Glottable Files by project\n\n");
	# `$gAAProcessNonGlotableFilesPath -extractByProject "$inAppleGlotEnvPath"`;
	# SA system "$gAAProcessNonGlotableFilesPath -extractByProject '$inAppleGlotEnvPath'";
	`"$gAAProcessNonGlotableFilesPath" -extractByProject "$inAppleGlotEnvPath"`;

	AALocUtilities::PrintLog("Backup NonGlotable Folder\n\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$appleGlotEnvNonGlotableOrgPath"`;


	if (!(-d $appleGlotEnvWGOrgPath))
	{
		AALocUtilities::PrintLog("Backup _WorkGlossary Folder to _WorkGlossary_Org\n\n");
		`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGOrgPath"`;
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Files to Translation Kit\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	
	AALocFileUtilities::RemoveFileAndFolder($translationKitADPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGNewPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGCandidatesPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGCandidatesTMXPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGReviewPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitNonGlotablePath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying AD Files\n");
	`ditto "$appleGlotEnvADPath" "$translationKitADPath"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying _WorkGlossary_New Files\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGTransitPath . $file;
		$tkfile = $translationKitWGNewPath . $file;
	
		if (IsWGNeedTranslate($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGNewPath);

			AALocUtilities::PrintLog("   $file need to translate\n");
			`cp "$wgfile" "$tkfile"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to translate\n");
		}
	}	


	#-----------------------------------------------------------------------------------------
	#	_WorkGlossary_Candidates
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying _WorkGlossary_Candidates Files\n");
	# `ditto "$appleGlotEnvWGCandidatesPath" "$translationKitWGCandidatesPath"`;

	opendir(directory, $appleGlotEnvWGCandidatesPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGCandidatesPath . $file;
		
		if (IsWGNeedReview($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGCandidatesPath);

			AALocUtilities::PrintLog("   $file need to translate\n");
			system "prepGlossaryForTM -file $wgfile -saveDir $translationKitWGCandidatesPath";
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to translate\n");
		}
	}

	if (-d $translationKitWGCandidatesPath)
	{
		AALocUtilities::PrintLog("Copying _WorkGlossary_Candidates.tmx File\n");
		CovertWGFolderToTMX($appleGlotEnvWGCandidatesPath, $translationKitWGCandidatesTMXPath);
	}
	else
	{
		AALocUtilities::PrintLog("No _WorkGlossary_Candidates.tmx file because no _WorkGlossary_Candidates file\n");
	}


	#-----------------------------------------------------------------------------------------
	#	_WorkGlossary_Review
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying _WorkGlossary_Review Files\n");
	# `ditto "$appleGlotEnvWGReviewPath" "$translationKitWGReviewPath"`;

	opendir(directory, $appleGlotEnvWGReviewPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGReviewPath . $file;
		
		if (IsWGNeedReview($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGReviewPath);

			AALocUtilities::PrintLog("   $file need to review\n");
			`cp "$wgfile" "$translationKitWGReviewPath$file"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to review\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Non Glottable Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying Non Glottable Files\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$translationKitNonGlotablePath"`;
	`ditto "$appleGlotEnvNonGlotableReferencePath" "$translationKitNonGlotableReferencePath"`;


	#-----------------------------------------------------------------------------------------
	#	Check Translation Kit
	#-----------------------------------------------------------------------------------------

	#	my $numOfError = CheckTranslationKitLX($inTranslationKitPath);
	
	#	if ($numOfError != 0)
	#	{
	#		FixTranslationKitLX($inTranslationKitPath);
	#	}
}


#---------------------------------------------------------------------------------------------
#	PrepareTranslationKitSpecial
#
#	Thin WG from _WorkGlossary to WG_Transit folder
#	Use AAProcessNonGlotableFiles to extract non-glottable files by project to _NonGlotable folder
#	Backup _NonGlotable folder to _NonGlotable_Org
#	Backup _WorkGlossary folder to _WorkGlossary_Org
#
#	Copy AD files (_ApplicationDictionaries) to Translation Kit (AD)
#	# Copy Thinned WG files (WG_Transit) that need to translate to Translation Kit (WG)
#	Use prepGlossaryForTM to copy Thinned WG files (WG_Transit) that need to translate
#		to Translation Kit (WG)
#	Copy WG files (_WorkGlossary_Org) that need to review to Translation Kit (WG_Org)
#	Copy Non-Glottable files (_NonGlotable) to Translation Kit (Others)
#	Copy Non-Glottable files (_NonGlotable) to Translation Kit
#---------------------------------------------------------------------------------------------

sub PrepareTranslationKitSpecial
{
	my($inAppleGlotEnvPath, $inTranslationKitPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Prepare Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $appleGlotEnvNonGlotableOrgPath = $inAppleGlotEnvPath . "_NonGlotable_Org/";
	my $translationKitADPath = $inTranslationKitPath . "AD/";
	my $translationKitWGPath = $inTranslationKitPath . "WG/";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottable Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	AALocUtilities::PrintLog("Extract Non-Glottable Files by project\n");
	# SA system "$gAAProcessNonGlotableFilesPath -extractByProject '$inAppleGlotEnvPath'";
	`"$gAAProcessNonGlotableFilesPath" -extractByProject "$inAppleGlotEnvPath"`;

	AALocUtilities::PrintLog("Backup NonGlotable Folder\n\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$appleGlotEnvNonGlotableOrgPath"`;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Files to Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	if (!(-d $appleGlotEnvWGOrgPath))
	{
		AALocUtilities::PrintLog("Backup WG Folder\n\n");
		`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGOrgPath"`;
	}

	
	AALocFileUtilities::RemoveFileAndFolder($translationKitADPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitNonGlotablePath);

	AALocUtilities::PrintLog("Copying AD Files\n");
	`ditto "$appleGlotEnvADPath" "$translationKitADPath"`;


	#-----------------------------------------------------------------------------------------
	#	WG Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying WG Files\n");
	
	`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGTransitPath"`;

	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGTransitPath . $file;
		$tkfile = $translationKitWGPath . $file;
	
		if (IsWGNeedTranslate($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGPath);

			AALocUtilities::PrintLog("   $file need translate\n");
			# `cp "$wgfile" "$tkfile"`;
			# SA system "prepGlossaryForTM -file $wgfile -saveDir $translationKitWGPath";
			`prepGlossaryForTM -file "$wgfile" -saveDir "$translationKitWGPath"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to translate\n");
		}
	}	


	#-----------------------------------------------------------------------------------------
	#	Non Glottable Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying Non Glottable Files\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$translationKitNonGlotablePath"`;
}


#---------------------------------------------------------------------------------------------
#	PrepareHelpTranslationKit
#
#---------------------------------------------------------------------------------------------

sub PrepareHelpTranslationKit
{
	my($inLocEnvPath, $inTranslationKitPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Prepare Help Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);

	my $helpEnvHTMLLeveragedPath = $helpEnvPath . "_Working/_Leveraged/_html/";
	my $helpEnvHTMLLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_html/";
	my $helpEnvIndexLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_xpgs/";
	my $helpEnvAppleScriptLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_AppleScript/";
	my $helpEnvFMLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_FM/";
	my $helpEnvGraphicLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_graphic/";
	my $helpEnvMovieLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_movie/";
	my $helpEnvOthersLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_others/";
	my $helpEnvInHTMLLeveragedPath = $helpEnvPath . "_In/_Flattened/_NewBase/_html/";

	my $translationKitHTMLPath = $inTranslationKitPath . "HTML/";
	my $translationKitHTMLLeveragedPath = $inTranslationKitPath . "HTML/_Leveraged/";
	my $translationKitHTMLLocRequiredPath = $inTranslationKitPath . "HTML/_LocRequired/";
	my $translationKitKeywordsPath = $inTranslationKitPath . "Keywords/";
	my $translationKitOthersPath = $inTranslationKitPath . "Others/";
	my $translationKitAppleScriptPath = $translationKitOthersPath . "_AppleScript/";
	my $translationKitFMPath = $translationKitOthersPath . "_FM/";
	my $translationKitGraphicPath = $translationKitOthersPath . "_graphic/";
	my $translationKitMoviePath = $translationKitOthersPath . "_movie/";


	AALocFileUtilities::RemoveFileAndFolder($translationKitHTMLPath);
	AALocFileUtilities::CreateFolderIfNotExist($translationKitHTMLPath);

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Loc Required HTML Files to Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	AALocFileUtilities::CreateFolderIfNotExist($translationKitHTMLLocRequiredPath);

	AALocUtilities::PrintLog("Copying Loc Required HTML Files\n");
	`ditto "$helpEnvHTMLLocRequiredPath" "$translationKitHTMLLocRequiredPath"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Leveraged HTML Files to Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	AALocFileUtilities::CreateFolderIfNotExist($translationKitHTMLLeveragedPath);

	AALocUtilities::PrintLog("Copying Leveraged HTML Files\n");

	opendir(directory, $helpEnvHTMLLeveragedPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		my $leveragedUSFile = $helpEnvInHTMLLeveragedPath . $file;
		
		`ditto "$leveragedUSFile" "$translationKitHTMLLeveragedPath"`;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $helpEnvXAllFilePath = $helpEnvIndexLocRequiredPath . "xall.html";
	my $helpEnvX1FilePath = $helpEnvIndexLocRequiredPath . "x1.html";

	if ((-e $helpEnvXAllFilePath) || (-e $helpEnvX1FilePath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Copy Index Files to Translation Kit\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		if (-e $helpEnvXAllFilePath)
		{
			AALocUtilities::PrintLog("Copying xall.html\n");
			`ditto "$helpEnvXAllFilePath" "$translationKitHTMLLocRequiredPath"`;
		}
		
		if (-e $helpEnvX1FilePath)
		{
			AALocUtilities::PrintLog("Copying x1.html\n");
			`ditto "$helpEnvX1FilePath" "$translationKitHTMLLocRequiredPath"`;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $helpEnvWGtableFilePath = $helpEnvPath . "_Working/WGtable.txt";

	if (-e $helpEnvWGtableFilePath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Copy Keyword Files to Translation Kit\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		AALocFileUtilities::RemoveFileAndFolder($translationKitKeywordsPath);
		AALocFileUtilities::CreateFolderIfNotExist($translationKitKeywordsPath);
		
		AALocUtilities::PrintLog("Copying WGtable.txt\n");
		`ditto "$helpEnvWGtableFilePath" "$translationKitKeywordsPath"`;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Other Files to Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
	AALocFileUtilities::RemoveFileAndFolder($translationKitOthersPath);
	AALocFileUtilities::CreateFolderIfNotExist($translationKitOthersPath);
	
	AALocUtilities::PrintLog("Copying Other files\n");
	`ditto "$helpEnvOthersLocRequiredPath" "$translationKitOthersPath"`;

	`rm $translationKitOthersPath*.helpindex`;
	`rm $translationKitOthersPath*.css`;
	AALocFileUtilities::RemoveFile($translationKitOthersPath . "Info.plist");
	AALocFileUtilities::RemoveFile($translationKitOthersPath . "locversion.plist");
	AALocFileUtilities::RemoveFile($translationKitOthersPath . "version.plist");
	AALocFileUtilities::RemoveFile($translationKitOthersPath . "PkgInfo");


	if (!AALocFileUtilities::IsEmptyFolder($helpEnvAppleScriptLocRequiredPath))
	{
		AALocUtilities::PrintLog("Copying AppleScript files\n");
		`ditto "$helpEnvAppleScriptLocRequiredPath" "$translationKitAppleScriptPath"`;
	}

	if (!AALocFileUtilities::IsEmptyFolder($helpEnvFMLocRequiredPath))
	{
		AALocUtilities::PrintLog("Copying FM files\n");
		`ditto "$helpEnvFMLocRequiredPath" "$translationKitFMPath"`;
	}

	if (!AALocFileUtilities::IsEmptyFolder($helpEnvGraphicLocRequiredPath))
	{
		AALocUtilities::PrintLog("Copying Graphic files\n");
		`ditto "$helpEnvGraphicLocRequiredPath" "$translationKitGraphicPath"`;
	}

	if (!AALocFileUtilities::IsEmptyFolder($helpEnvMovieLocRequiredPath))
	{
		AALocUtilities::PrintLog("Copying Movie files\n");
		`ditto "$helpEnvMovieLocRequiredPath" "$translationKitMoviePath"`;
	}
}


#---------------------------------------------------------------------------------------------
#	CheckTranslationKitLX
#---------------------------------------------------------------------------------------------

sub CheckTranslationKitLX
{
	my($inTranslationKitPath) = @_;
	my $outNumOfErrors = 0;

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $translationKitWGCandidatesPath = $inTranslationKitPath . "_WorkGlossary_Candidates/";
	my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary_New/";
	my %wgFileContent;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check _WorkGlossary_Candidates Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	opendir(directory, $translationKitWGCandidatesPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $file\n");

		$wgFile = $translationKitWGCandidatesPath . $file;
		%wgFileContent = ParseWGFile($wgFile);
	
		foreach $filename (sort keys %wgFileContent)
		{
			my @wgFileItemArray = @{$wgFileContent{$filename}};
			
			for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
			{
				my %wgFileItemHash = %{$wgFileItemArray[$index]};

				if ($wgFileItemHash{'tran'} ne $wgFileItemHash{'base'})
				{
					AALocUtilities::PrintLog("### WARNING: tran not equal to base ($wgFileItemHash{'tran'})\n");
					$outNumOfErrors++;
				}
			}
		}
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check _WorkGlossary_New Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	opendir(directory, $translationKitWGNewPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $file\n");

		$wgFile = $translationKitWGNewPath . $file;
		%wgFileContent = ParseWGFile($wgFile);
	
		foreach $filename (sort keys %wgFileContent)
		{
			my @wgFileItemArray = @{$wgFileContent{$filename}};
			
			for ($index = 0; $index < (scalar @wgFileItemArray); $index++)
			{
				my %wgFileItemHash = %{$wgFileItemArray[$index]};

				if ($wgFileItemHash{'tran'} ne $wgFileItemHash{'base'})
				{
					AALocUtilities::PrintLog("### WARNING: tran not equal to base ($wgFileItemHash{'tran'})\n");
					$outNumOfErrors++;
				}
			}
		}
	}



	if ($outNumOfErrors != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found. It will be fixed\n\n\n");
	}
	
	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	FixTranslationKitLX
#---------------------------------------------------------------------------------------------

sub FixTranslationKitLX
{
	my($inTranslationKitPath) = @_;

	my $translationKitWGCandidatesPath = $inTranslationKitPath . "_WorkGlossary_Candidates/";
	my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary_New/";
	my $translationKitTempPath = $inTranslationKitPath . "temp/";
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Fix Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	AALocFileUtilities::CreateFolderIfNotExist($translationKitTempPath);
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Fix _WorkGlossary_Candidates Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	`convAGFiles -forceCopy -source "$translationKitWGCandidatesPath" -target "$translationKitTempPath"`;
	`ditto "$translationKitTempPath" "$translationKitWGCandidatesPath"`;
	AALocFileUtilities::RemoveFolderContent($translationKitTempPath);
	
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Fix _WorkGlossary_New Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	`convAGFiles -forceCopy -source "$translationKitWGNewPath" -target "$translationKitTempPath"`;
	`ditto "$translationKitTempPath" "$translationKitWGNewPath"`;
		
	AALocFileUtilities::RemoveFolder($translationKitTempPath);
}


#---------------------------------------------------------------------------------------------
#	SplitTranslationKit
#---------------------------------------------------------------------------------------------

sub SplitTranslationKit
{
	my($inTranslationKitPath, $inComponentListPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inComponentListPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified component list $inComponentListPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Split Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#	Read Component List
	#-----------------------------------------------------------------------------------------

	my $saveRS = $/;
	undef $/;

	open(FILECONTENT, "<$inComponentListPath") or die "Cannot open '$inComponentListPath': $!";
		@fileContent = split /[\n\r]/, <FILECONTENT>;
	close(FILECONTENT);
	
	$/ = $saveRS;


	my %componentList = ();
			
	foreach $line(@fileContent)
	{
		if ($numberOfTranslationKits == 0)
		{
			$numberOfTranslationKits = $line;
		}
		else
		{
			$line =~ m/^(.*?)\t(.*?)$/;
			my ($componentName, $translationKitNumber) = ($1, $2);
			
			%componentList->{$componentName} = $translationKitNumber;
		}
	}

	
	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print "Number of Translation Kits = $numberOfTranslationKits\n";
		
		foreach $componentName (sort keys %componentList)
		{
			$number = %componentList->{$componentName};
		
			print "$componentName = $number\n";
		}
	}
	#-----------------------------------------------------------------------------------------


	for ($translationKitNumber = 1; $translationKitNumber <= $numberOfTranslationKits; $translationKitNumber++)
	{
		my $newTranslationKitPath = $inTranslationKitPath;
		
		$newTranslationKitPath =~ s|/$||;		# remove trailing slash
		$newTranslationKitPath = $newTranslationKitPath . "_#$translationKitNumber/";
	
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Splitting to $newTranslationKitPath\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

		AALocFileUtilities::RemoveFileAndFolder($newTranslationKitPath);
		`ditto "$inTranslationKitPath" "$newTranslationKitPath"`;

		my $translationKitADPath = $newTranslationKitPath . "AD/";
		my $translationKitWGPath = $newTranslationKitPath . "WG/";
		my $translationKitWGOrgPath = $newTranslationKitPath . "WG_Org/";
		my $translationKitNonGlotablePath = $newTranslationKitPath . "Others/";


		foreach $componentName (sort keys %componentList)
		{
			$kitNumber = %componentList->{$componentName};
		
			if ($kitNumber == $translationKitNumber)
			{
				AALocUtilities::PrintLog("$componentName\n");
			}
			else
			{
				AALocFileUtilities::RemoveFile($translationKitADPath . $componentName . ".ad");
				AALocFileUtilities::RemoveFile($translationKitWGPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFile($translationKitWGOrgPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFolder($translationKitNonGlotablePath . $componentName);
			}
		}

		
		#-------------------------------------------------------------------------------------
		#	Make Disk Image
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Making disk image\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		MakeDiskImage($newTranslationKitPath);
	}
}


#---------------------------------------------------------------------------------------------
#	PrepareTranslationKitLXNew
#
#	prepGlossaryForTM WG files from _WorkGlossary_New to WG_Transit folder
#	Use AAProcessNonGlotableFiles to extract non-glottable files by project to _NonGlotable folder
#	Backup _NonGlotable folder to _NonGlotable_Org
#	Backup _WorkGlossary folder to _WorkGlossary_Org
#
#	Copy AD files from _ApplicationDictionaries to Translation Kit _ApplicationDictionaries folder
#	Copy WG files from WG_Transit to Translation Kit _WorkGlossary_New folder
#	Copy WG files from _WorkGlossary_Candidates to Translation Kit _WorkGlossary_Candidates folder
#	Copy WG files from _WorkGlossary_Review to Translation Kit _WorkGlossary_Review folder
#	Copy Non-Glottable files (_NonGlotable) to Translation Kit (Others)
#---------------------------------------------------------------------------------------------

sub PrepareTranslationKitLXNew
{
	my($inAppleGlotEnvPath, $inTranslationKitPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Prepare Translation Kit LX\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";	
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $appleGlotEnvNonGlotableOrgPath = $inAppleGlotEnvPath . "_NonGlotable_Org/";
	my $appleGlotEnvWGNewPath = $inAppleGlotEnvPath . "_WorkGlossary_New/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";
	my $translationKitADPath = $inTranslationKitPath . "_ApplicationDictionaries/";
	my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary_New/";
	# my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary/";
	my $translationKitWGCandidatesPath = $inTranslationKitPath . "_WorkGlossary_Candidates/";
	my $translationKitWGReviewPath = $inTranslationKitPath . "_WorkGlossary_Review/";
	my $translationKitWGCandidatesTMXPath = $inTranslationKitPath . "_WorkGlossary_Candidates.tmx";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Prepare Glossary For TM\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocFileUtilities::RemoveFileAndFolder($appleGlotEnvWGTransitPath);
	`mkdir "$appleGlotEnvWGTransitPath"`;

	opendir(directory, $appleGlotEnvWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGPath . $file;
		
		system "prepGlossaryForTM -file $wgfile -saveDir $appleGlotEnvWGTransitPath";
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottable Files\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	
	AALocUtilities::PrintLog("Extract Non-Glottable Files by project\n\n");
	# `$gAAProcessNonGlotableFilesPath -extractByProject "$inAppleGlotEnvPath"`;
	# SA system "$gAAProcessNonGlotableFilesPath -extractByProject '$inAppleGlotEnvPath'";
	`"$gAAProcessNonGlotableFilesPath" -extractByProject "$inAppleGlotEnvPath"`;

	AALocUtilities::PrintLog("Backup NonGlotable Folder\n\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$appleGlotEnvNonGlotableOrgPath"`;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Files to Translation Kit\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	
	if (!(-d $appleGlotEnvWGOrgPath))
	{
		AALocUtilities::PrintLog("Backup _WorkGlossary Folder to _WorkGlossary_Org\n\n");
		`ditto "$appleGlotEnvWGPath" "$appleGlotEnvWGOrgPath"`;
	}

	AALocFileUtilities::RemoveFileAndFolder($translationKitADPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGNewPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGCandidatesPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGCandidatesTMXPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitWGReviewPath);
	AALocFileUtilities::RemoveFileAndFolder($translationKitNonGlotablePath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying AD Files\n");
	`ditto "$appleGlotEnvADPath" "$translationKitADPath"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying _WorkGlossary Files\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$wgfile = $appleGlotEnvWGTransitPath . $file;
		$tkfile = $translationKitWGNewPath . $file;
	
		if (IsWGNeedTranslate($wgfile))
		{
			AALocFileUtilities::CreateFolderIfNotExist($translationKitWGNewPath);

			AALocUtilities::PrintLog("   $file need to translate\n");
			`cp "$wgfile" "$tkfile"`;
		}
		else
		{
			AALocUtilities::PrintLog("   $file NO NEED to translate\n");
		}
	}	


	#-----------------------------------------------------------------------------------------
	#	TMX
	#-----------------------------------------------------------------------------------------

	# AALocUtilities::PrintLog("Copying _WorkGlossary_Candidates.tmx File\n");
	# CovertWGFolderToTMX($appleGlotEnvWGCandidatesPath, $translationKitWGCandidatesTMXPath);

	AALocUtilities::PrintLog("Copying _WorkGlossary_Review.tmx File\n");
	CovertWGFolderToTMX($appleGlotEnvWGReviewPath, $translationKitWGCandidatesTMXPath, $appleGlotEnvWGCandidatesPath);


	#-----------------------------------------------------------------------------------------
	#	Non Glottable Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying Non Glottable Files\n");
	`ditto "$appleGlotEnvNonGlotablePath" "$translationKitNonGlotablePath"`;
}


#---------------------------------------------------------------------------------------------
#	SplitTranslationKit
#---------------------------------------------------------------------------------------------

sub SplitTranslationKit
{
	my($inTranslationKitPath, $inComponentListPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inComponentListPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified component list $inComponentListPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Split Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#	Read Component List
	#-----------------------------------------------------------------------------------------

	my $saveRS = $/;
	undef $/;

	open(FILECONTENT, "<$inComponentListPath") or die "Cannot open '$inComponentListPath': $!";
		@fileContent = split /[\n\r]/, <FILECONTENT>;
	close(FILECONTENT);
	
	$/ = $saveRS;


	my %componentList = ();
			
	foreach $line(@fileContent)
	{
		if ($numberOfTranslationKits == 0)
		{
			$numberOfTranslationKits = $line;
		}
		else
		{
			$line =~ m/^(.*?)\t(.*?)$/;
			my ($componentName, $translationKitNumber) = ($1, $2);
			
			%componentList->{$componentName} = $translationKitNumber;
		}
	}

	
	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print "Number of Translation Kits = $numberOfTranslationKits\n";
		
		foreach $componentName (sort keys %componentList)
		{
			$number = %componentList->{$componentName};
		
			print "$componentName = $number\n";
		}
	}
	#-----------------------------------------------------------------------------------------


	for ($translationKitNumber = 1; $translationKitNumber <= $numberOfTranslationKits; $translationKitNumber++)
	{
		my $newTranslationKitPath = $inTranslationKitPath;
		
		$newTranslationKitPath =~ s|/$||;		# remove trailing slash
		$newTranslationKitPath = $newTranslationKitPath . "_#$translationKitNumber/";
	
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Splitting to $newTranslationKitPath\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

		AALocFileUtilities::RemoveFileAndFolder($newTranslationKitPath);
		`ditto "$inTranslationKitPath" "$newTranslationKitPath"`;

		my $translationKitADPath = $newTranslationKitPath . "AD/";
		my $translationKitWGPath = $newTranslationKitPath . "WG/";
		my $translationKitWGOrgPath = $newTranslationKitPath . "WG_Org/";
		my $translationKitNonGlotablePath = $newTranslationKitPath . "Others/";


		foreach $componentName (sort keys %componentList)
		{
			$kitNumber = %componentList->{$componentName};
		
			if ($kitNumber == $translationKitNumber)
			{
				AALocUtilities::PrintLog("$componentName\n");
			}
			else
			{
				AALocFileUtilities::RemoveFile($translationKitADPath . $componentName . ".ad");
				AALocFileUtilities::RemoveFile($translationKitWGPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFile($translationKitWGOrgPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFolder($translationKitNonGlotablePath . $componentName);
			}
		}

		
		#-------------------------------------------------------------------------------------
		#	Make Disk Image
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Making disk image\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		MakeDiskImage($newTranslationKitPath);
	}
}


#---------------------------------------------------------------------------------------------
#	SplitTranslationKitLX
#---------------------------------------------------------------------------------------------

sub SplitTranslationKitLX
{
	my($inTranslationKitPath, $inComponentListPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inComponentListPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified component list $inComponentListPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $numberOfTranslationKits = 0;

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Split Translation Kit LX\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#	Read Component List
	#-----------------------------------------------------------------------------------------

	my $saveRS = $/;
	undef $/;

	open(FILECONTENT, "<$inComponentListPath") or die "Cannot open '$inComponentListPath': $!";
		@fileContent = split /[\n\r]/, <FILECONTENT>;
	close(FILECONTENT);
	
	$/ = $saveRS;


	my %componentList = ();
			
	foreach $line(@fileContent)
	{
		if ($numberOfTranslationKits == 0)
		{
			$numberOfTranslationKits = $line;
		}
		else
		{
			$line =~ m/^(.*?)\t(.*?)$/;
			my ($componentName, $translationKitNumber) = ($1, $2);
			
			%componentList->{$componentName} = $translationKitNumber;
		}
	}

	
	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print "Number of Translation Kits = $numberOfTranslationKits\n";
		
		foreach $componentName (sort keys %componentList)
		{
			$number = %componentList->{$componentName};
		
			print "$componentName = $number\n";
		}
	}
	#-----------------------------------------------------------------------------------------


	for ($translationKitNumber = 1; $translationKitNumber <= $numberOfTranslationKits; $translationKitNumber++)
	{
		my $newTranslationKitPath = $inTranslationKitPath;
		
		$newTranslationKitPath =~ s|/$||;		# remove trailing slash
		$newTranslationKitPath = $newTranslationKitPath . "_#$translationKitNumber/";
	
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Splitting to $newTranslationKitPath\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

		AALocFileUtilities::RemoveFileAndFolder($newTranslationKitPath);
		`ditto "$inTranslationKitPath" "$newTranslationKitPath"`;

		my $translationKitADPath = $newTranslationKitPath . "_ApplicationDictionaries/";
		my $translationKitWGNewPath = $newTranslationKitPath . "_WorkGlossary_New/";
		my $translationKitWGCandidatesPath = $newTranslationKitPath . "_WorkGlossary_Candidates/";
		my $translationKitWGReviewPath = $newTranslationKitPath . "_WorkGlossary_Review/";
		my $translationKitNonGlotablePath = $newTranslationKitPath . "Others/";

		foreach $componentName (sort keys %componentList)
		{
			$kitNumber = %componentList->{$componentName};
		
			if ($kitNumber == $translationKitNumber)
			{
				AALocUtilities::PrintLog("$componentName\n");
			}
			else
			{
				AALocFileUtilities::RemoveFile($translationKitADPath . $componentName . ".ad");
				AALocFileUtilities::RemoveFile($translationKitWGNewPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFile($translationKitWGCandidatesPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFile($translationKitWGReviewPath . $componentName . ".wg");
				AALocFileUtilities::RemoveFolder($translationKitNonGlotablePath . $componentName);
			}
		}

		
		#-------------------------------------------------------------------------------------
		#	Make Disk Image
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Making disk image\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		MakeDiskImage($newTranslationKitPath);
	}
}


#---------------------------------------------------------------------------------------------
#	SplitLocEnv
#---------------------------------------------------------------------------------------------

sub SplitLocEnv
{
	my($inLocEnvPath, $inComponentListPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc Env $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inComponentListPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified component list $inComponentListPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $numberOfEnvironments = 0;

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Split Loc Environment\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#	Read Component List
	#-----------------------------------------------------------------------------------------

	my %componentList = ();
	my @environments;
	my $readEnvironments = 0;


	my $saveRS = $/;
	undef $/;

	open(FILECONTENT, "<$inComponentListPath") or die "Cannot open '$inComponentListPath': $!";
		@fileContent = split /[\n\r]/, <FILECONTENT>;
	close(FILECONTENT);
	
	$/ = $saveRS;

			
	foreach $line(@fileContent)
	{
		if ($numberOfEnvironments == 0)
		{
			$numberOfEnvironments = $line;
		}
		else
		{
			if ($readEnvironments < $numberOfEnvironments)
			{
				chomp($line);
				$environments[$readEnvironments] = $line;
				$readEnvironments++;
			}
			else
			{
				$line =~ m/^(.*?)\t(.*?)$/;
				my ($componentName, $environmentName) = ($1, $2);
				
				%componentList->{$componentName} = $environmentName;
			}
		}
	}


	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print "Number of Loc Env = $numberOfEnvironments\n";
		
		for ($locEnvironmentNumber = 0; $locEnvironmentNumber < $numberOfEnvironments; $locEnvironmentNumber++)
		{
			print "$environments[$locEnvironmentNumber]\n";
		}

		foreach $componentName (sort keys %componentList)
		{
			$number = %componentList->{$componentName};
		
			print "$componentName = $number\n";
		}
	}
	#-----------------------------------------------------------------------------------------


	my $directoryPath = dirname($inLocEnvPath);
	my $locEnvName = AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath);
	
	$locEnvName =~ m/^(.*?)_(.*?)_(.*?)_(.*?)_(.*?)_(.*?)$/;
	my ($locEnv, $projectName, $buildNumber, $locSubmitNumber, $countryCode, $localizer) = ($1, $2, $3, $4, $5, $6);

	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);



	#-----------------------------------------------------------------------------------------
	#	Read Non-Glottable Files Log
	#-----------------------------------------------------------------------------------------

	my $haveNonGlottableFilesLog = 0;
	my $appleGlotEnv = AALocEnvUtilities::GetAppleGlotEnvFromLocEnv($inLocEnvPath);
	my $nonGlotableLogFilePath = $inLocEnvPath . "$appleGlotEnv/_Logs/nonGlotableLog.txt";

	if (-e $nonGlotableLogFilePath)
	{
		open(NONGLOTABLELOGFILECONTENT, "<$nonGlotableLogFilePath") or die "Cannot open '$nonGlotableLogFilePath': $!";
			@nonGlotableFileContent = <NONGLOTABLELOGFILECONTENT>;
		close(NONGLOTABLELOGFILECONTENT);
		
		$haveNonGlottableFilesLog = 1;
	}
	else
	{
		$haveNonGlottableFilesLog = 0;
		AALocUtilities::PrintLog("### WARNING: Cannot find Non-Glottable log file\n");
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $sourceFolder;
	my $targeFolder;


	for ($locEnvironmentNumber = 0; $locEnvironmentNumber < $numberOfEnvironments; $locEnvironmentNumber++)
	{
		my $newLocEnvPath = $directoryPath . "/" . $locEnv . "_" . $projectName . "_" . $buildNumber . "_" . $locSubmitNumber . "_" . $countryCode. "_" . $environments[$locEnvironmentNumber] . "/";
		my $newAppleGlotEnvName = "AG_" . $projectName . "_" . $buildNumber . "_"
									. $locSubmitNumber . "_" . $countryCode . "_" . $environments[$locEnvironmentNumber];


		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Splitting to $newLocEnvPath\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

		
		AALocFileUtilities::RemoveFileAndFolder($newLocEnvPath);
		AALocFileUtilities::CreateFolderIfNotExist($newLocEnvPath);


		AALocUtilities::PrintLog("Copying autoFtp-template.txt\n");
		AALocFileUtilities::CopyFile($inLocEnvPath . "autoFtp-template.txt", $newLocEnvPath . "autoFtp-template.txt", kNotOpen);


		AALocUtilities::PrintLog("Copying _CheckList_$countryCode\n");
		$sourceFolder = $inLocEnvPath . "_CheckList_" . $countryCode;
		$targeFolder = $newLocEnvPath . "_CheckList_" . $countryCode;
		`ditto "$sourceFolder" "$targeFolder"`;
	
		
		AALocUtilities::PrintLog("Creating _History\n");
		$targeFolder = $newLocEnvPath . "_History";
		AALocFileUtilities::CreateFolderIfNotExist($targeFolder);
		
		
		AALocUtilities::PrintLog("Copying _LKCXInfo\n");
		$sourceFolder = $inLocEnvPath . "_LKCXInfo";
		$targeFolder = $newLocEnvPath . "_LKCXInfo";
		`ditto "$sourceFolder" "$targeFolder"`;
	
		
		AALocUtilities::PrintLog("Creating _Reports_$countryCode\n");
		$targeFolder = $newLocEnvPath . "_Reports_" . $countryCode;
		AALocFileUtilities::CreateFolderIfNotExist($targeFolder);
		AALocFileUtilities::CopyFile($inLocEnvPath . "_Reports_" . $countryCode . "/autoFtp_" . $countryCode . ".txt",
					$newLocEnvPath . "_Reports_" . $countryCode . "/autoFtp_" . $countryCode . ".txt",
					kNotOpen);
		AALocFileUtilities::CopyFile($inLocEnvPath . "_Reports_" . $countryCode . "/locToolsEnvInfo.txt",
					$newLocEnvPath . "_Reports_" . $countryCode . "/locToolsEnvInfo.txt",
					kNotOpen);
		
		
		AALocUtilities::PrintLog("Creating $newAppleGlotEnvName\n");
		my $newAppleGlotPath = $newLocEnvPath . $newAppleGlotEnvName . "/";
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath);
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_ApplicationDictionaries");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_LanguageGlossaries");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_Logs");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_NewBase");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_NewLoc");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_OldBase");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_OldLoc");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_Projects");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_Rules");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_Temporary");
		AALocFileUtilities::CreateFolderIfNotExist($newAppleGlotPath . "_Translators");

		
		AALocUtilities::PrintLog("Creating Components\n");
		$targeFolder = $newLocEnvPath . "Components";
		AALocFileUtilities::CreateFolderIfNotExist($targeFolder);
	
		
		AALocUtilities::PrintLog("Creating Glossaries\n");
		$targeFolder = $newLocEnvPath . "Glossaries";
		AALocFileUtilities::CreateFolderIfNotExist($targeFolder);
		
		
		AALocUtilities::PrintLog("Copying GlotEnv\n");
		$sourceFolder = $inLocEnvPath . "GlotEnv";
		$targeFolder = $newLocEnvPath . "GlotEnv";
		`ditto "$sourceFolder" "$targeFolder"`;


		AALocUtilities::PrintLog("Copying Info\n");
		$sourceFolder = $inLocEnvPath . "Info";
		$targeFolder = $newLocEnvPath . "Info";
		`ditto "$sourceFolder" "$targeFolder"`;
		
		
		AALocUtilities::PrintLog("Copying Info_Org\n");
		$sourceFolder = $inLocEnvPath . "Info_Org";
		$targeFolder = $newLocEnvPath . "Info_Org";
		`ditto "$sourceFolder" "$targeFolder"`;
		
		
		AALocUtilities::PrintLog("Copying loc_site_perl\n");
		$sourceFolder = $inLocEnvPath . "loc_site_perl";
		$targeFolder = $newLocEnvPath . "loc_site_perl";
		`ditto "$sourceFolder" "$targeFolder"`;
		
		
		AALocUtilities::PrintLog("Copying locbin\n");
		$sourceFolder = $inLocEnvPath . "locbin";
		$targeFolder = $newLocEnvPath . "locbin";
		`ditto "$sourceFolder" "$targeFolder"`;
		
		
		AALocUtilities::PrintLog("Copying Projects\n");
		$sourceFolder = $inLocEnvPath . "Projects";
		$targeFolder = $newLocEnvPath . "Projects";
		`ditto "$sourceFolder" "$targeFolder"`;
		
		
		AALocUtilities::PrintLog("Copying Projects_US\n");
		$sourceFolder = $inLocEnvPath . "Projects_US";
		$targeFolder = $newLocEnvPath . "Projects_US";
		`ditto "$sourceFolder" "$targeFolder"`;
	
		
		AALocUtilities::PrintLog("Creating TarOut\n");
		$targeFolder = $newLocEnvPath . "TarOut";
		AALocFileUtilities::CreateFolderIfNotExist($targeFolder);
	
		
		AALocUtilities::PrintLog("Creating TranslationKitSubmit\n");
		$targeFolder = $newLocEnvPath . "TranslationKitSubmit";
		AALocFileUtilities::CreateFolderIfNotExist($targeFolder);
		
		
		my $locEnvGlotEnvNewBasePath = $newLocEnvPath . "GlotEnv/_NewBase/";
		my $locEnvGlotEnvOutboundGlossariesPath = $newLocEnvPath . "GlotEnv/.OutboundGlossaries/";
		
		my $locEnvInfoComponentDataPath = $newLocEnvPath . "Info/ComponentData/";
		my $locEnvInfoProjectsPath = $newLocEnvPath . "Info/Projects/";
		my $locEnvInfoBugFixCommentsPath = $inLocEnvPath . "Info/BugFixComments/";
		my $locEnvInfoOrgComponentDataPath = $newLocEnvPath . "Info_Org/ComponentData/";
		my $locEnvInfoOrgProjectsPath = $newLocEnvPath . "Info_Org/Projects/";
		my $locEnvInfoOrgBugFixCommentsPath = $inLocEnvPath . "Info_Org/BugFixComments/";

		my $locEnvProjectsPath = $newLocEnvPath . "Projects/";
		my $locEnvProjectsUSPath = $newLocEnvPath . "Projects_US/";

		my $locEnvLKCXInfoComponentDataPath = $newLocEnvPath . "_LKCXInfo/_ComponentData/";
		my $locEnvLKCXInfoAutoLayoutAdjusterLogPath = $newLocEnvPath . "_LKCXInfo/autolayoutadjuster_log/";
		my $locEnvLKCXInfoFlidentifierResultPath = $newLocEnvPath . "_LKCXInfo/flidentifier_result/";


		AALocUtilities::PrintLog("\n");

		foreach $componentName (sort keys %componentList)
		{
			$kitNumber = %componentList->{$componentName};
		
			if ($kitNumber eq $environments[$locEnvironmentNumber])
			{
				AALocUtilities::PrintLog("Copying component $componentName\n");

				CopyComponentFromAppeleGlotEnvironment($appleGlotEnvPath, $newAppleGlotPath, $componentName);
			}
			else
			{
				my $filePath;

				#-----------------------------------------------------------------------------
				#	GlotEnv
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvGlotEnvNewBasePath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvGlotEnvOutboundGlossariesPath . $componentName . ".cpgz");


				#-----------------------------------------------------------------------------
				#	Info
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvInfoComponentDataPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvInfoProjectsPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvInfoBugFixCommentsPath . $componentName);
				AALocFileUtilities::RemoveFolder($locEnvInfoOrgComponentDataPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvInfoOrgProjectsPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvInfoOrgBugFixCommentsPath . $componentName);

			
				#-----------------------------------------------------------------------------
				#	Projects
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvProjectsPath . $componentName . "_Tier1_proj");
				AALocFileUtilities::RemoveFolder($locEnvProjectsPath . $componentName . "_Tier2_proj");
				AALocFileUtilities::RemoveFolder($locEnvProjectsUSPath . $componentName . "_Tier1_proj");
				AALocFileUtilities::RemoveFolder($locEnvProjectsUSPath . $componentName . "_Tier2_proj");

			
				#-----------------------------------------------------------------------------
				#	LKCXInfo
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvLKCXInfoComponentDataPath . $componentName);
				AALocFileUtilities::RemoveFolder($locEnvLKCXInfoAutoLayoutAdjusterLogPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvLKCXInfoFlidentifierResultPath . $componentName . ".txt");
			}
		}


		#-------------------------------------------------------------------------------------
		#	Set AppleGlot Language
		#-------------------------------------------------------------------------------------

		$language = $AALocUtilities::kCountryCode2AGLanguageCode{$countryCode};

		if ($language ne "")
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("Set AppleGlot Env language to $language\n");
			`$gAppleGlotCLPath -d "$newAppleGlotPath" setlangs en $language`;
		}
		else
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("ERROR: Cannot get language code of AppleGlot environment\n");
		}


		#-------------------------------------------------------------------------------------
		#	Build File List
		#-------------------------------------------------------------------------------------
		
		BuildAllFileList($newAppleGlotPath);


		#-------------------------------------------------------------------------------------
		#	Process Non-Glottable log file
		#-------------------------------------------------------------------------------------
		
		if ($haveNonGlottableFilesLog == 1)
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
			AALocUtilities::PrintLog("# Process Non-Glottable log file\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	
			my $newNonGlotableLogFilePath = $newAppleGlotPath . "_Logs/nonGlotableLog.txt";
	
			open nonGlotableLogFile, "> $newNonGlotableLogFilePath" or die "Failed to open $newNonGlotableLogFilePath\n";
			
			foreach $line(@nonGlotableFileContent)
			{
				foreach $componentName (sort keys %componentList)
				{
					$kitNumber = %componentList->{$componentName};
					
					if ($kitNumber eq $environments[$locEnvironmentNumber])
					{
						if ($line =~ m/\/$componentName\//)
						{
							AALocUtilities::PrintLog("Processing $componentName\n");
							
							print nonGlotableLogFile "$line";
							last;
						}
					}
				}
			}
	
			close nonGlotableLogFile;
		}
		else
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("No Non-Glottable log file\n");
			AALocUtilities::PrintLog("\n");
		}
		
		
		#-------------------------------------------------------------------------------------
		#	Command Line File
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Creating command line file\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		my $commandLineFilePath = $newLocEnvPath . "CommandLine.rtf";
		CreateCommandLineFile($newLocEnvPath, $commandLineFilePath);

	
		#-----------------------------------------------------------------------------------------
		#
		#-----------------------------------------------------------------------------------------
	
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Set permission of LocEnv folder\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		system "chmod -R 777 $newLocEnvPath";
		
		
		#-------------------------------------------------------------------------------------
		#	Make Disk Image
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Making disk image\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		MakeDiskImage($newLocEnvPath);
	}
}


#---------------------------------------------------------------------------------------------
#	SplitLocEnvOld
#---------------------------------------------------------------------------------------------

sub SplitLocEnvOld
{
	my($inLocEnvPath, $inComponentListPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc Env $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inComponentListPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified component list $inComponentListPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $numberOfEnvironments = 0;

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Split Loc Environment\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#	Read Component List
	#-----------------------------------------------------------------------------------------

	my %componentList = ();
	my @environments;
	my $readEnvironments = 0;


	my $saveRS = $/;
	undef $/;

	open(FILECONTENT, "<$inComponentListPath") or die "Cannot open '$inComponentListPath': $!";
		@fileContent = split /[\n\r]/, <FILECONTENT>;
	close(FILECONTENT);
	
	$/ = $saveRS;

			
	foreach $line(@fileContent)
	{
		if ($numberOfEnvironments == 0)
		{
			$numberOfEnvironments = $line;
		}
		else
		{
			if ($readEnvironments < $numberOfEnvironments)
			{
				chomp($line);
				$environments[$readEnvironments] = $line;
				$readEnvironments++;
			}
			else
			{
				$line =~ m/^(.*?)\t(.*?)$/;
				my ($componentName, $environmentName) = ($1, $2);
				
				%componentList->{$componentName} = $environmentName;
			}
		}
	}


	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print "Number of Loc Env = $numberOfEnvironments\n";
		
		for ($locEnvironmentNumber = 0; $locEnvironmentNumber < $numberOfEnvironments; $locEnvironmentNumber++)
		{
			print "$environments[$locEnvironmentNumber]\n";
		}

		foreach $componentName (sort keys %componentList)
		{
			$number = %componentList->{$componentName};
		
			print "$componentName = $number\n";
		}
	}
	#-----------------------------------------------------------------------------------------


	my $directoryPath = dirname($inLocEnvPath);
	my $locEnvName = AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath);
	
	$locEnvName =~ m/^(.*?)_(.*?)_(.*?)_(.*?)_(.*?)_(.*?)$/;
	my ($locEnv, $projectName, $buildNumber, $locSubmitNumber, $countryCode, $localizer) = ($1, $2, $3, $4, $5, $6);



	#-----------------------------------------------------------------------------------------
	#	Read Non-Glottable Files Log
	#-----------------------------------------------------------------------------------------

	my $haveNonGlottableFilesLog = 0;
	my $appleGlotEnv = AALocEnvUtilities::GetAppleGlotEnvFromLocEnv($inLocEnvPath);
	my $nonGlotableLogFilePath = $inLocEnvPath . "$appleGlotEnv/_Logs/nonGlotableLog.txt";

	if (-e $nonGlotableLogFilePath)
	{
		open(NONGLOTABLELOGFILECONTENT, "<$nonGlotableLogFilePath") or die "Cannot open '$nonGlotableLogFilePath': $!";
			@nonGlotableFileContent = <NONGLOTABLELOGFILECONTENT>;
		close(NONGLOTABLELOGFILECONTENT);
		
		$haveNonGlottableFilesLog = 1;
	}
	else
	{
		$haveNonGlottableFilesLog = 0;
		AALocUtilities::PrintLog("### WARNING: Cannot find Non-Glottable log file\n");
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	for ($locEnvironmentNumber = 0; $locEnvironmentNumber < $numberOfEnvironments; $locEnvironmentNumber++)
	{
		my $newLocEnvPath = $directoryPath . "/" . $locEnv . "_" . $projectName . "_" . $buildNumber . "_" . $locSubmitNumber . "_" . $countryCode. "_" . $environments[$locEnvironmentNumber] . "/";
			
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Splitting to $newLocEnvPath\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

		
		AALocFileUtilities::RemoveFileAndFolder($newLocEnvPath);
		`ditto "$inLocEnvPath" "$newLocEnvPath"`;
		
		
		my $locEnvAppleGlotPath = $newLocEnvPath . "$appleGlotEnv/";
		my $locEnvInfoComponentDataPath = $newLocEnvPath . "Info/ComponentData/";
		my $locEnvInfoProjectsPath = $newLocEnvPath . "Info/Projects/";
		my $locEnvInfoOrgComponentDataPath = $newLocEnvPath . "Info_Org/ComponentData/";
		my $locEnvInfoOrgProjectsPath = $newLocEnvPath . "Info_Org/Projects/";

		my $locEnvProjectsPath = $newLocEnvPath . "Projects/";
		my $locEnvProjectsUSPath = $newLocEnvPath . "Projects_US/";

		my $locEnvLKCXInfoComponentDataPath = $newLocEnvPath . "_LKCXInfo/_ComponentData/";
		my $locEnvLKCXInfoAutoLayoutAdjusterLogPath = $newLocEnvPath . "_LKCXInfo/autolayoutadjuster_log/";
		my $locEnvLKCXInfoFlidentifierResultPath = $newLocEnvPath . "_LKCXInfo/flidentifier_result/";


		foreach $componentName (sort keys %componentList)
		{
			$kitNumber = %componentList->{$componentName};
		
			if ($kitNumber eq $environments[$locEnvironmentNumber])
			{
				AALocUtilities::PrintLog("$componentName\n");
			}
			else
			{
				my $filePath;
			
				#-----------------------------------------------------------------------------
				#	AppleGlot Environment
				#-----------------------------------------------------------------------------

				RemoveComponentFromAppeleGlotEnvironment($locEnvAppleGlotPath, $componentName);


				#-----------------------------------------------------------------------------
				#	Nib Screenshots
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvAppleGlotPath . "NibScreenshot/" . $componentName);
				AALocFileUtilities::RemoveFolder($locEnvAppleGlotPath . "UpdatedNibScreenshot/" . $componentName);


				#-----------------------------------------------------------------------------
				#	Info
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvInfoComponentDataPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvInfoProjectsPath . $componentName);
				AALocFileUtilities::RemoveFolder($locEnvInfoOrgComponentDataPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvInfoOrgProjectsPath . $componentName);

			
				#-----------------------------------------------------------------------------
				#	Projects
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvProjectsPath . $componentName . "_Tier1_proj");
				AALocFileUtilities::RemoveFolder($locEnvProjectsPath . $componentName . "_Tier2_proj");
				AALocFileUtilities::RemoveFolder($locEnvProjectsUSPath . $componentName . "_Tier1_proj");
				AALocFileUtilities::RemoveFolder($locEnvProjectsUSPath . $componentName . "_Tier2_proj");

			
				#-----------------------------------------------------------------------------
				#	LKCXInfo
				#-----------------------------------------------------------------------------

				AALocFileUtilities::RemoveFolder($locEnvLKCXInfoComponentDataPath . $componentName);
				AALocFileUtilities::RemoveFolder($locEnvLKCXInfoAutoLayoutAdjusterLogPath . $componentName);
				AALocFileUtilities::RemoveFile($locEnvLKCXInfoFlidentifierResultPath . $componentName . ".txt");
			}
		}


		#-------------------------------------------------------------------------------------
		#	Rename AppleGlot
		#-------------------------------------------------------------------------------------

		my $newAppleGlotPath = $newLocEnvPath . "AG_" . $projectName . "_" . $buildNumber . "_"
								. $locSubmitNumber . "_" . $countryCode . "_" . $environments[$locEnvironmentNumber] . "/";
		rename $locEnvAppleGlotPath, $newAppleGlotPath;


		#-------------------------------------------------------------------------------------
		#	Set AppleGlot Language
		#-------------------------------------------------------------------------------------

		$language = $AALocUtilities::kCountryCode2AGLanguageCode{$countryCode};

		if ($language ne "")
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("Set AppleGlot Env language to $language\n");
			`$gAppleGlotCLPath -d "$newAppleGlotPath" setlangs en $language`;
		}
		else
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("ERROR: Cannot get language code of AppleGlot environment\n");
		}


		#-------------------------------------------------------------------------------------
		#	Build File List
		#-------------------------------------------------------------------------------------
		
		BuildAllFileList($newAppleGlotPath);


		#-------------------------------------------------------------------------------------
		#	Process Non-Glottable log file
		#-------------------------------------------------------------------------------------
		
		if ($haveNonGlottableFilesLog == 1)
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
			AALocUtilities::PrintLog("# Process Non-Glottable log file\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	
			my $newNonGlotableLogFilePath = $newAppleGlotPath . "_Logs/nonGlotableLog.txt";
	
			open nonGlotableLogFile, "> $newNonGlotableLogFilePath" or die "Failed to open $newNonGlotableLogFilePath\n";
			
			foreach $line(@nonGlotableFileContent)
			{
				foreach $componentName (sort keys %componentList)
				{
					$kitNumber = %componentList->{$componentName};
					
					if ($kitNumber eq $environments[$locEnvironmentNumber])
					{
						if ($line =~ m/\/$componentName\//)
						{
							AALocUtilities::PrintLog("Processing $componentName\n");
							
							print nonGlotableLogFile "$line";
							last;
						}
					}
				}
			}
	
			close nonGlotableLogFile;
		}
		else
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("No Non-Glottable log file\n");
			AALocUtilities::PrintLog("\n");
		}
		
		
		#-------------------------------------------------------------------------------------
		#	Command Line File
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Creating command line file\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		my $commandLineFilePath = $newLocEnvPath . "CommandLine.rtf";
		CreateCommandLineFile($newLocEnvPath, $commandLineFilePath);

	
		#-----------------------------------------------------------------------------------------
		#
		#-----------------------------------------------------------------------------------------
	
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Set permission of LocEnv folder\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		system "chmod -R 777 $inLocEnvPath";
		
		
		#-------------------------------------------------------------------------------------
		#	Make Disk Image
		#-------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Making disk image\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		
		MakeDiskImage($newLocEnvPath);
	}
}


#---------------------------------------------------------------------------------------------
#	MergeLocEnv
#---------------------------------------------------------------------------------------------

sub MergeLocEnv
{
	my($inLocEnvPath, $inLocEnvListPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc Env $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inLocEnvListPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc env list $inLocEnvListPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $numberOfEnvironments = 0;

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Merge Loc Environment\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#	Read Loc Env List
	#-----------------------------------------------------------------------------------------

	my @environments;
	my $numberOfEnvironments = 0;


	open(FILECONTENT, "<$inLocEnvListPath") or die "Cannot open '$inLocEnvListPath': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	foreach $line(@fileContent)
	{
		chomp($line);
		$environments[$numberOfEnvironments] = $line;
		$numberOfEnvironments++;
	}


	#--Debug----------------------------------------------------------------------------------
	if ($gDebug)
	{
		print "Number of Loc Env = $numberOfEnvironments\n";
		
		for ($locEnvironmentNumber = 0; $locEnvironmentNumber < $numberOfEnvironments; $locEnvironmentNumber++)
		{
			print "$environments[$locEnvironmentNumber]\n";
		}
	}
	#-----------------------------------------------------------------------------------------


	my $directoryPath = dirname($inLocEnvPath);
	my $locEnvName = AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath);
	
	$locEnvName =~ m/^(.*?)_(.*?)_(.*?)_(.*?)_(.*?)_(.*?)$/;
	my ($locEnv, $projectName, $buildNumber, $locSubmitNumber, $countryCode, $localizer) = ($1, $2, $3, $4, $5, $6);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $newAppleGlotEnvPath;
	my $reportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath);
	my $appleGlotLogPath = $appleGlotEnvPath . "_Logs/";
	my $tempReceiveTranKitLogFilePath = $inLocEnvPath . "TranslationKitSubmit_receiveTranslationKitLog.txt";
	my $receiveTranKitLogFilePath = $reportsPath . "TranslationKitSubmit_receiveTranslationKitLog.txt";
	my $tempNonGlotableLogFilePath = $inLocEnvPath . "nonGlotableLog.txt";
	my $nonGlotableLogFilePath = $appleGlotEnvPath . "_Logs/nonGlotableLog.txt";
	my $tempCompareNibBeforeAfterResultFilePath = $inLocEnvPath . "compare_nib_before_after_result.txt";
	my $compareNibBeforeAfterResultFilePath = $appleGlotEnvPath . "_Logs/AutoLayout_Log/compare_nib_before_after_result.txt";
	my $tempCompareNibBeforeAfterResultCopyFilePath = $inLocEnvPath . "compare_nib_before_after_result.txt_copy";
	my $compareNibBeforeAfterResultCopyFilePath = $appleGlotEnvPath . "_Logs/AutoLayout_Log/compare_nib_before_after_result.txt_copy";


	system "echo -n '' > $tempReceiveTranKitLogFilePath";
	system "echo -n '' > $tempNonGlotableLogFilePath";
	system "echo -n '' > $tempCompareNibBeforeAfterResultFilePath";
	system "echo -n '' > $tempCompareNibBeforeAfterResultCopyFilePath";
	

	for ($locEnvironmentNumber = 0; $locEnvironmentNumber < $numberOfEnvironments; $locEnvironmentNumber++)
	{
		# my $newLocEnvPath = $directoryPath . "/" . $locEnv . "_" . $projectName . "_" . $buildNumber . "_" . $locSubmitNumber . "_" . $countryCode. "_" . $environments[$locEnvironmentNumber] . "/";
		my $newLocEnvPath = $directoryPath . "/" . $environments[$locEnvironmentNumber] . "/";
			
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Merging from $newLocEnvPath\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");


		#-----------------------------------------------------------------------------------------
		#	Copy LocEnv
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Copying LocEnv\n");
		`ditto "$newLocEnvPath" "$inLocEnvPath"`;

		
		#-----------------------------------------------------------------------------------------
		#	Copy AppleGlot Env
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Copying AppleGlot Env\n");
		$newAppleGlotEnvPath = $inLocEnvPath . AALocEnvUtilities::GetAppleGlotEnvFromLocEnv($newLocEnvPath) . "/";
		`ditto "$newAppleGlotEnvPath" "$appleGlotEnvPath"`;
		AALocFileUtilities::RemoveFolder($newAppleGlotEnvPath);

		
		#-----------------------------------------------------------------------------------------
		#	Read Non-glottable file list
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Merging non-glottable file list\n");
		my $newNonGlotableLogFilePath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($newLocEnvPath) . "_Logs/nonGlotableLog.txt";

		`cat $newNonGlotableLogFilePath >> $tempNonGlotableLogFilePath`;


		#-----------------------------------------------------------------------------------------
		#	Merge Transation Kit Submit Log
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Merging Translation Kit Submit Log file\n");
		my $newTranslationKitSubmitLogFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($newLocEnvPath) . "TranslationKitSubmit_receiveTranslationKitLog.txt";

		`cat $newTranslationKitSubmitLogFilePath >> $tempReceiveTranKitLogFilePath`;


		#-----------------------------------------------------------------------------------------
		#	Merge ALA Log
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Merging ALA Log file");
		my $newCompareNibBeforeAfterResultFilePath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($newLocEnvPath) . "_Logs/AutoLayout_Log/compare_nib_before_after_result.txt";
		my $newCompareNibBeforeAfterResultCopyFilePath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($newLocEnvPath) . "_Logs/AutoLayout_Log/compare_nib_before_after_result.txt_copy";

		`cat $newCompareNibBeforeAfterResultFilePath >> $tempCompareNibBeforeAfterResultFilePath`;
		`cat $newCompareNibBeforeAfterResultCopyFilePath >> $tempCompareNibBeforeAfterResultCopyFilePath`;


		#-----------------------------------------------------------------------------------------
		#	Remove 
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("Removing reports");

		$newAppleGlotEnvName = AALocEnvUtilities::GetAppleGlotEnvFromLocEnv($newLocEnvPath);
		
		chomp(@searchResult = `find $reportsPath -type f \\( -path "*/$newAppleGlotEnvName*" \\)`);
		
		foreach $file (@searchResult)
		{
			AALocFileUtilities::RemoveFile($file);
		}
		
		chomp(@searchResult = `find $appleGlotLogPath -type f \\( -path "*/$newAppleGlotEnvName*" \\)`);
		
		foreach $file (@searchResult)
		{
			AALocFileUtilities::RemoveFile($file);
		}
	}


	#-------------------------------------------------------------------------------------
	#	
	#-------------------------------------------------------------------------------------

	AALocFileUtilities::CopyFile($tempReceiveTranKitLogFilePath, $receiveTranKitLogFilePath, kNotOpen);
	AALocFileUtilities::RemoveFile($tempReceiveTranKitLogFilePath);

	AALocFileUtilities::CopyFile($tempNonGlotableLogFilePath, $nonGlotableLogFilePath, kNotOpen);
	AALocFileUtilities::RemoveFile($tempNonGlotableLogFilePath);

	AALocFileUtilities::CopyFile($tempCompareNibBeforeAfterResultFilePath, $compareNibBeforeAfterResultFilePath, kNotOpen);
	AALocFileUtilities::RemoveFile($tempCompareNibBeforeAfterResultFilePath);

	AALocFileUtilities::CopyFile($tempCompareNibBeforeAfterResultCopyFilePath, $compareNibBeforeAfterResultCopyFilePath, kNotOpen);
	AALocFileUtilities::RemoveFile($tempCompareNibBeforeAfterResultCopyFilePath);


	#-------------------------------------------------------------------------------------
	#
	#-------------------------------------------------------------------------------------

	CleanupAppleGlotOldADandTemp($appleGlotEnvPath);
	CleanupAppleGlotProj($appleGlotEnvPath);


	#-------------------------------------------------------------------------------------
	#	Set AppleGlot Language
	#-------------------------------------------------------------------------------------

	$language = $AALocUtilities::kCountryCode2AGLanguageCode{$countryCode};

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Set AppleGlot Env Language ($language)\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	if ($language ne "")
	{
		AALocUtilities::PrintLog("Set AppleGlot Env language to $language\n");
		`$gAppleGlotCLPath -d "$appleGlotEnvPath" setlangs en $language`;
	}
	else
	{
		AALocUtilities::PrintLog("ERROR: Cannot get language code of AppleGlot environment\n");
	}


	#-------------------------------------------------------------------------------------
	#	Build File List
	#-------------------------------------------------------------------------------------

	BuildAllFileList($appleGlotEnvPath);


	#-------------------------------------------------------------------------------------
	#	Remove ALA changes log
	#-------------------------------------------------------------------------------------

	my $alaChangesLogFilePath = $inLocEnvPath . "_LKCXInfo/alaChangesLog";
	my $agALAChangesLogFilePath = $appleGlotEnvPath . "_Logs/AutoLayout_Log/alaChangesLog";

	AALocFileUtilities::RemoveFile($alaChangesLogFilePath);
	AALocFileUtilities::RemoveFile($agALAChangesLogFilePath);

	
	#-----------------------------------------------------------------------------------------
	#	Create Command Line File
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Create Command Line File\n");

	my $commandLineFilePath = $inLocEnvPath . "CommandLine.rtf";

	CreateCommandLineFile($inLocEnvPath, $commandLineFilePath);
}


#---------------------------------------------------------------------------------------------
#	CopyComponentFromAppeleGlotEnvironment
#---------------------------------------------------------------------------------------------

sub CopyComponentFromAppeleGlotEnvironment
{
	my($inSourcAppleGlotEnvironment, $inTargetAppleGlotEnvironment, $inComponentName) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inSourcAppleGlotEnvironment"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot Environment $inSourcAppleGlotEnvironment doesn't exist.\n");
		return;
	}

	if (!(-d "$inTargetAppleGlotEnvironment"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot Environment $inTargetAppleGlotEnvironment doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $sourceAppleGlotADPath = $inSourcAppleGlotEnvironment . "_ApplicationDictionaries/";
	my $sourceAppleGlotLogPath = $inSourcAppleGlotEnvironment . "_Logs/";
	my $sourceAppleGlotNonGlotablePath = $inSourcAppleGlotEnvironment . "_NonGlotable/";
	my $sourceAppleGlotNonGlotableOrgPath = $inSourcAppleGlotEnvironment . "_NonGlotable_Org/";
	my $sourceAppleGlotNewBasePath = $inSourcAppleGlotEnvironment . "_NewBase/";
	my $sourceAppleGlotNewLocPath = $inSourcAppleGlotEnvironment . "_NewLoc/";
	my $sourceAppleGlotOldBasePath = $inSourcAppleGlotEnvironment . "_OldBase/";
	my $sourceAppleGlotOldLocPath = $inSourcAppleGlotEnvironment . "_OldLoc/";
	my $sourceAppleGlotProjectsPath = $inSourcAppleGlotEnvironment . "_Projects/";
	my $sourceAppleGlotWGPath = $inSourcAppleGlotEnvironment . "_WorkGlossary/";
	my $sourceAppleGlotWGOrgPath = $inSourcAppleGlotEnvironment . "_WorkGlossary_Org/";
	my $sourceAppleGlotWGNewPath = $inSourcAppleGlotEnvironment . "_WorkGlossary_New/";
	my $sourceAppleGlotWGCandidatesPath = $inSourcAppleGlotEnvironment . "_WorkGlossary_Candidates/";
	my $sourceAppleGlotWGReviewPath = $inSourcAppleGlotEnvironment . "_WorkGlossary_Review/";
	my $sourceAppleGlotWGTranitPath = $inSourcAppleGlotEnvironment . "WG_Transit/";
	my $sourceAppleGlotWGOriginPath = $inSourcAppleGlotEnvironment . "_WorkGlossary_origin/";					# Japan
	my $sourceAppleGlotWGBackupPath = $inSourcAppleGlotEnvironment . "_WorkGlossary_backup/";					# Japan
	my $sourceAppleGlotADBackupPath = $inSourcAppleGlotEnvironment . "_ApplicationDictionaries_origin/";		# Japan


	my $targetAppleGlotADPath = $inTargetAppleGlotEnvironment . "_ApplicationDictionaries/";
	my $targetAppleGlotLogPath = $inTargetAppleGlotEnvironment . "_Logs/";
	my $targetAppleGlotNonGlotablePath = $inTargetAppleGlotEnvironment . "_NonGlotable/";
	my $targetAppleGlotNonGlotableOrgPath = $inTargetAppleGlotEnvironment . "_NonGlotable_Org/";
	my $targetAppleGlotNewBasePath = $inTargetAppleGlotEnvironment . "_NewBase/";
	my $targetAppleGlotNewLocPath = $inTargetAppleGlotEnvironment . "_NewLoc/";
	my $targetAppleGlotOldBasePath = $inTargetAppleGlotEnvironment . "_OldBase/";
	my $targetAppleGlotOldLocPath = $inTargetAppleGlotEnvironment . "_OldLoc/";
	my $targetAppleGlotProjectsPath = $inTargetAppleGlotEnvironment . "_Projects/";
	my $targetAppleGlotWGPath = $inTargetAppleGlotEnvironment . "_WorkGlossary/";
	my $targetAppleGlotWGOrgPath = $inTargetAppleGlotEnvironment . "_WorkGlossary_Org/";
	my $targetAppleGlotWGNewPath = $inTargetAppleGlotEnvironment . "_WorkGlossary_New/";
	my $targetAppleGlotWGCandidatesPath = $inTargetAppleGlotEnvironment . "_WorkGlossary_Candidates/";
	my $targetAppleGlotWGReviewPath = $inTargetAppleGlotEnvironment . "_WorkGlossary_Review/";
	my $targetAppleGlotWGTranitPath = $inTargetAppleGlotEnvironment . "WG_Transit/";
	my $targetAppleGlotWGOriginPath = $inTargetAppleGlotEnvironment . "_WorkGlossary_origin/";					# Japan
	my $targetAppleGlotWGBackupPath = $inTargetAppleGlotEnvironment . "_WorkGlossary_backup/";					# Japan
	my $targetAppleGlotADBackupPath = $inTargetAppleGlotEnvironment . "_ApplicationDictionaries_origin/";		# Japan



	# AD File
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotADPath . $inComponentName . ".ad", $targetAppleGlotADPath . $inComponentName . ".ad");

	# Log File
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotLogPath . $inComponentName, $targetAppleGlotLogPath . $inComponentName);
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotLogPath . $inComponentName . ".counts",
										$targetAppleGlotLogPath . $inComponentName . ".counts");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotLogPath . $inComponentName . ".txt",
										$targetAppleGlotLogPath . $inComponentName . ".txt");

	# Non-Glottable File
	AALocFileUtilities::CopyFolderIfExist($sourceAppleGlotNonGlotablePath . $inComponentName, $targetAppleGlotNonGlotablePath . $inComponentName);
	AALocFileUtilities::CopyFolderIfExist($sourceAppleGlotNonGlotableOrgPath . $inComponentName, $targetAppleGlotNonGlotableOrgPath . $inComponentName);

	# NB, NL, OB, OL
	AALocFileUtilities::CopyFolderIfExist($sourceAppleGlotNewBasePath . $inComponentName, $targetAppleGlotNewBasePath . $inComponentName);
	AALocFileUtilities::CopyFolderIfExist($sourceAppleGlotNewLocPath . $inComponentName, $targetAppleGlotNewLocPath . $inComponentName);
	AALocFileUtilities::CopyFolderIfExist($sourceAppleGlotOldBasePath . $inComponentName, $targetAppleGlotOldBasePath . $inComponentName);
	AALocFileUtilities::CopyFolderIfExist($sourceAppleGlotOldLocPath . $inComponentName, $targetAppleGlotOldLocPath . $inComponentName);

	# Project File
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotProjectsPath . $inComponentName . ".oldad", $targetAppleGlotProjectsPath . $inComponentName . ".oldad");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotProjectsPath . $inComponentName . ".temp", $targetAppleGlotProjectsPath . $inComponentName . ".temp");

	# WG File
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGPath . $inComponentName . ".wg", $targetAppleGlotWGPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGOrgPath . $inComponentName . ".wg", $targetAppleGlotWGOrgPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGNewPath . $inComponentName . ".wg", $targetAppleGlotWGNewPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGCandidatesPath . $inComponentName . ".wg", $targetAppleGlotWGCandidatesPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGReviewPath . $inComponentName . ".wg", $targetAppleGlotWGReviewPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGTranitPath . $inComponentName . ".wg", $targetAppleGlotWGTranitPath . $inComponentName . ".wg");

	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGOriginPath . $inComponentName . ".wg", $targetAppleGlotWGOriginPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotWGBackupPath . $inComponentName . ".wg", $targetAppleGlotWGBackupPath . $inComponentName . ".wg");
	AALocFileUtilities::CopyFileIfExist($sourceAppleGlotADBackupPath . $inComponentName . ".ad", $targetAppleGlotADBackupPath . $inComponentName . ".ad");


	AALocFileUtilities::CopyFolderIfExist($inSourcAppleGlotEnvironment . "NibScreenshot/" . $inComponentName,
											$inTargetAppleGlotEnvironment . "NibScreenshot/" . $inComponentName);
	AALocFileUtilities::CopyFolderIfExist($inSourcAppleGlotEnvironment . "UpdatedNibScreenshot/" . $inComponentName,
											$inTargetAppleGlotEnvironment . "UpdatedNibScreenshot/" . $inComponentName);
}


#---------------------------------------------------------------------------------------------
#	RemoveComponentFromAppeleGlotEnvironment
#---------------------------------------------------------------------------------------------

sub RemoveComponentFromAppeleGlotEnvironment
{
	my($inAppleGlotEnvironment, $inComponentName) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvironment"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot Environment $inAppleGlotEnvironment doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotADPath = $inAppleGlotEnvironment . "_ApplicationDictionaries/";
	my $appleGlotLogPath = $inAppleGlotEnvironment . "_Logs/";
	my $appleGlotNonGlotablePath = $inAppleGlotEnvironment . "_NonGlotable/";
	my $appleGlotNonGlotableOrgPath = $inAppleGlotEnvironment . "_NonGlotable_Org/";
	my $appleGlotNewBasePath = $inAppleGlotEnvironment . "_NewBase/";
	my $appleGlotNewLocPath = $inAppleGlotEnvironment . "_NewLoc/";
	my $appleGlotNewLocOrgPath = $inAppleGlotEnvironment . "_NewLoc_Org/";
	my $appleGlotOldBasePath = $inAppleGlotEnvironment . "_OldBase/";
	my $appleGlotOldLocPath = $inAppleGlotEnvironment . "_OldLoc/";
	my $appleGlotProjectsPath = $inAppleGlotEnvironment . "_Projects/";
	my $appleGlotWGPath = $inAppleGlotEnvironment . "_WorkGlossary/";
	my $appleGlotWGOrgPath = $inAppleGlotEnvironment . "_WorkGlossary_Org/";
	my $appleGlotWGNewPath = $inAppleGlotEnvironment . "_WorkGlossary_New/";
	my $appleGlotWGCandidatesPath = $inAppleGlotEnvironment . "_WorkGlossary_Candidates/";
	my $appleGlotWGReviewPath = $inAppleGlotEnvironment . "_WorkGlossary_Review/";
	my $appleGlotWGTranitPath = $inAppleGlotEnvironment . "WG_Transit/";
	my $appleGlotReviewedWGPath = $inAppleGlotEnvironment . "Reviewed_WG/";
	my $appleGlotWGOriginPath = $inAppleGlotEnvironment . "_WorkGlossary_origin/";					# Japan
	my $appleGlotWGBackupPath = $inAppleGlotEnvironment . "_WorkGlossary_backup/";					# Japan
	my $appleGlotADBackupPath = $inAppleGlotEnvironment . "_ApplicationDictionaries_origin/";		# Japan



	# AD File
	AALocFileUtilities::RemoveFile($appleGlotADPath . $inComponentName . ".ad");

	# Log File
	AALocFileUtilities::RemoveFile($appleGlotLogPath . $inComponentName);
	AALocFileUtilities::RemoveFile($appleGlotLogPath . $inComponentName . ".counts");
	AALocFileUtilities::RemoveFile($appleGlotLogPath . $inComponentName . ".txt");

	# Non-Glottable File
	AALocFileUtilities::RemoveFolder($appleGlotNonGlotablePath . $inComponentName);
	AALocFileUtilities::RemoveFolder($appleGlotNonGlotableOrgPath . $inComponentName);

	# NB, NL, OB, OL
	AALocFileUtilities::RemoveFolder($appleGlotNewBasePath . $inComponentName);
	AALocFileUtilities::RemoveFolder($appleGlotNewLocPath . $inComponentName);
	AALocFileUtilities::RemoveFolder($appleGlotNewLocOrgPath . $inComponentName);
	AALocFileUtilities::RemoveFolder($appleGlotOldBasePath . $inComponentName);
	AALocFileUtilities::RemoveFolder($appleGlotOldLocPath . $inComponentName);

	# Project File
	AALocFileUtilities::RemoveFile($appleGlotProjectsPath . $inComponentName . ".oldad");
	AALocFileUtilities::RemoveFile($appleGlotProjectsPath . $inComponentName . ".temp");

	# WG File
	AALocFileUtilities::RemoveFile($appleGlotWGPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotWGOrgPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotWGNewPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotWGCandidatesPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotWGReviewPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotWGTranitPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotReviewedWGPath . $inComponentName . ".wg");

	AALocFileUtilities::RemoveFile($appleGlotWGOriginPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotWGBackupPath . $inComponentName . ".wg");
	AALocFileUtilities::RemoveFile($appleGlotADBackupPath . $inComponentName . ".ad");
}


#---------------------------------------------------------------------------------------------
#	ReceiveTranslationKit
#
#	Check whether there are missing WG files in the Engineering Pack
#	Copy translated WG files from Translation Kit (WG) to AppleGlot Environment (Transit_WG)
#
#	Check whether there are missing WG files in the Engineering Pack
#	Copy reviewed WG files from Translation Kit (WG_Org) to AppleGlot Environment (_WorkGlossary_Org)
#		compare the reviewed WG files with original
#
#	Check whether there are missing non-glottable files in the Engineering Pack
#	Copy translated non-glottable files from Translation Kit (Others) to AppleGlot Environment (_NonGlotable)
#
#	If with AD, Copy reviewed AD files from Translation Kit (AD)
#		to AppleGlot Environment (AD)
#		compare the reviewed AD files with original
#---------------------------------------------------------------------------------------------

sub ReceiveTranslationKit
{
	my($inAppleGlotEnvPath, $inTranslationKitPath, $inWithAD) = @_;
	my $outNumOfErrors = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return 1;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return 1;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Receive Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvironmentLanguage = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";
	my $appleGlotEnvTransitWGPath = $inAppleGlotEnvPath . "Transit_WG/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $translationKitWGPath = $inTranslationKitPath . "WG/";
	my $translationKitADPath = $inTranslationKitPath . "AD/";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";
	my $translationKitWGLanguage;
	my $translationKitFilePath;
	my $appleGlotFilePath;
	

	#-----------------------------------------------------------------------------------------
	#	Process WG files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process WG files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .wg files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGTransitPath . $file;
		$translationKitFilePath = $translationKitWGPath . $file;
		
		if (!(-e "$translationKitFilePath"))
		{
			if (IsWGNeedTranslate($appleGlotFilePath))
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Cannot find $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### ERROR: Cannot find $file in Engineering Pack\n");
			}
		}
	}

	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvTransitWGPath);

	opendir(directory, $translationKitWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGTransitPath . $file;
		$translationKitFilePath = $translationKitWGPath . $file;

		if (-e "$appleGlotFilePath")
		{
			$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
			
			if ($translationKitWGLanguage eq "")
			{
				$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
			}
				
			if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
			{
				AALocUtilities::PrintLog("Copying $file\n");
				`cp "$translationKitFilePath" "$appleGlotEnvTransitWGPath$file"`;
			
				$outNumOfErrors += CheckWGFileSyntax($appleGlotEnvTransitWGPath . $file);
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
				AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
			}
		}
		else
		{
			$outNumOfErrors++;
			AALocUtilities::PrintToReport("### ERROR: Extra file $file in Engineering Pack\n");
			AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Process NonGlottable files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottalbe files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# Non Glottable files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find $appleGlotEnvNonGlotablePath -type f | grep -v ".DS_Store"`);

	foreach $file (@searchResult)
	{
		$file =~ s/$appleGlotEnvNonGlotablePath/$translationKitNonGlotablePath/;
	
		if (!(-e "$file"))
		{
			#	$outNumOfErrors++;
			AALocUtilities::PrintToReport("### WARNING: Cannot find $file\n");
			AALocUtilities::PrintLog("### WARNING: Cannot find $file\n");
		}
	}


	if (-d $translationKitNonGlotablePath)
	{
		`ditto "$translationKitNonGlotablePath" "$appleGlotEnvNonGlotablePath"`;
		
		my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";

		opendir(directory, $appleGlotEnvNewLocPath);
		@componentList = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		opendir(directory, $appleGlotEnvNonGlotablePath);
		@nonGlottableFilesList = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@nonGlottableFilesList)
		{
			my $inComponentList = 0;
			
			foreach $component (@componentList)
			{
				if ($file eq $component)
				{
					$inComponentList = 1;
					last;
				}
			}
			
			if ($inComponentList == 0)
			{
				AALocFileUtilities::RemoveFolder($appleGlotEnvNonGlotablePath . $file);
			}
			else
			{
				AALocUtilities::PrintLog("$file\n");
			}
		}
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Process AD files
	#-----------------------------------------------------------------------------------------

	if ($inWithAD)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Process AD files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


		AALocUtilities::PrintToReport("#==========================================================================\n");
		AALocUtilities::PrintToReport("# .ad files Check Result\n");
		AALocUtilities::PrintToReport("#==========================================================================\n");

		opendir(directory, $translationKitADPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@searchResult)
		{
			$appleGlotFilePath = $appleGlotEnvADPath . $file;
			$translationKitFilePath = $translationKitADPath . $file;
	
			if (-e "$appleGlotFilePath")
			{
				$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
				
				if ($translationKitWGLanguage eq "")
				{
					$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
				}

				
				if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
				{
					CompareWGFiles($appleGlotFilePath, $translationKitFilePath);

					AALocUtilities::PrintLog("Copying $file\n");
					`cp "$translationKitFilePath" "$appleGlotFilePath"`;				
			
					$outNumOfErrors += CheckWGFileSyntax($appleGlotFilePath);
				}
				else
				{
					$outNumOfErrors++;
					AALocUtilities::PrintToReport("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
					AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
				}
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Extra file $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
			}
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	ReceiveTranslationKitLKCX
#
#	Check whether there are missing WG files in the Engineering Pack
#	Copy translated WG files from Translation Kit (WG) to AppleGlot Environment (Transit_WG)
#
#	Check whether there are missing WG files in the Engineering Pack
#	Copy reviewed WG files from Translation Kit (WG_Org) to AppleGlot Environment (_WorkGlossary_Org)
#		compare the reviewed WG files with original
#
#	Check whether there are missing non-glottable files in the Engineering Pack
#	Copy translated non-glottable files from Translation Kit (Others) to AppleGlot Environment (_NonGlotable)
#
#	If with AD, Copy reviewed AD files from Translation Kit (AD)
#		to AppleGlot Environment (AD)
#		compare the reviewed AD files with original
#---------------------------------------------------------------------------------------------

sub ReceiveTranslationKitLKCX
{
	my($inAppleGlotEnvPath, $inTranslationKitPath, $inWithAD) = @_;
	my $outNumOfErrors = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return 1;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return 1;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Receive Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvironmentLanguage = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";
	my $appleGlotEnvTransitWGPath = $inAppleGlotEnvPath . "Transit_WG/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $translationKitWGPath = $inTranslationKitPath . "WG/";
	my $translationKitADPath = $inTranslationKitPath . "AD/";
	my $translationKitWGOrgPath = $inTranslationKitPath . "WG_Org/";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";
	my $translationKitWGLanguage;
	my $translationKitFilePath;
	my $appleGlotFilePath;
	

	#-----------------------------------------------------------------------------------------
	#	Process WG files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process WG files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .wg files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGTransitPath . $file;
		$translationKitFilePath = $translationKitWGPath . $file;
		
		if (!(-e "$translationKitFilePath"))
		{
			if (IsWGNeedTranslate($appleGlotFilePath))
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Cannot find $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### ERROR: Cannot find $file in Engineering Pack\n");
			}
		}
	}

	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvTransitWGPath);

	opendir(directory, $translationKitWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGTransitPath . $file;
		$translationKitFilePath = $translationKitWGPath . $file;

		if (-e "$appleGlotFilePath")
		{
			$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
			
			if ($translationKitWGLanguage eq "")
			{
				$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
			}
				
			if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
			{
				AALocUtilities::PrintLog("Copying $file\n");
				`cp "$translationKitFilePath" "$appleGlotEnvTransitWGPath$file"`;
			
				$outNumOfErrors += CheckWGFileSyntax($appleGlotEnvTransitWGPath . $file);
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
				AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
			}
		}
		else
		{
			$outNumOfErrors++;
			AALocUtilities::PrintToReport("### ERROR: Extra file $file in Engineering Pack\n");
			AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Process WG Org files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process WG Org files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	opendir(directory, $appleGlotEnvWGPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);



	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .wg Org files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGPath . $file;
		$translationKitFilePath = $translationKitWGOrgPath . $file;
		
		if (!(-e "$translationKitFilePath"))
		{
			if (IsWGNeedReview($appleGlotFilePath))
			{
				AALocUtilities::PrintToReport("### WARNING: Cannot find $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### WARNING: Cannot find $file in Engineering Pack\n");
			}
		}
	}

	opendir(directory, $translationKitWGOrgPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGPath . $file;
		$translationKitFilePath = $translationKitWGOrgPath . $file;
		
		if (-e "$appleGlotFilePath")
		{
			$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
			
			if ($translationKitWGLanguage eq "")
			{
				$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
			}

			if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
			{
				AALocUtilities::PrintLog("Copying $file\n");
				`cp "$translationKitFilePath" "$appleGlotEnvWGOrgPath$file"`;
			
				CompareWGFiles($appleGlotEnvWGPath . $file, $translationKitFilePath);
			
				$outNumOfErrors += CheckWGFileSyntax($appleGlotEnvWGOrgPath . $file);
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
				AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
			}
		}
		else
		{
			$outNumOfErrors++;
			AALocUtilities::PrintToReport("### ERROR: Extra file $file in Engineering Pack\n");
			AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Process NonGlottable files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottalbe files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# Non Glottable files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find $appleGlotEnvNonGlotablePath -type f | grep -v ".DS_Store"`);

	foreach $file (@searchResult)
	{
		$file =~ s/$appleGlotEnvNonGlotablePath/$translationKitNonGlotablePath/;
	
		if (!(-e "$file"))
		{
			#	$outNumOfErrors++;
			AALocUtilities::PrintToReport("### WARNING: Cannot find $file\n");
			AALocUtilities::PrintLog("### WARNING: Cannot find $file\n");
		}
	}


	if (-d $translationKitNonGlotablePath)
	{
		`ditto "$translationKitNonGlotablePath" "$appleGlotEnvNonGlotablePath"`;
		
		my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";

		opendir(directory, $appleGlotEnvNewLocPath);
		@componentList = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		opendir(directory, $appleGlotEnvNonGlotablePath);
		@nonGlottableFilesList = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@nonGlottableFilesList)
		{
			my $inComponentList = 0;
			
			foreach $component (@componentList)
			{
				if ($file eq $component)
				{
					$inComponentList = 1;
					last;
				}
			}
			
			if ($inComponentList == 0)
			{
				AALocFileUtilities::RemoveFolder($appleGlotEnvNonGlotablePath . $file);
			}
			else
			{
				AALocUtilities::PrintLog("$file\n");
			}
		}
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Process AD files
	#-----------------------------------------------------------------------------------------

	if ($inWithAD)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Process AD files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


		AALocUtilities::PrintToReport("#==========================================================================\n");
		AALocUtilities::PrintToReport("# .ad files Check Result\n");
		AALocUtilities::PrintToReport("#==========================================================================\n");

		opendir(directory, $translationKitADPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@searchResult)
		{
			$appleGlotFilePath = $appleGlotEnvADPath . $file;
			$translationKitFilePath = $translationKitADPath . $file;
	
			if (-e "$appleGlotFilePath")
			{
				$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
				
				if ($translationKitWGLanguage eq "")
				{
					$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
				}

				
				if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
				{
					CompareWGFiles($appleGlotFilePath, $translationKitFilePath);

					AALocUtilities::PrintLog("Copying $file\n");
					`cp "$translationKitFilePath" "$appleGlotFilePath"`;				
			
					$outNumOfErrors += CheckWGFileSyntax($appleGlotFilePath);
				}
				else
				{
					$outNumOfErrors++;
					AALocUtilities::PrintToReport("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
					AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
				}
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Extra file $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
			}
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	ReceiveTranslationKitLX
#
#	Check whether there are missing WG files in the Engineering Pack _WorkGlossary_New folder
#	Copy translated WG files from Translation Kit _WorkGlossary_New folder to AppleGlot Environment Transit_WG folder
#		and use prepGlossaryForTM to reverseEscapes
#
#	Copy reviewed WG files from Translation Kit (_WorkGlossary_Candidates) to AppleGlot Environment (_WorkGlossary_Candidates)
#		compare the reviewed WG files with original
#
#	Copy reviewed WG files from Translation Kit (_WorkGlossary_Review) to AppleGlot Environment (_WorkGlossary_Review)
#		compare the reviewed WG files with original
#
#	Check whether there are missing non-glottable files in the Engineering Pack
#	Copy translated non-glottable files from Translation Kit (Others) to AppleGlot Environment (_NonGlotable)
#
#	If with AD, Copy reviewed AD files from Translation Kit (_ApplicationDictionaries) to
#		AppleGlot Environment (_ApplicationDictionaries)
#		compare the reviewed AD files with original
#---------------------------------------------------------------------------------------------

sub ReceiveTranslationKitLX
{
	my($inAppleGlotEnvPath, $inTranslationKitPath, $inWithAD) = @_;
	my $outNumOfErrors = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return 1;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return 1;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Receive Translation Kit LX\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvironmentLanguage = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");

	my $appleGlotEnvWGTransitPath = $inAppleGlotEnvPath . "WG_Transit/";
	my $appleGlotEnvTransitWGPath = $inAppleGlotEnvPath . "Transit_WG/";
	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";
	my $appleGlotEnvADPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $appleGlotEnvWGOrgPath = $inAppleGlotEnvPath . "_WorkGlossary_Org/";
	my $appleGlotEnvNonGlotablePath = $inAppleGlotEnvPath . "_NonGlotable/";
	my $appleGlotEnvWGNewPath = $inAppleGlotEnvPath . "_WorkGlossary_New/";
	my $appleGlotEnvWGCandidatesPath = $inAppleGlotEnvPath . "_WorkGlossary_Candidates/";
	my $appleGlotEnvWGReviewPath = $inAppleGlotEnvPath . "_WorkGlossary_Review/";
	my $translationKitWGNewPath = $inTranslationKitPath . "_WorkGlossary_New/";
	my $translationKitWGCandidatesPath = $inTranslationKitPath . "_WorkGlossary_Candidates/";
	my $translationKitWGReviewPath = $inTranslationKitPath . "_WorkGlossary_Review/";
	my $translationKitADPath = $inTranslationKitPath . "_ApplicationDictionaries/";
	my $translationKitNonGlotablePath = $inTranslationKitPath . "Others/";
	my $translationKitWGLanguage;
	my $translationKitFilePath;
	my $appleGlotFilePath;
	

	#-----------------------------------------------------------------------------------------
	#	Process WG New files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process _WorkGlossary_New files\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	
	opendir(directory, $appleGlotEnvWGTransitPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGTransitPath . $file;
		$translationKitFilePath = $translationKitWGNewPath . $file;
		
		if (!(-e "$translationKitFilePath"))
		{
			if (IsWGNeedTranslate($appleGlotFilePath))
			{
				$outNumOfErrors++;
				AALocUtilities::PrintLog("### ERROR: Cannot find $file in Engineering Pack\n");
			}
		}
	}

	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvTransitWGPath);

	opendir(directory, $translationKitWGNewPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGTransitPath . $file;
		$translationKitFilePath = $translationKitWGNewPath . $file;

		if (-e "$appleGlotFilePath")
		{
			$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
			
			if ($translationKitWGLanguage eq "")
			{
				$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
			}

			if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
			{
				AALocUtilities::PrintLog("Copying $file\n");
				`cp "$translationKitFilePath" "$appleGlotEnvTransitWGPath$file"`;
				# SA	system "prepGlossaryForTM -reverseEscapes -file $translationKitFilePath -saveDir $appleGlotEnvTransitWGPath";
				
				$outNumOfErrors += CheckWGFileSyntax($appleGlotEnvTransitWGPath . $file);
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
			}
		}
		else
		{
			# SA	$outNumOfErrors++;
			AALocUtilities::PrintLog("### WARNING: Extra file $file in Engineering Pack\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Process _WorkGlossary_Candidates files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process _WorkGlossary_Candidates files\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	opendir(directory, $translationKitWGCandidatesPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGCandidatesPath . $file;
		$translationKitFilePath = $translationKitWGCandidatesPath . $file;
		
		if (-e "$appleGlotFilePath")
		{
			$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
			
			if ($translationKitWGLanguage eq "")
			{
				$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
			}

			if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
			{
				# CompareWGFiles($appleGlotEnvWGCandidatesPath . $file, $translationKitFilePath);

				AALocUtilities::PrintLog("Copying $file\n");
				`cp "$translationKitFilePath" "$appleGlotEnvWGCandidatesPath$file"`;
				# SA	system "prepGlossaryForTM -reverseEscapes -file $appleGlotEnvWGCandidatesPath$file -saveDir $appleGlotEnvWGCandidatesPath";
			
				$outNumOfErrors += CheckWGFileSyntax($appleGlotEnvWGCandidatesPath . $file);
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
			}
		}
		else
		{
			# SA	$outNumOfErrors++;
			AALocUtilities::PrintLog("### WARNING: Extra file $file in Engineering Pack\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Process _WorkGlossary_Review files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process _WorkGlossary_Review files\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

	opendir(directory, $translationKitWGReviewPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$appleGlotFilePath = $appleGlotEnvWGReviewPath . $file;
		$translationKitFilePath = $translationKitWGReviewPath . $file;
		
		if (-e "$appleGlotFilePath")
		{
			$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
			
			if ($translationKitWGLanguage eq "")
			{
				$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
			}

			if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
			{
				CompareWGFiles($appleGlotEnvWGReviewPath . $file, $translationKitFilePath);

				AALocUtilities::PrintLog("Copying $file\n");
				`cp "$translationKitFilePath" "$appleGlotEnvWGReviewPath$file"`;
			
				$outNumOfErrors += CheckWGFileSyntax($appleGlotEnvWGReviewPath . $file);
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
			}
		}
		else
		{
			# SA	$outNumOfErrors++;
			AALocUtilities::PrintLog("### WARNING: Extra file $file in Engineering Pack\n");
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Process NonGlottable files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Process Non Glottalbe files\n");
	AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");


	chomp(@searchResult = `find $appleGlotEnvNonGlotablePath -type f | grep -v ".DS_Store"`);

	foreach $file (@searchResult)
	{
		$file =~ s/$appleGlotEnvNonGlotablePath/$translationKitNonGlotablePath/;
	
		if (!(-e "$file"))
		{
			# SA	$outNumOfErrors++;
			AALocUtilities::PrintLog("### WARNING: Cannot find $file\n");
		}
	}


	if (-d $translationKitNonGlotablePath)
	{
		`ditto "$translationKitNonGlotablePath" "$appleGlotEnvNonGlotablePath"`;
		
		my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";

		opendir(directory, $appleGlotEnvNewLocPath);
		@componentList = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		opendir(directory, $appleGlotEnvNonGlotablePath);
		@nonGlottableFilesList = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@nonGlottableFilesList)
		{
			my $inComponentList = 0;
			
			foreach $component (@componentList)
			{
				if ($file eq $component)
				{
					$inComponentList = 1;
					last;
				}
			}
			
			if ($inComponentList == 0)
			{
				AALocFileUtilities::RemoveFolder($appleGlotEnvNonGlotablePath . $file);
			}
			else
			{
				AALocUtilities::PrintLog("$file\n");
			}
		}
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Process AD files
	#-----------------------------------------------------------------------------------------

	if ($inWithAD)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Process AD files\n");
		AALocUtilities::PrintLog("#-----------------------------------------------------------------------------------------\n");

		opendir(directory, $translationKitADPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@searchResult)
		{
			$appleGlotFilePath = $appleGlotEnvADPath . $file;
			$translationKitFilePath = $translationKitADPath . $file;
	
			if (-e "$appleGlotFilePath")
			{
				$translationKitWGLanguage = WG2LprojLanguageCode(GetWGLanguage($translationKitFilePath));
				
				if ($translationKitWGLanguage eq "")
				{
					$translationKitWGLanguage = $appleGlotEnvironmentLanguage;
				}
	
				if ($translationKitWGLanguage eq $appleGlotEnvironmentLanguage)
				{
					CompareWGFiles($appleGlotFilePath, $translationKitFilePath);

					AALocUtilities::PrintLog("Copying $file\n");
					`cp "$translationKitFilePath" "$appleGlotFilePath"`;				
			
					$outNumOfErrors += CheckWGFileSyntax($appleGlotFilePath);
				}
				else
				{
					$outNumOfErrors++;
					AALocUtilities::PrintLog("### ERROR: Language of $file is incorrect ($translationKitWGLanguage vs $appleGlotEnvironmentLanguage)\n");
				}
			}
			else
			{
				$outNumOfErrors++;
				AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
			}
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	ReceiveTranslationKitJapan
#---------------------------------------------------------------------------------------------

sub ReceiveTranslationKitJapan
{
	my($inAppleGlotEnvPath, $inTranslationKitPath, $inWithAD) = @_;
	my $outNumOfErrors = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return 1;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return 1;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Receive Translation Kit Japan\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	AALocFileUtilities::RemoveFolder($inTranslationKitPath . "_NewLoc_org");
	
	my $translationKitEnvPath = $inTranslationKitPath . "Env/";
	my $translationKitAppleGlotPath = $inTranslationKitPath;

	if (-d "$translationKitEnvPath")
	{
		$translationKitAppleGlotPath = $translationKitEnvPath;
	}
	

	my $appleGlotEnvironmentLanguage = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");
	my $translationKitLanguage = GetLprojLanguage($translationKitAppleGlotPath . "_NewLoc");

		
	if ($translationKitLanguage eq "Japanese")
	{
		my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
		my $appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";

		opendir(directory, $appleGlotEnvNewLocPath);
		@componentList = grep { !/^\./} readdir(directory);
		closedir(directory);

		`ditto "$translationKitAppleGlotPath" "$inAppleGlotEnvPath"`;

		opendir(directory, $appleGlotEnvNewBasePath);
		@newLocList = grep { !/^\./} readdir(directory);
		closedir(directory);


		foreach $file (@newLocList)
		{
			my $inComponentList = 0;
			
			foreach $component (@componentList)
			{
				if ($file eq $component)
				{
					$inComponentList = 1;
					last;
				}
			}
			
			if ($inComponentList == 0)
			{
				RemoveComponentFromAppeleGlotEnvironment($inAppleGlotEnvPath, $file);
			}
			else
			{
				AALocUtilities::PrintLog("$file\n");
			}
		}
	}
	else
	{
		AALocUtilities::PrintLog("\n### ERROR: The language code of translation kit $inTranslationKitPath is not Japanese.\n");
	
		$outNumOfErrors++;
	}


	#-----------------------------------------------------------------------------------------
	#	Check WG files syntax
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvWGPath = $inAppleGlotEnvPath . "_WorkGlossary/";

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check WG files Syntax: $appleGlotEnvWGPath\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	CheckWGFolderSyntax($appleGlotEnvWGPath);


	#-----------------------------------------------------------------------------------------
	#	Check AD files Changes
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvADBackupPath = $inAppleGlotEnvPath . "_ApplicationDictionaries_backup/";
	my $appleGlotEnvADOriginalPath = $inAppleGlotEnvPath . "_ApplicationDictionaries_origin/";

	if ((-d $appleGlotEnvADBackupPath) && (-d $appleGlotEnvADOriginalPath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check AD files Changes\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
		opendir(directory, $appleGlotEnvADBackupPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);

		foreach $file (@searchResult)
		{
			$originalFilePath = $appleGlotEnvADOriginalPath . $file;
			$backupFilePath = $appleGlotEnvADBackupPath . $file;
			
			CompareWGFiles($originalFilePath, $backupFilePath);
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Check AG Env permission
	#-----------------------------------------------------------------------------------------

	AALocAppleGlotUtilities::CheckAppleGlotEnvironmentPermissions($inAppleGlotEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	FLIdentifier($inAppleGlotEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Extract Non Glottable Files by project\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	# SA system "$gAAProcessNonGlotableFilesPath -extractByProject '$inAppleGlotEnvPath'";
	`"$gAAProcessNonGlotableFilesPath" -extractByProject "$inAppleGlotEnvPath"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfErrors;
}


#---------------------------------------------------------------------------------------------
#	CopyTranslationSubmission
#---------------------------------------------------------------------------------------------

sub CopyTranslationSubmission
{
	my($inLocEnvPath, $inTranslationSubmitFilePath, $inTranslationSubmitFilePath2) = @_;
	my $result = 1;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return 0;
	}

	if (!(-e "$inTranslationSubmitFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationSubmitFilePath doesn't exist.\n");
		return 0;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $translationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath);
	AALocFileUtilities::RemoveFolderContent($translationKitSubmitPath);
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Copy translation submission from:\n");
	AALocUtilities::PrintLog("#      $inTranslationSubmitFilePath\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	$result = AALocFileUtilities::CopyZipOrDmgToFolder($inTranslationSubmitFilePath, $translationKitSubmitPath);

	if ($result == 1)
	{
		if ($inTranslationSubmitFilePath2 ne "")
		{
			if (-e "$inTranslationSubmitFilePath2")
			{
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# Copy translation submission from:\n");
				AALocUtilities::PrintLog("#      $inTranslationSubmitFilePath2\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
			
				$result = AALocFileUtilities::CopyZipOrDmgToFolder($inTranslationSubmitFilePath2, $translationKitSubmitPath);
			}
			else
			{
				AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationSubmitFilePath2 doesn't exist.\n");
				return 0;
			}
		}
	}
	
	return $result;
}


#---------------------------------------------------------------------------------------------
#	ReceiveHelpTranslationKit
#---------------------------------------------------------------------------------------------

sub ReceiveHelpTranslationKit
{
	my($inLocEnvPath, $inTranslationKitPath) = @_;
	my $outNumOfErrors = 0;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTranslationKitPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified translation kit $inTranslationKitPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Receive Help Translation Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);

	my $helpEnvHTMLLeveragedPath = $helpEnvPath . "_Working/_Leveraged/_html/";
	my $helpEnvHTMLLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_html/";

	my $translationKitHTMLPath = $inTranslationKitPath . "HTML/";
	my $translationKitHTMLLeveragedPath = $inTranslationKitPath . "HTML/_Leveraged/";
	my $translationKitHTMLLocRequiredPath = $inTranslationKitPath . "HTML/_LocRequired/";
	

	#-----------------------------------------------------------------------------------------
	#	Process HTML files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy HTML Files from Translation Kit\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# HTML files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	opendir(directory, $helpEnvHTMLLocRequiredPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$htmlFilePath = $translationKitHTMLLocRequiredPath . $file;
		
		if (($file ne "xall.html") && ($file ne "x1.html"))
		{
			if (!(-e "$htmlFilePath"))
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Cannot find $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### ERROR: Cannot find $file in Engineering Pack\n");
			}
		}
	}

	opendir(directory, $translationKitHTMLLocRequiredPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$htmlFilePath = $helpEnvHTMLLocRequiredPath . $file;

		if (($file ne "xall.html") && ($file ne "x1.html"))
		{
			if (!(-e "$htmlFilePath"))
			{
				$outNumOfErrors++;
				AALocUtilities::PrintToReport("### ERROR: Extra file $file in Engineering Pack\n");
				AALocUtilities::PrintLog("### ERROR: Extra file $file in Engineering Pack\n");
			}
		}
	}

	`ditto "$translationKitHTMLLocRequiredPath" "$helpEnvHTMLLocRequiredPath"`;

	
	my $helpEnvLocReqXAllFilePath = $helpEnvHTMLLocRequiredPath . "xall.html";
	my $helpEnvLocReqX1FilePath = $helpEnvHTMLLocRequiredPath . "x1.html";
	my $helpEnvIndexLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_xpgs/";
	my $helpEnvIndexXAllFilePath = $helpEnvIndexLocRequiredPath . "xall.html";
	my $helpEnvIndexX1FilePath = $helpEnvIndexLocRequiredPath . "x1.html";
	
	if (-e $helpEnvLocReqXAllFilePath)
	{
		`mv "$helpEnvLocReqXAllFilePath" "$helpEnvIndexXAllFilePath"`;
	}
	
	if (-e $helpEnvLocReqX1FilePath)
	{
		`mv "$helpEnvLocReqX1FilePath" "$helpEnvIndexX1FilePath"`;
	}


	#-----------------------------------------------------------------------------------------
	#	Process Keyword files
	#-----------------------------------------------------------------------------------------

	my $helpEnvADtableFilePath = $helpEnvPath . "_Working/ADtable.txt";
	my $helpEnvWGtableFilePath = $helpEnvPath . "_Working/WGtable.txt";

	my $translationKitADtableFilePath = $inTranslationKitPath . "Keywords/ADtable.txt";
	my $translationKitWGtableFilePath = $inTranslationKitPath . "Keywords/WGtable.txt";


	if ((-e $helpEnvADtableFilePath) || (-e $helpEnvWGtableFilePath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Process Keyword files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


		AALocUtilities::PrintToReport("#==========================================================================\n");
		AALocUtilities::PrintToReport("# Keyword files Check Result\n");
		AALocUtilities::PrintToReport("#==========================================================================\n");
	
		if (-e $translationKitADtableFilePath)
		{
			AALocUtilities::PrintLog("Copying ADtable.txt\n");
			`ditto "$translationKitADtableFilePath" "$helpEnvADtableFilePath"`;
		}
		
		if (-e $translationKitWGtableFilePath)
		{
			AALocUtilities::PrintLog("Copying WGtable.txt\n");
			`ditto "$translationKitWGtableFilePath" "$helpEnvWGtableFilePath"`;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfErrors;
}




#=============================================================================================
#	AACheckLocFiles
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	CheckStringsFiles
#
#	Check .strings files
#---------------------------------------------------------------------------------------------
	
sub CheckStringsFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $localizedFile;
	my $englishFile;
	my $numOfLocalizedFileError;
	my $numOfEnglishFileError;
	my $localizedFileErrorIndex;
	my $englishFileErrorIndex;
	my $foundErrorInEnglishFile;
	my @localizedFileError;
	my $numOfError = 0;
	my $numOfCompareError = 0;
	my $index;
	my $isXMLFile = 0;


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .strings files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.strings" -or -path "*/$shortFormLanguage.lproj/*.strings" \\) | grep -v ".plist.strings" | grep -v ".nib.strings" | grep -v ".js.strings" | grep -v ".properties.strings"`);
	
	foreach $file (@searchResult)
	{
		#print "test...$file\n";
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
				
		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");

		$numOfError = 0;

		if (-e "$englishFile")
		{
			#---------------------------------------------------------------------------------
			#	check_strings and compare_strings
			#---------------------------------------------------------------------------------
			
			@localizedFileResult = `/Developer/Evolution/LocEnv/locbin/check_strings "$localizedFile"`;
			@englishFileResult = `/Developer/Evolution/LocEnv/locbin/check_strings "$englishFile"`;
			@compareFileResult = `/Developer/Evolution/LocEnv/locbin/compare_strings "$englishFile" "$localizedFile"`;
		
			$numOfCompareError = @compareFileResult;
	
			$isXMLFile = 0;
			
			$numOfLocalizedFileError = @localizedFileResult;
			$numOfEnglishFileError = @englishFileResult;
			
			for ($localizedFileErrorIndex = 0; $localizedFileErrorIndex < $numOfLocalizedFileError; $localizedFileErrorIndex++)
			{
				if ($localizedFileResult[$localizedFileErrorIndex] =~ m/This file is in XML format/)
				{
					$isXMLFile = 1;
					last;
				}

				# AALocUtilities::PrintToReport("$localizedFileResult[$localizedFileErrorIndex]");
				$foundErrorInEnglishFile = 0;
				
				for ($englishFileErrorIndex = 0; $englishFileErrorIndex < $numOfEnglishFileError; $englishFileErrorIndex++)
				{
					if ($localizedFileResult[$localizedFileErrorIndex] eq $englishFileResult[$englishFileErrorIndex])
					{
						$foundErrorInEnglishFile = 1;
					}
				}
				
				if ($foundErrorInEnglishFile == 0)
				{
					if (!($localizedFileResult[$localizedFileErrorIndex] =~ m/\"\/\/\" style comment not preferred./)
						&& !($localizedFileResult[$localizedFileErrorIndex] =~ m/full path file name:/))
					{
						$localizedFileError[$numOfError++] = $localizedFileResult[$localizedFileErrorIndex];
					}
				}
			}
	
			if ($isXMLFile == 1)
			{
				@localizedFileResult = `/usr/bin/plutil -lint "$localizedFile"`;
				
				if ($localizedFileResult[0] !~ /(.*):(\s*)OK$/)
				{
					$numOfLocalizedFileError = @localizedFileResult;
					
					for ($localizedFileErrorIndex = 1; $localizedFileErrorIndex < $numOfLocalizedFileError; $localizedFileErrorIndex++)
					{
						$localizedFileError[$numOfError++] = $localizedFileResult[$localizedFileErrorIndex];
					}
				}
			}
	
			for ($index = 0; $index < $numOfCompareError; $index++)
			{
				if ($compareFileResult[$index] =~ m/\[Error\]/)
				{
					$localizedFileError[$numOfError++] = $compareFileResult[$index];
				}
			}
	
	
			#---------------------------------------------------------------------------------
			#	Compare File Encoding with US
			#---------------------------------------------------------------------------------
			
			my $englishFileEncoding = AALocFileUtilities::GetFileEncoding($englishFile);
			my $localizedFileEncoding = AALocFileUtilities::GetFileEncoding($localizedFile);
	
			if ($englishFileEncoding ne $localizedFileEncoding)
			{
				$localizedFileError[$numOfError++] = "encoding not equal $englishFileEncoding vs $localizedFileEncoding\n";
			}
		}
		else
		{
			$localizedFileError[$numOfError++] = "cannot find the English file\n";
		}
		

		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
			
			for ($index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileError[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}
		
		$outNumOfCheckingError += $numOfError;
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckPlistFiles
#
#	Check .plist files
#---------------------------------------------------------------------------------------------

sub CheckPlistFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $numOfError = 0;
	my @localizedFileResult;
	my $localizedFile;
	my $englishFile;
	my $firstLine;


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .plist files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.plist" -or -path "*/$shortFormLanguage.lproj/*.plist" \\) | grep -v "locversion.plist"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);


		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");

		@localizedFileResult = `/usr/bin/plutil -lint "$localizedFile"`;

		$numOfError = 0;

		if ($localizedFileResult[0] !~ /(.*):(\s*)OK$/)
		{
			$numOfError = @localizedFileResult;
		}
		
		
		open(LOGFILECONTENT, "<$localizedFile") or die "Cannot open '$localizedFile': $!";
			$firstLine = <LOGFILECONTENT>;
		close(LOGFILECONTENT);
		
		if ($firstLine =~ /^\xFE\xFF/ || $firstLine =~ /^\xFF\xFE/)
		{
			# file type UTF-16
			
			$localizedFileResult[$numOfError++] = "[Error]: unsupported UTF16 encoded plist file!\n";
		}
		elsif ($firstLine =~ /^<\?xml/)
		{
			# file type xml
		}
		elsif ($firstLine =~ /^bplist/)
		{
			# file type bin
		}
		else
		{
			# file type unknown
		}


		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
							
			for (my $index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileResult[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}

		$outNumOfCheckingError += $numOfError;
	}

	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckUpgradePlistFiles
#
#	Check Upgrade .plist files
#---------------------------------------------------------------------------------------------

sub CheckUpgradePlistFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $numOfError = 0;
	my @localizedFileResult;
	my $localizedFile;
	my $englishFile;
	my $firstLine;


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# Upgrade .plist files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/AppleInternal/upgradePlists/*/$inLprojLanguage.lproj/*.plist" -or -path "*/AppleInternal/upgradePlists/*/$shortFormLanguage.lproj/*.plist" \\) | grep -v "locversion.plist"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);


		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");

		$numOfError = 0;


		my $plistObject = NSDictionary->dictionaryWithContentsOfFile_($localizedFile);

		if ($plistObject and $$plistObject)
		{
			$localiableObject = $plistObject->objectForKey_("_LOCALIZABLE_");


			if ($localiableObject and $$localiableObject)
			{
				$updatesObject = $localiableObject->objectForKey_("updates");

				$object = $updatesObject->objectAtIndex_(0);
				
				$languageObject = $object->objectForKey_("language");

				if ($languageObject and $$languageObject)
				{
					$languageCode = $languageObject->description()->UTF8String();
					
					if ($languageCode ne $inLprojLanguage)
					{
						$localizedFileResult[0] = "### ERROR: Language code incorrect ($languageCode vs $inLprojLanguage).";
						$numOfError++;
					}
				}
			}
		}


		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
							
			for (my $index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileResult[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}

		$outNumOfCheckingError += $numOfError;
	}

	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckXMLFiles
#
#	Check .xml files
#---------------------------------------------------------------------------------------------
	
sub CheckXMLFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $numOfError = 0;
	my @localizedFileResult;
	my $localizedFile;
	my $englishFile;
	my $firstLine;


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .xml files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.xml" -or -path "*/$shortFormLanguage.lproj/*.xml" \\)`);
	
	foreach $file (@searchResult)
	{
		$numOfError = 0;
	
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
				
		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");


		if (-e "$englishFile")
		{
			#---------------------------------------------------------------------------------
			#	Compare File Encoding with US
			#---------------------------------------------------------------------------------
	
			my $englishFileEncoding = AALocFileUtilities::GetFileEncoding($englishFile);
			my $localizedFileEncoding = AALocFileUtilities::GetFileEncoding($localizedFile);
	
			if ($englishFileEncoding ne $localizedFileEncoding)
			{
				$localizedFileResult[$numOfError++] = "encoding not equal $localizedFileEncoding vs $englishFileEncoding\n";
			}
			
			
			#-------------------------------------------------------------------------------------
			#	Check pkg xml
			#-------------------------------------------------------------------------------------
			
			if ($localizedFile =~ /System\/Installation\// || $localizedFile =~ /AppleInternal\/PackageData\//)
			{
				my $saveRS = $/;
	
				undef $/;
			
				open F, $localizedFile or die;
				my $locData = <F>;
				close F;
			
				$/ = $saveRS;
				
				#---------------------------------------------------------------------------------
				#	Check language code
				#---------------------------------------------------------------------------------
			
				$locData =~ /language\s*=\s*\"([^\"]*)\"/i;
				my $langNum = $1;
				
				if ($langNum !~ /^\d*[1-9]\d*$/)
				{
					$localizedFileResult[$numOfError++] = "### Language code is not set properly [Should not be \'$langNum\'.]\n";
				}
				elsif ($langNum != $AALocUtilities::kLprojLanguageCode2RegionCode{$inLprojLanguage})
				{
					$localizedFileResult[$numOfError++] = "### Language code is not set properly [Should not be \'$langNum\', but \'$AALocUtilities::kLprojLanguageCode2RegionCode{$inLprojLanguage}\'.]\n";
				}
	
	
				#---------------------------------------------------------------------------------
				#	Check Font Face
				#---------------------------------------------------------------------------------
			
				if ($locData =~ /FONT FACE=\"([^\"]*)\"/i)
				{
					my $fontFace = $1;
					
					if ($fontFace ne $AALocUtilities::kLprojLanguageCode2XMLLangFont{$inLprojLanguage})
					{
						$localizedFileResult[$numOfError++] = "### Font Face is not set properly [Should not be \'$fontFace\', but \'$AALocUtilities::kLprojLanguageCode2XMLLangFont{$inLprojLanguage}\'.]\n\n";
					}
				}
			}
		}
		else
		{
			$localizedFileResult[$numOfError++] = "cannot find the English file\n";
		}


		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
							
			for (my $index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileResult[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}

		$outNumOfCheckingError += $numOfError;
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckSUDescriptionHTMLFiles
#
#	Check SUDescription.html files
#---------------------------------------------------------------------------------------------
	
sub CheckSUDescriptionHTMLFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $numOfError = 0;
	my @localizedFileResult;
	my $localizedFile;
	my $englishFile;
	my $firstLine;
	my $saveRS = $/;


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# SUDescription.html files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/SUDescription.html" -or -path "*/$shortFormLanguage.lproj/SUDescription.html" \\)`);
	
	foreach $file (@searchResult)
	{
		$numOfError = 0;
	
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
				
		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");
		
		
		#---------------------------------------------------------------------------------
		#	Compare File Encoding with US
		#---------------------------------------------------------------------------------
	
		my $englishFileEncoding = AALocFileUtilities::GetFileEncoding($englishFile);
		my $localizedFileEncoding = AALocFileUtilities::GetFileEncoding($localizedFile);

		if ($englishFileEncoding ne $localizedFileEncoding)
		{
			$localizedFileResult[$numOfError++] = "encoding not equal $localizedFileEncoding vs $englishFileEncoding\n";
		}
		
		
		#---------------------------------------------------------------------------------
		#	Read the English File
		#---------------------------------------------------------------------------------
	
		$saveRS = $/;
		undef $/;
	
		open F, $englishFile or die;
		my $englishData = <F>;
		close F;
	
		$/ = $saveRS;
		
		
		#---------------------------------------------------------------------------------
		#	Read the Localized File
		#---------------------------------------------------------------------------------
	
		$saveRS = $/;
		undef $/;
	
		open F, $localizedFile or die;
		my $locData = <F>;
		close F;
	
		$/ = $saveRS;


		#---------------------------------------------------------------------------------
		#	Check Font Face
		#---------------------------------------------------------------------------------
	
		if ($locData =~ /FONT FACE=\"([^\"]*)\"/i)
		{
			$fontFace = $1;
			
			if ($fontFace ne $AALocUtilities::kLprojLanguageCode2LangFont{$inLprojLanguage})
			{
				$localizedFileResult[$numOfError++] = "Font Face is not set properly [Should not be \'$fontFace\', but \'$AALocUtilities::kLprojLanguageCode2LangFont{$inLprojLanguage}\'.]\n";
			}
		}
		
		# need to add checking for:
		#	<style type="text/css">
		#	p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px STHeiti}
		#	</style>
		
		
		#---------------------------------------------------------------------------------
		#	Check Paragraph <P></P>
		#---------------------------------------------------------------------------------

		my $numOfEnglishParagraph = 0;
		my $numOfLocalizedParagraph = 0;
		my @englishParagraphs;
		my $paragraph;


		while ($englishData =~ /<P>(.*?)<\/P>/gs)
		{
			$englishParagraphs[$numOfEnglishParagraph++] = $1;
		}


		while ($locData =~ /<P>(.*?)<\/P>/gs)
		{
			$paragraph = $1;
			
			if ($paragraph eq $englishParagraphs[$numOfLocalizedParagraph])
			{
				$localizedFileResult[$numOfError++] = "### Paragraph haven't localized\n";
				$localizedFileResult[$numOfError++] = "    $paragraph\n";
			}			
			
			$numOfLocalizedParagraph++;
		}


		if ($numOfEnglishParagraph ne $numOfLocalizedParagraph)
		{
			$localizedFileResult[$numOfError++] = "### Number of Localized paragraphs not equal to English ($numOfLocalizedParagraph vs $numOfEnglishParagraph)\n";
		}
		
		
		#---------------------------------------------------------------------------------
		#	Check href
		#---------------------------------------------------------------------------------

		my $numOfEnglishURL = 0;
		my $numOfLocalizedURL = 0;
		my @englishURLs;
		my $url;
		my $displayURL;

		while ($englishData =~ m/<a href=\"(.*?)\">(.*?)<\/a>/gi)
		{
			$url = $1;
			$displayURL = $2;
			
			#--Debug----------------------------------------------------------------------------------
			print STDERR "[Debug:CheckSUDescriptionHTMLFiles] URL: \"$url\"\n" if ($gDebug);
			print STDERR "[Debug:CheckSUDescriptionHTMLFiles] Display URL: \"$displayURL\"\n" if ($gDebug);
			#-----------------------------------------------------------------------------------------
			
			$englishURLs[$numOfEnglishURL++] = $displayURL;
		}


		while ($locData =~ m/<a href=\"(.*?)\">(.*?)<\/a>/gi)
		{
			$url = $1;
			$displayURL = $2;
			
			#--Debug----------------------------------------------------------------------------------
			print STDERR "[Debug:CheckSUDescriptionHTMLFiles] Localized URL: \"$url\"\n" if ($gDebug);
			print STDERR "[Debug:CheckSUDescriptionHTMLFiles] Localized Display URL: \"$displayURL\"\n" if ($gDebug);
			#-----------------------------------------------------------------------------------------

			if ($displayURL eq $englishURLs[$numOfLocalizedURL])
			{
				$localizedFileResult[$numOfError++] = "### URL haven't localized\n";
				$localizedFileResult[$numOfError++] = "    Eng URL: $englishURLs[$numOfLocalizedURL]\n";
				$localizedFileResult[$numOfError++] = "    Loc URL: $displayURL\n";
			}			
			
			if ($url ne $displayURL)
			{
				$localizedFileResult[$numOfError++] = "### URL incorrect\n";
				$localizedFileResult[$numOfError++] = "    Display URL: $displayURL\n";
				$localizedFileResult[$numOfError++] = "    Actual URL: $url\n";
			}
			
			$numOfLocalizedURL++;
		}


		if ($numOfEnglishURL ne $numOfLocalizedURL)
		{
			$localizedFileResult[$numOfError++] = "### Number of Localized URLs not equal to English ($numOfLocalizedURL vs $numOfEnglishURL)\n";
		}


		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
							
			for (my $index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileResult[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}

		$outNumOfCheckingError += $numOfError;
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckHTMLFiles
#
#	Check .html files
#---------------------------------------------------------------------------------------------
	
sub CheckHTMLFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $numOfError = 0;
	my $localizedFile;
	my $englishFile;
	my $firstLine;
	my $saveRS = $/;


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .html files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.html" -or -path "*/$shortFormLanguage.lproj/*.html" \\)`);
	
	foreach $file (@searchResult)
	{
		$numOfError = 0;
	
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
				
		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");
		
		
		#---------------------------------------------------------------------------------
		#	Compare File Charset with US
		#---------------------------------------------------------------------------------
	
		my $englishFileCharset = AALocFileUtilities::GetHTMLFileCharset($englishFile);
		my $localizedFileCharset = AALocFileUtilities::GetHTMLFileCharset($localizedFile);
		my $testFileCharset = $englishFileCharset;


		if ($englishFileCharset eq "ISO-8859-1")
		{
			$testFileCharset = $AALocUtilities::kLprojLanguageCode2Charset{$inLprojLanguage};
		}

		if ($testFileCharset ne $localizedFileCharset)
		{
			$localizedFileResult[$numOfError++] = "charset not equal ($localizedFileCharset vs $englishFileCharset)\n";
		}
		

		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
							
			for (my $index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileResult[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}

		$outNumOfCheckingError += $numOfError;
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckInfoFiles
#
#	Check .info files
#---------------------------------------------------------------------------------------------
	
sub CheckInfoFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $numOfError = 0;
	my @localizedFileError;
	my $localizedFile;
	my $englishFile;
	my $firstLine;
	my %fileData = ();
	my $saveRS;
	

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .info files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.info" -or -path "*/$shortFormLanguage.lproj/*.info" \\) | grep -v "info.nib"`);
	
	foreach $file (@searchResult)
	{
		$numOfError = 0;
		%fileData = ();
	
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
				
		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");
		
		
		if (-e "$englishFile")
		{
			#---------------------------------------------------------------------------------
			#	Compare File Encoding with US
			#---------------------------------------------------------------------------------
		
			my $englishFileEncoding = AALocFileUtilities::GetFileEncoding($englishFile);
			my $localizedFileEncoding = AALocFileUtilities::GetFileEncoding($localizedFile);
	
			if ($englishFileEncoding ne $localizedFileEncoding)
			{
				$localizedFileError[$numOfError++] = "encoding not equal $localizedFileEncoding vs $englishFileEncoding\n";
			}
			
			
			#---------------------------------------------------------------------------------
			#	Read the English File
			#---------------------------------------------------------------------------------
		
			$saveRS = $/;
			undef $/;
	
			open(FILECONTENT, "<$englishFile") or die "Cannot open '$englishFile': $!";
				@fileContent = split /[\n\r]/, <FILECONTENT>;
			close(FILECONTENT);
			
			$/ = $saveRS;
	
	
			foreach $line(@fileContent)
			{
				if ($line =~ m/(.*?)\s+(.*)/)
				{
					$fileData{$1}{'ENG'} = $2;
				}
			}
			
			
			#---------------------------------------------------------------------------------
			#	Read the Localized File
			#---------------------------------------------------------------------------------
		
			my $tempFile = "/tmp/localizedFile";
			my $tempLocFile = $localizedFile;
	
			if ($localizedFileEncoding eq "UTF-16 BE" || $localizedFileEncoding eq "UTF-16 LE")
			{
				`cp "$localizedFile" "$tempFile"`;
				ConvertUTF16ToUTF8($tempFile);
	
				$tempLocFile = $tempFile;			
			}
	
	
			$saveRS = $/;
			undef $/;
	
			open(FILECONTENT, "<$tempLocFile") or die "Cannot open '$localizedFile': $!";
				@fileContent = split /[\n\r]/, <FILECONTENT>;
			close(FILECONTENT);
			
			$/ = $saveRS;
	
			`rm $tempFile` if (-e "$tempFile");
	
	
			foreach $line(@fileContent)
			{
				if ($line =~ m/(.*?)\s+(.*)/)
				{
					$fileData{$1}{'LOC'} = $2;
				}
			}
	
			
			#---------------------------------------------------------------------------------
			#	Check Key
			#---------------------------------------------------------------------------------
	
			for my $key (keys %fileData)
			{
				if (defined $fileData{$key}{'ENG'})
				{
					if (defined $fileData{$key}{'LOC'})
					{
						if ($key eq "Title" || $key eq "Description")
						{
							if ($fileData{$key}{'ENG'} eq $fileData{$key}{'LOC'})
							{
								$localizedFileError[$numOfError++] = "$key should be localized but is not\n";
								$localizedFileError[$numOfError++] = "     Eng: $fileData{$key}{'ENG'}\n";
								$localizedFileError[$numOfError++] = "     Loc: $fileData{$key}{'LOC'}\n";
							}
						}
						else
						{
							if ($fileData{$key}{'ENG'} ne $fileData{$key}{'LOC'})
							{
								$localizedFileError[$numOfError++] = "$key should not be localized but localized\n";
								$localizedFileError[$numOfError++] = "     Eng: $fileData{$key}{'ENG'}\n";
								$localizedFileError[$numOfError++] = "     Loc: $fileData{$key}{'LOC'}\n";
							}
						}
					}
					else
					{
						$localizedFileError[$numOfError++] = "Missing '$key' in localized file\n";
					}
				}
				else
				{
					if (defined $fileData{$key}{'LOC'})
					{
						$localizedFileError[$numOfError++] = "Extra '$key' in localized file\n";
					}
				}
			}
		}
		else
		{
			$localizedFileError[$numOfError++] = "cannot find the English file\n";
		}
	

		#---------------------------------------------------------------------------------
		#	Print Errors
		#---------------------------------------------------------------------------------
		
		if ($numOfError != 0)
		{
			AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($englishFile) . "\n");
			AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
							
			for (my $index = 0; $index < $numOfError; $index++)
			{
				AALocUtilities::PrintToReport("$localizedFileError[$index]");
			}
			
			AALocUtilities::PrintToReport("\n");
		}

		$outNumOfCheckingError += $numOfError;
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckRTFFiles
#
#	Check .rtf and .rtfd files
#---------------------------------------------------------------------------------------------

sub CheckRTFFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $localizedFile;
	my $englishFile;
	

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .rtf and .rtfd files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.rtf" -or -path "*/$shortFormLanguage.lproj/*.rtf" \\) | grep -v ".tif"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);

		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");
		
		$outNumOfCheckingError += CompareRTFFiles($englishFile, $localizedFile);
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}

	
sub CompareRTFFiles
{
	my($inEnglishFile, $inLocalizedFile) = @_;

	my $numOfError = 0;
	my @localizedFileError;
	my $saveRS;

	my $numOfEnglishURL = 0;
	my $numOfLocalizedURL = 0;
	my @englishURLs;
	my $url;
	my $displayURL;
	
		
	if (-e "$inEnglishFile")
	{
		#---------------------------------------------------------------------------------
		#	Read the English File
		#---------------------------------------------------------------------------------
	
		$saveRS = $/;
		undef $/;

		open F, $inEnglishFile or die;
		my $englishData = <F>;
		close F;
		
		$/ = $saveRS;
		
		# $englishData =~ s/\n/ /g;
		
		#---------------------------------------------------------------------------------
		#	Read the Localized File
		#---------------------------------------------------------------------------------
	
		$saveRS = $/;
		undef $/;

		open F, $inLocalizedFile or die;
		my $locData = <F>;
		close F;
		
		$/ = $saveRS;

		# $locData =~ s/\n/ /g;

		
		#---------------------------------------------------------------------------------
		#	Check URL
		#
		#	fldinst{HYPERLINK "http://www.apple.com/"}}{\fldrslt http://www.apple.com/}}
		#---------------------------------------------------------------------------------

		$numOfEnglishURL = 0;
		$numOfLocalizedURL = 0;

		while ($englishData =~ /HYPERLINK "(.*)"/gi)
		{
			$url = $1;
			
			if ($englishData =~ /fldrslt (.*)}/gi)
			{
			
				$displayURL = $1;
				
				#--Debug----------------------------------------------------------------------------------
				print STDERR "[Debug:CompareRTFFiles] URL: \"$url\"\n" if ($gDebug);
				print STDERR "[Debug:CompareRTFFiles] Display URL: \"$displayURL\"\n" if ($gDebug);
				#-----------------------------------------------------------------------------------------
				
				$englishURLs[$numOfEnglishURL++] = $displayURL;
			}
		}


		while ($locData =~ /HYPERLINK "(.*)"/gi)
		{
			$url = $1;
			
			if ($locData =~ /fldrslt (.*)}/gi)
			{
				$displayURL = $1;
							
				#--Debug----------------------------------------------------------------------------------
				print STDERR "[Debug:CompareRTFFiles] Localized URL: \"$url\"\n" if ($gDebug);
				print STDERR "[Debug:CompareRTFFiles] Localized Display URL: \"$displayURL\"\n" if ($gDebug);
				#-----------------------------------------------------------------------------------------
	
				if ($displayURL eq $englishURLs[$numOfLocalizedURL])
				{
					$localizedFileError[$numOfError++] = "### URL haven't localized\n";
					$localizedFileError[$numOfError++] = "    Eng URL: $englishURLs[$numOfLocalizedURL]\n";
					$localizedFileError[$numOfError++] = "    Loc URL: $displayURL\n";
				}			
				
				# if ($url ne $displayURL)
				if (!($displayURL =~ m/$url/si))
				{
					$localizedFileError[$numOfError++] = "### URL incorrect\n";
					$localizedFileError[$numOfError++] = "    Display URL: $displayURL\n";
					$localizedFileError[$numOfError++] = "    Actual URL: $url\n";
				}
				
				$numOfLocalizedURL++;
			}
		}

		if ($numOfEnglishURL ne $numOfLocalizedURL)
		{
			$localizedFileError[$numOfError++] = "Number of Localized URLs not equal to English ($numOfLocalizedURL vs $numOfEnglishURL)\n";
		}
	}
	else
	{
		$localizedFileError[$numOfError++] = "cannot find the English file\n";

		#---------------------------------------------------------------------------------
		#	Read the Localized File
		#---------------------------------------------------------------------------------
	
		$saveRS = $/;
		undef $/;

		open F, $inLocalizedFile or die;
		my $locData = <F>;
		close F;
		
		$/ = $saveRS;

		
		#---------------------------------------------------------------------------------
		#	Check URL
		#
		#	fldinst{HYPERLINK "http://www.apple.com/"}}{\fldrslt http://www.apple.com/}}
		#---------------------------------------------------------------------------------

		while ($locData =~ /HYPERLINK "(.*)"/gi)
		{
			$url = $1;
			
			if ($locData =~ /fldrslt (.*)}/gi)
			{
				$displayURL = $1;
							
				#--Debug----------------------------------------------------------------------------------
				print STDERR "[Debug:CompareRTFFiles] Localized URL: \"$url\"\n" if ($gDebug);
				print STDERR "[Debug:CompareRTFFiles] Localized Display URL: \"$displayURL\"\n" if ($gDebug);
				#-----------------------------------------------------------------------------------------
	
				if (!($displayURL =~ m/$url/si))
				{
					$localizedFileError[$numOfError++] = "### URL incorrect\n";
					$localizedFileError[$numOfError++] = "    Display URL: $displayURL\n";
					$localizedFileError[$numOfError++] = "    Actual URL: $url\n";
				}
			}
		}
	}


	#---------------------------------------------------------------------------------
	#	Print Errors
	#---------------------------------------------------------------------------------
	
	if ($numOfError != 0)
	{
		AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
		AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($inEnglishFile) . "\n");
		AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($inLocalizedFile) . "\n");
						
		for (my $index = 0; $index < $numOfError; $index++)
		{
			AALocUtilities::PrintToReport("$localizedFileError[$index]");
		}
		
		AALocUtilities::PrintToReport("\n");
	}
	
	return $numOfError;
}


#---------------------------------------------------------------------------------------------
#	CheckTIFFFiles
#
#	Check .tiff files
#
#	uncompressed tiff is evil. We want to get rid of that before making submissions
#	find . -name "*.tiff" -exec tiffutil -lzw {} -out {} \;
#---------------------------------------------------------------------------------------------

sub CheckTIFFFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $localizedFile;
	my $englishFile;
	

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .rtf and .rtfd files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.tif" -or -path "*/$shortFormLanguage.lproj/*.tiff" \\)`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);

		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");
		
		$outNumOfCheckingError += CompareRTFFiles($englishFile, $localizedFile);
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckProjectSpecificFiles
#
#	Check Project Specific files: FCP .plist, Widget .js and JAVA .properties
#---------------------------------------------------------------------------------------------
	
sub CheckProjectSpecificFiles
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;
	my $numOfError = 0;
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# FCP .plist files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.plist.strings" -or -path "*/$shortFormLanguage.lproj/*.plist.strings" \\)`);
	
	$numOfError = 0;
	
	foreach $file (@searchResult)
	{
		$numOfError++;

		if ($numOfError == 1)
		{
			AALocUtilities::PrintToReport("The following FCP .plist file(s) haven't run the post process\n");
		}

		AALocUtilities::PrintToReport("$file\n");
	}

	if ($numOfError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	$outNumOfCheckingError += $numOfError;
	
	
	
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# Widget .js files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.js.strings" -or -path "*/$shortFormLanguage.lproj/*.js.strings" \\)`);
	
	$numOfError = 0;
	
	foreach $file (@searchResult)
	{
		$numOfError++;

		if ($numOfError == 1)
		{
			AALocUtilities::PrintToReport("The following Widget .js file(s) haven't run the post process\n");
		}

		AALocUtilities::PrintToReport("$file\n");
	}

	if ($numOfError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	$outNumOfCheckingError += $numOfError;
	
	
	
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# Java .properties files Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/*.properties.strings" -or -path "*/$shortFormLanguage.lproj/*.properties.strings" \\)`);
	
	$numOfError = 0;
	
	foreach $file (@searchResult)
	{
		$numOfError++;

		if ($numOfError == 1)
		{
			AALocUtilities::PrintToReport("The following JAVA .properties file(s) haven't run the post process\n");
		}

		AALocUtilities::PrintToReport("$file\n");
	}

	if ($numOfError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	$outNumOfCheckingError += $numOfError;


	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckNibFilesAttributes
#
#	Check .nib files' attributes
#---------------------------------------------------------------------------------------------

sub CheckNibFilesAttributes
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	my $localizedFile;
	my $englishFile;
	my @localizedFileError;



	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .nib files attributes Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type d \\( -path "*/$inLprojLanguage.lproj/*.nib" -or -path "*/$shortFormLanguage.lproj/*.nib" \\) | grep -v "~.nib"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		$englishFile = AALocUtilities::GetEnglishPathFromLocPath($file);
				
		$patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $inAppleGlotEnvironmentNewLocPath);
		AALocUtilities::PrintLog("Checking $patialFilePathName\n");


		if (-e "$englishFile")
		{
			@localizedFileResult = `check_objattribute -base "$englishFile" -loc "$localizedFile"`;
			
			$numOfLocalizedFileError = @localizedFileResult;

			
			if ($numOfLocalizedFileError != 0)
			{
				$outNumOfCheckingError += $numOfLocalizedFileError;
			
				AALocUtilities::PrintToReport("#--------------------------------------------------------------------------\n");
				AALocUtilities::PrintToReport(AALocFileUtilities::GetFileURL($localizedFile) . "\n");
			
				for ($localizedFileErrorIndex = 0; $localizedFileErrorIndex < $numOfLocalizedFileError; $localizedFileErrorIndex++)
				{
					if ($localizedFileResult[$localizedFileErrorIndex] =~ /filename : \//)
					{
						if ($localizedFileResult[$localizedFileErrorIndex] =~ /English.lproj/
							|| $localizedFileResult[$localizedFileErrorIndex] =~ /en.lproj/)
						{
							AALocUtilities::PrintToReport("    English.lproj");
						}
						else
						{
							AALocUtilities::PrintToReport("    $inLprojLanguage.lproj");
						}
					}
					else
					{
						AALocUtilities::PrintToReport("$localizedFileResult[$localizedFileErrorIndex]");
					}
				}
			
				AALocUtilities::PrintToReport("\n");
			}
		}
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckNibFilesAttributes
#
#	Check .nib files' attributes
#---------------------------------------------------------------------------------------------

sub CheckNibFilesAttributesOld
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;

	my $localizedFile;
	my $englishFile;
	my $checkingResult;
	my @pcxout;
	

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# .nib files attributes Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	@pcxout = `$gPcxPath "$inAppleGlotEnvironmentNewLocPath\" -map \"English.lproj/$inLprojLanguage.lproj\" -nd -inclnibattr \"m/(doesNotCycle|hideOnFullScreen|hideOnSuspend|inWindowMenu|hasShadow)/i;\" -skr -sks -ski -skt -skrf -skmd -skcd -skunix -inclf \"m/\.nib/i;\" -cn`;
	
	foreach (@pcxout)
	{
		if (m{^# \[pcx:i:changed:nib:obj:(\d+):(hideOnSuspend|hideOnFullScreen|doesNotCycle|inWindowMenu|hasShadow)://->.+<-//->(.+)<-//:\] "(\d)" \\ ===> \\ "(\d)"})
		{
			$oid = $1;
			$attrib= $2;
			$locnib = $3;
			$baseValue = $4;
			$lcoValue= $5;
			
			AALocUtilities::PrintLog("$3 has problem\n");
			
			AALocUtilities::PrintToReport("$3, $1, $2, $4, $5\n");
			$outNumOfCheckingError++;
		}
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckLocversionPlist
#---------------------------------------------------------------------------------------------
	
sub CheckLocversionPlist
{
	my($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage) = @_;
	my $outNumOfCheckingError = 0;
	my $partialFileName;
	my $newBaseFile;
	my $newLocFile;
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};
	

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# locversion.plist Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	chomp(@searchResult = `find "$inAppleGlotEnvironmentNewLocPath" -type f \\( -path "*/$inLprojLanguage.lproj/locversion.plist" -or -path "*/$shortFormLanguage.lproj/locversion.plist" \\)`);
	
	foreach $file (@searchResult)
	{
		$partialFileName = $file;
		$partialFileName =~ s/$inAppleGlotEnvironmentNewLocPath//;

		AALocUtilities::PrintLog("Checking $partialFileName\n");

		$newBaseFile = $file;
		
		$newBaseFile =~ s/$inLprojLanguage.lproj/English.lproj/;
		$newBaseFile =~ s/_NewLoc/_NewBase/;
		
		if (!(-e "$newBaseFile"))
		{
			$newBaseFile = $file;
			$newBaseFile =~ s/$inLprojLanguage.lproj/en.lproj/;
			$newBaseFile =~ s/_NewLoc/_NewBase/;
		}
		
		if (!(-e "$newBaseFile"))
		{
			$newBaseFile = $file;
			$newBaseFile =~ s/$shortFormLanguage.lproj/en.lproj/;
			$newBaseFile =~ s/_NewLoc/_NewBase/;
		}

		if (-e "$newBaseFile")
		{
			if (!open(LVFILE, "$newBaseFile"))
			{
				AALocUtilities::PrintLog("### ERROR: Can't open file $newBaseFile\n");
			}
			else
			{
				$saveRS = $/;
				undef $/;
				$newBaseLocVersData = <LVFILE>;
				$/ = $saveRS;
				close (LVFILE);
					
				$newBaseLocVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
				$newBaseLprojCompatibleVersion = $1;
				
				$newBaseLocVersData =~ m/LprojLocale<\/key>\s*<string>(.*?)<\/string>/;
				$newBaseLprojLocale = $1;
				
				$newBaseLocVersData =~ m/LprojRevisionLevel<\/key>\s*<string>(.*?)<\/string>/;
				$newBaseLprojRevisionLevel = $1;
				
				$newBaseLocVersData =~ m/LprojVersion<\/key>\s*<string>(.*?)<\/string>/;
				$newBaseLprojVersion = $1;
				
				
				if (!open(LVFILE, "$file"))
				{
					AALocUtilities::PrintLog("### ERROR: Can't open file $file\n");
				}
				else
				{
					$saveRS = $/;
					undef $/;
					$newLocLocVersData = <LVFILE>;
					$/ = $saveRS;
					close (LVFILE);
						
					$newLocLocVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
					$newLocLprojCompatibleVersion = $1;
					
					$newLocLocVersData =~ m/LprojLocale<\/key>\s*<string>(.*?)<\/string>/;
					$newLocLprojLocale = $1;

					$newLocLocVersData =~ m/LprojRevisionLevel<\/key>\s*<string>(.*?)<\/string>/;
					$newLocLprojRevisionLevel = $1;
					
					$newLocLocVersData =~ m/LprojVersion<\/key>\s*<string>(.*?)<\/string>/;
					$newLocLprojVersion = $1;
					
					
					if (($newBaseLprojCompatibleVersion != $newLocLprojCompatibleVersion)
						|| ($newBaseLprojRevisionLevel != $newLocLprojRevisionLevel)
						|| ($newBaseLprojVersion != $newLocLprojVersion))
					{
						$outNumOfCheckingError++;
						
						AALocUtilities::PrintToReport("$partialFileName don't match _NewBase\n");
						AALocUtilities::PrintToReport("\tLprojCompatibleVersion ($newBaseLprojCompatibleVersion), LprojRevisionLevel ($newBaseLprojRevisionLevel), LprojVersion ($newBaseLprojVersion)\n");
						AALocUtilities::PrintToReport("\t             vs\n");
						AALocUtilities::PrintToReport("\tLprojCompatibleVersion ($newLocLprojCompatibleVersion), LprojRevisionLevel ($newLocLprojRevisionLevel), LprojVersion ($newLocLprojVersion)\n\n");
					}
					
					
					if ($newBaseLprojLocale eq $newLocLprojLocale)
					{
						$outNumOfCheckingError++;
						
						AALocUtilities::PrintToReport("$partialFileName\n");
						AALocUtilities::PrintToReport("\tLprojLocale not localized\n");
					}
				}
			}
		}
		else
		{
			$outNumOfCheckingError++;
						
			AALocUtilities::PrintToReport("Cannot find '$partialFileName' in _NewBase\n");
		}
	}



	#---------------------------------------------------------------------------------
	#	Check _NewBase
	#---------------------------------------------------------------------------------
	
	my $appleGlotEnvironmentNewBasePath = $inAppleGlotEnvironmentNewLocPath;
	$appleGlotEnvironmentNewBasePath =~ s/_NewLoc/_NewBase/;

	chomp(@searchResult = `find "$appleGlotEnvironmentNewBasePath" -type f \\( -path "*/English.lproj/locversion.plist" -or  -path "*/en.lproj/locversion.plist" \\)`);
	
	foreach $file (@searchResult)
	{
		$newLocFile = AALocAppleGlotUtilities::NewBaseToNewLocFilePath($file);
		
		if (($newLocFile eq "") || !(-e "$newLocFile"))
		{
			$outNumOfCheckingError++;
						
			$partialFileName = $file;
			$partialFileName =~ s/$appleGlotEnvironmentNewBasePath//;
		
			AALocUtilities::PrintToReport("Cannot find '$partialFileName' in _NewLoc\n\n");
		}
	}


	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	CheckLocversionPlistWithinThisLproj
#---------------------------------------------------------------------------------------------
	
sub CheckLocversionPlistWithinThisLproj
{
	my(($inAppleGlotEnvironmentNewLocPath, $inLprojLanguage)) = @_;
	my $outNumOfCheckingError = 0;
	my $numOfError = 0;
	my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$inLprojLanguage};


	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# locverion.plist within lproj Check Result\n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

    print "$inAppleGlotEnvironmentNewLocPath\n";
	my $newLocDir_ESC = $inAppleGlotEnvironmentNewLocPath . "*/";
		
	$newLocDir_ESC =~ s/'/'\\''/g;
		
	$newLocDir_ESC =~ s/\n//g;
	      
	my @newLocDirs;
	push (@newLocDirs, `ls -d $newLocDir_ESC`);

	foreach my $newLocDir (@newLocDirs)
	{
		$newLocDir =~ s/\n//g;
	
		my $referencePlistFile = "";
		my @newLocDir_Plists  = `find "$newLocDir" -name locversion.plist`;
		
		foreach my $newLocDir_Plist (@newLocDir_Plists)
		{
			$newLocDir_Plist =~ s/\n//g;

			#4784746 : skip any English locversion.plist 
			next if ($newLocDir_Plist =~ m/English.lproj/g);
			next if ($newLocDir_Plist =~ m/en.lproj/g);
			
			next if ($newLocDir_Plist =~ m/Base.lproj/g);

			next if ($referencePlistFile =~ m/English.lproj/g);
			next if ($referencePlistFile =~ m/en.lproj/g);
			
			next if ($referencePlistFile =~ m/Base.lproj/g);
		
			#4515102: We also want to make sure that all the locversion.plist are the same within this lproj
			if (length($referencePlistFile) > 0)
			{
				if (!open( INFILE, "$newLocDir_Plist"))
				{
					AALocUtilities::PrintLog("### ERROR - CAN'T OPEN FILE $newLocDir_Plist\n");
				}
				
				my $diff = `diff '$referencePlistFile' '$newLocDir_Plist'`;
				
				if ($diff ne "")
				{
					my $newBaseReferencePlistFile = $referencePlistFile;
					my $newBaseDir_Plist = $newLocDir_Plist;
					
					$newBaseReferencePlistFile =~ s/$inLprojLanguage.lproj/English.lproj/;
					$newBaseReferencePlistFile =~ s/_NewLoc/_NewBase/;

					$newBaseDir_Plist =~ s/$inLprojLanguage.lproj/English.lproj/;
					$newBaseDir_Plist =~ s/_NewLoc/_NewBase/;
					
					
					if (!(-e "$newBaseDir_Plist"))
					{
						$newBaseDir_Plist =~ s/English.lproj/en.lproj/;
					}
					
					if (!(-e "$newBaseReferencePlistFile"))
					{
						$newBaseReferencePlistFile =~ s/English.lproj/en.lproj/;
					}


					#-------------------------------------------------------------------------
					#
					#-------------------------------------------------------------------------
					
					if (!(-e "$newBaseDir_Plist"))
					{
						$newBaseDir_Plist = $newLocDir_Plist;
						$newBaseDir_Plist =~ s/$shortFormLanguage.lproj/en.lproj/;
						$newBaseDir_Plist =~ s/_NewLoc/_NewBase/;
					}
					
					if (!(-e "$newBaseReferencePlistFile"))
					{
						$newBaseReferencePlistFile = $referencePlistFile;
						$newBaseReferencePlistFile =~ s/$shortFormLanguage.lproj/en.lproj/;
						$newBaseReferencePlistFile =~ s/_NewLoc/_NewBase/;
					}


					#-------------------------------------------------------------------------
					#
					#-------------------------------------------------------------------------
					
					if (!(-e "$newBaseDir_Plist"))
					{
						$newBaseDir_Plist = $newLocDir_Plist;
						$newBaseDir_Plist =~ s/$shortFormLanguage.lproj/English.lproj/;
						$newBaseDir_Plist =~ s/_NewLoc/_NewBase/;
					}
					
					if (!(-e "$newBaseReferencePlistFile"))
					{
						$newBaseReferencePlistFile = $referencePlistFile;
						$newBaseReferencePlistFile =~ s/$shortFormLanguage.lproj/English.lproj/;
						$newBaseReferencePlistFile =~ s/_NewLoc/_NewBase/;
					}

					
					if ((-e "$newBaseReferencePlistFile") && (-e "$newBaseDir_Plist"))
					{
						$diffNewBase = `diff '$newBaseReferencePlistFile' '$newBaseDir_Plist'`;

						if ($diffNewBase ne $diff)
						{
							AALocUtilities::PrintToReport("The following locversion.plist in $newLocDir don't match:\n");
							AALocUtilities::PrintToReport("\t'$referencePlistFile'\n");
							AALocUtilities::PrintToReport("\t'$newLocDir_Plist'.\n");
							AALocUtilities::PrintToReport("NewBase: $diffNewBase");
							AALocUtilities::PrintToReport("NewLoc:  $diff\n\n");
							
							$outNumOfCheckingError++;
						}
					}
					else
					{
						AALocUtilities::PrintToReport("The following locversion.plist in $newLocDir don't match:\n");
						AALocUtilities::PrintToReport("\t'$referencePlistFile'\n");
						AALocUtilities::PrintToReport("\t'$newLocDir_Plist'.\n");
						AALocUtilities::PrintToReport("\tBut cannot find locversion.plist in _NewBase.\n\n");
					}
				}
			}
			else
			{
				$referencePlistFile = $newLocDir_Plist;
			}
		}
	}

	if ($outNumOfCheckingError == 0)
	{
		AALocUtilities::PrintToReport("No Problem Found\n");
	}

	AALocUtilities::PrintToReport("\n\n");
	
	return $outNumOfCheckingError;
}


#---------------------------------------------------------------------------------------------
#	AACheckLocFiles
#---------------------------------------------------------------------------------------------

sub AACheckLocFiles
{
	my($inAppleGlotEnvPath) = @_;

	my $numOfError = 0;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Check AD Folder
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvTranslationsPath = $inAppleGlotEnvPath . "_Translations/";
	
	if (!(-d $appleGlotEnvTranslationsPath))
	{
		CheckWGADFolder($inAppleGlotEnvPath, kCheckADFiles);
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";

	my $lprojLanguage = GetLprojLanguage($appleGlotEnvNewLocPath);


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:AACheckLocFiles] Lproj Language: $lprojLanguage\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $checkLocFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkLocFilesLog.txt";

	if (-e $checkLocFilesLogFile)
	{
		# SA system "rm '$checkLocFilesLogFile'";
		`rm "$checkLocFilesLogFile"`;
	}

	open STDOUT, ">> $checkLocFilesLogFile" or die "Failed to open $checkLocFilesLogFile\n";

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# $appleGlotEnvironmentName Check Result\n");
	AALocUtilities::PrintToReport("# ");
	AALocUtilities::PrintToReport(`date`);
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("\n");


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# AA Check Loc Files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	#-----------------------------------------------------------------------------------------
	#	Check .strings files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking .strings files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckStringsFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .nib files attributes
	#-----------------------------------------------------------------------------------------
	
	#	AALocUtilities::PrintLog("\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	#	AALocUtilities::PrintLog("# Checking .nib files attributes\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	#	$numOfError += CheckNibFilesAttributes($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .plist files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check .plist files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckPlistFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check Upgrade .plist files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Upgrade .plist files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckUpgradePlistFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .xml files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check .xml files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckXMLFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check SUDescription.html files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check SUDescription.html files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckSUDescriptionHTMLFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .html files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check .html files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckHTMLFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .info files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check .info files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckInfoFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .RTF files
	#-----------------------------------------------------------------------------------------
	
	#	AALocUtilities::PrintLog("\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	#	AALocUtilities::PrintLog("# Check .rtf and .rtfd files\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	#	$numOfError += CheckRTFFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check .tiff files
	#-----------------------------------------------------------------------------------------
	
	#	AALocUtilities::PrintLog("\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	#	AALocUtilities::PrintLog("# Check .tiff files\n");
	#	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	#	$numOfError += CheckTIFFFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check locversion.plist files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check locversion.plist files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckLocversionPlist($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check locversion.plist files within lproj
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check locversion.plist files within lproj\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckLocversionPlistWithinThisLproj($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#	Check Project Specific files: FCP .plist, Widget .js and JAVA .properties
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Project Specific files: FCP .plist, Widget .js and JAVA .properties\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError += CheckProjectSpecificFiles($appleGlotEnvNewLocPath, $lprojLanguage);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("#                     E N D    O F    R E P O R T                          \n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	close STDOUT;

	if ($numOfError != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found.\n\n\n");
		# AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $checkLocFilesLogFile\n\n\n");
		
		#`open -a "AD Viewer" "$checkLocFilesLogFile"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}




#=============================================================================================
#	End of AACheckLocFiles
#=============================================================================================


#---------------------------------------------------------------------------------------------
#	CheckWGADFolder
#---------------------------------------------------------------------------------------------

sub CheckWGADFolder
{
	my($inAppleGlotEnvPath, $inOption) = @_;

	my $numOfError = 0;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $countryCode = AALocEnvUtilities::GetCountryCodeFromAppleGlotPath($inAppleGlotEnvPath);
	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $checkLocFilesLogFile;
	
	
	if ($inOption == kCheckWGFiles)
	{
		$appleGlotEnvCheckingPath = $inAppleGlotEnvPath . "_WorkGlossary/";
		$checkWGADFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkWGFilesLog.txt";
	}
	else
	{
		$appleGlotEnvCheckingPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
		$checkWGADFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkADFilesLog.txt";
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if (-e $checkWGADFilesLogFile)
	{
		# SA system "rm '$checkWGADFilesLogFile'";
		`rm "$checkWGADFilesLogFile"`;
	}

	open STDOUT, ">> $checkWGADFilesLogFile" or die "Failed to open $checkWGADFilesLogFile\n";

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# $appleGlotEnvironmentName Check Result\n");
	AALocUtilities::PrintToReport("# ");
	AALocUtilities::PrintToReport(`date`);
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("\n");


	#-----------------------------------------------------------------------------------------
	#	Check WG / AD files
	#-----------------------------------------------------------------------------------------

	if ($inOption == kCheckWGFiles)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check WG files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check AD files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	}

	$numOfError = CheckWGADFiles($appleGlotEnvCheckingPath, $countryCode);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("#                     E N D    O F    R E P O R T                          \n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	close STDOUT;

	if ($numOfError != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found.\n\n\n");
		
		# AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $checkWGADFilesLogFile\n\n\n");
		# `open -a "AD Viewer" "$checkWGADFilesLogFile"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}


#---------------------------------------------------------------------------------------------
#	CheckWGADFiles
#---------------------------------------------------------------------------------------------

sub CheckWGADFiles
{
	my($inFolderPath, $inCountryCode) = @_;
	my $outNumOfError = 0;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified folder $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Check WG / AD files
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;
	my $adFile;


	opendir(directory, $inFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	if (@searchResult == 0)
	{
		AALocUtilities::PrintToReport("### ERROR: The folder is empty\n");
		
		$outNumOfError++;
	}
	else
	{
		foreach $file (@searchResult)
		{
			$adFile = $inFolderPath . $file;
	
			AALocUtilities::PrintLog("Checking $adFile\n");
		
			$outNumOfError += CheckWGFileContent($adFile, $inCountryCode);
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfError;
}


#---------------------------------------------------------------------------------------------
#	CheckADFolderNotTranslatedString
#---------------------------------------------------------------------------------------------

sub CheckADFolderNotTranslatedString
{
	my($inAppleGlotEnvPath) = @_;

	my $numOfError = 0;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $countryCode = AALocEnvUtilities::GetCountryCodeFromAppleGlotPath($inAppleGlotEnvPath);
	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotEnvCheckingPath = $inAppleGlotEnvPath . "_ApplicationDictionaries/";
	my $checkLocFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkNotTranslationStringsLog.txt";
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if (-e $checkLocFilesLogFile)
	{
		`rm "$checkLocFilesLogFile"`;
	}

	open STDOUT, ">> $checkLocFilesLogFile" or die "Failed to open $checkLocFilesLogFile\n";

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("# $appleGlotEnvironmentName Check Result\n");
	AALocUtilities::PrintToReport("# ");
	AALocUtilities::PrintToReport(`date`);
	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("\n");


	#-----------------------------------------------------------------------------------------
	#	Check WG / AD files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check AD files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$numOfError = CheckWGFilesNotTranslatedString($appleGlotEnvCheckingPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintToReport("#==========================================================================\n");
	AALocUtilities::PrintToReport("#                     E N D    O F    R E P O R T                          \n");
	AALocUtilities::PrintToReport("#==========================================================================\n");

	close STDOUT;

	if ($numOfError != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found.\n\n\n");
		
		# AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $checkLocFilesLogFile\n\n\n");
		# `open -a "AD Viewer" "$checkLocFilesLogFile"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}


#---------------------------------------------------------------------------------------------
#	CheckWGFilesNotTranslatedString
#---------------------------------------------------------------------------------------------

sub CheckWGFilesNotTranslatedString
{
	my($inFolderPath) = @_;
	my $outNumOfError = 0;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified folder $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Check WG / AD files
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;
	my $adFile;


	opendir(directory, $inFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	if (@searchResult == 0)
	{
		AALocUtilities::PrintToReport("### ERROR: The folder is empty\n");
		
		$outNumOfError++;
	}
	else
	{
		foreach $file (@searchResult)
		{
			$adFile = $inFolderPath . $file;
	
			AALocUtilities::PrintLog("Checking $adFile\n");
		
			$outNumOfError += CheckWGFileContentNotTranslatedString($adFile, $inCountryCode);
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	return $outNumOfError;
}


#---------------------------------------------------------------------------------------------
#	CheckProblemNibs
#---------------------------------------------------------------------------------------------

sub CheckProblemNibs
{
	my($inAppleGlotEnvPath) = @_;
	
	# `"$gAACheckProblemNibsPath" -glot "$inAppleGlotEnvPath"`;


	
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $lprojLanguageCode = GetLprojLanguage($appleGlotEnvNewLocPath);
	my $countryCode = $AALocUtilities::kLprojLanguageCode2CountryCode{$lprojLanguageCode};

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check Contaminate Nibs\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	system "fix_contaminated_nibs -glot '$inAppleGlotEnvPath' -language $countryCode -target_dir newloc -target_bug autofixable -report_only -ib_plugin '$gPCXIBPlugins'";
	system "fix_contaminated_nibs -glot '$inAppleGlotEnvPath' -language $countryCode -target_dir newloc -target_bug manualwork -ib_plugin '$gPCXIBPlugins'";
}


#---------------------------------------------------------------------------------------------
#	FixContaminatedNibs
#---------------------------------------------------------------------------------------------

sub FixContaminatedNibs
{
	my($inAppleGlotEnvPath, $inComponentName) = @_;
	
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $lprojLanguageCode = GetLprojLanguage($appleGlotEnvNewLocPath);
	my $countryCode = $AALocUtilities::kLprojLanguageCode2CountryCode{$lprojLanguageCode};

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Fix Contaminate Nibs\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Fix autofixable nibs\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	if ($inComponentName ne "")
	{
		system "fix_contaminated_nibs -glot '$inAppleGlotEnvPath' -language $countryCode -components '$inComponentName' -target_dir newloc -target_bug autofixable -ib_plugin '$gPCXIBPlugins'";
	}
	else
	{
		system "fix_contaminated_nibs -glot '$inAppleGlotEnvPath' -language $countryCode -target_dir newloc -target_bug autofixable -ib_plugin '$gPCXIBPlugins'";
	}

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Identify need manual fix nibs\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	if ($inComponentName ne "")
	{
		system "fix_contaminated_nibs -glot '$inAppleGlotEnvPath' -language $countryCode -components '$inComponentName' -target_dir newloc -target_bug manualwork -ib_plugin '$gPCXIBPlugins'";
	}
	else
	{
		system "fix_contaminated_nibs -glot '$inAppleGlotEnvPath' -language $countryCode -target_dir newloc -target_bug manualwork -ib_plugin '$gPCXIBPlugins'";
	}
}


#---------------------------------------------------------------------------------------------
#	CheckNibFiles
#---------------------------------------------------------------------------------------------

sub CheckNibFiles
{
	my($inAppleGlotEnvPath, $inUpdatedOnly) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc";
	my $appleGlotEnvNewLocNibInfoPath = $inAppleGlotEnvPath . "_NibInfo/_NewLoc";

	AALocFileUtilities::CreateFolderIfNotExist($inAppleGlotEnvPath . "_NibInfo");
	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvNewLocNibInfoPath);
	
	
	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);
	
	AALocFileUtilities::CreateFolderIfNotExist($appleGlotEnvNibInfoPath);

	
	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:CheckNibFiles] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check Nib Files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	
	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $checkNibFilesLogFile;
	my $checkNibFilesFormttedLogFile;
	
	if ($inUpdatedOnly == kUpdatedOnly)
	{
		$checkNibFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkUpdatedNibFilesLog.txt";
		$checkNibFilesFormttedLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkUpdatedNibFilesFormttedLog.txt";
	}
	else
	{
		$checkNibFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkNibFilesLog.txt";
		$checkNibFilesFormttedLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkNibFilesFormattedLog.txt";
	}
	
	
	if (-e $checkNibFilesLogFile)
	{
		`rm "$checkNibFilesLogFile"`;
	}
	
	if (-e $checkNibFilesFormttedLogFile)
	{
		`rm "$checkNibFilesFormttedLogFile"`;
	}
	
	
	open logFile, ">> $checkNibFilesLogFile" or die "Failed to open $checkNibFilesLogFile\n";
	open formattedLogFile, ">> $checkNibFilesFormttedLogFile" or die "Failed to open $checkNibFilesFormttedLogFile\n";
	
	
	print logFile "#==========================================================================\n";
	print logFile "# $appleGlotEnvironmentName Check Result\n";
	print logFile "# ";
	print logFile `date`;
	print logFile "#==========================================================================\n";
	print logFile "\n";
	
	
	#-----------------------------------------------------------------------------------------
	#	Check .nib files
	#-----------------------------------------------------------------------------------------
	
	my $numOfCheckingError = 0;
	my $numOfError = 0;
	my $isNewError = 1;

	chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type d \\( -path "*/$language.lproj/*.nib" \\) | grep -v "~.nib"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		
		$partialFileName = $localizedFile;
		$partialFileName =~ s/$appleGlotEnvNewLocPath//;
		
		AALocUtilities::PrintLog("$partialFileName\n");
		
		if (($inUpdatedOnly == kUpdatedOnly) && !AALocFileUtilities::IsFileUpdatedOrNew($localizedFile))
		{
			AALocUtilities::PrintLog("\tSkipped not updated\n");
			next;
		}
		
		AALocUtilities::PrintLog("\tChecking\n");
		
		$englishFile = $file;
		$englishFile =~ s/$language.lproj/English.lproj/;
		# $englishFile =~ s/_NewLoc/_NewBase/;
		
		if (!(-e "$englishFile"))
		{
			$englishFile = $file;
			$englishFile =~ s/$inLprojLanguage.lproj/en.lproj/;
		}
		
		$oldLocalizedFile = $file;
		$oldLocalizedFile =~ s/_NewLoc/_OldLoc/;
		
		
		$file =~ s/$appleGlotEnvNewLocPath//;	# take out the base path
		$file =~ m/\/(.*)/;			# take out the first /
		$file = $1;
		
		
		
		
		#-------------------------------------------------------------------------------------
		#
		#-------------------------------------------------------------------------------------
		
		my $ibResultFile = $localizedFile;
		my $ibResultnib = $localizedFile;

		$ibResultFile =~ s/_NewLoc/_NibInfo\/_NewLoc/;
		$ibResultFile = $ibResultFile . ".txt";

		$ibResultnib =~ s/_NewLoc/_NibInfo\/_NewLoc/;
	
		
		`ditto '$localizedFile' '$ibResultnib'`;
		AALocFileUtilities::RemoveFile($ibResultnib);
		`/usr/bin/ibtool -a '$localizedFile' > '$ibResultFile'`;
		
		
		
		
		#-------------------------------------------------------------------------------------
		#
		#-------------------------------------------------------------------------------------
		
		$isNewError = 1;
		$numOfError = 0;

		$plistObject = NSDictionary->dictionaryWithContentsOfFile_($ibResultFile);
		

		open ibResult, "> $ibResultFile" or die "Failed to open $ibResultFile\n";

		
		if ($plistObject and $$plistObject)
		{
			$noticesListObject = $plistObject->objectForKey_("com.apple.ibtool.document.notices");
			
			if ($noticesListObject and $$noticesListObject)
			{
				if ($noticesListObject->isKindOfClass_(NSDictionary->class))
				{
					$enumerator = $noticesListObject->keyEnumerator();
					
					while (($key = $enumerator->nextObject()) and $$key)
					{
						$value = $noticesListObject->objectForKey_($key);
						
						# $numberOfNotices = $value->count;
						$valueOne = $value->objectAtIndex_(0);
						
						$affectedObjectArray = $valueOne->objectForKey_("affected-objects");
						$affectedObject = $affectedObjectArray->objectAtIndex_(0);
						$affectedObjectMessage = $valueOne->objectForKey_("message");
						
						$affectedObjectID = $affectedObject->description()->UTF8String();
						$affectedObjectMessageString = $affectedObjectMessage->description()->UTF8String();
						
						# AALocUtilities::PrintLog("=> $affectedObjectID: $affectedObjectMessageString\n");

						print ibResult "$affectedObjectID\t$affectedObjectMessageString\n";

						if ($numOfError == 0)
						{
							print logFile "#--------------------------------------------------------------------------\n";
							print logFile AALocFileUtilities::GetFileURL($englishFile) . "\n";
							print logFile AALocFileUtilities::GetFileURL($localizedFile) . "\n";
							print logFile "\n";
						}
						
						print logFile "$affectedObjectID\t$affectedObjectMessageString\n";
						$numOfError++;
						
						# $valueString = $value->description()->UTF8String();
						# AALocUtilities::PrintLog("=> $valueString\n");
					}
				}
			}
		}
		
		print ibResult "\n";
		close ibResult;
		
		if ($numOfError != 0)
		{
			print logFile "\n";
		}
		
		$numOfCheckingError += $numOfError;
	}
	
	
	if ($numOfCheckingError == 0)
	{
		print logFile "No Problem Found\n";
	}
	
	print logFile "\n\n";
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	print logFile "#==========================================================================\n";
	print logFile "#                     E N D    O F    R E P O R T                          \n";
	print logFile "#==========================================================================\n";
	
	close logFile;
	close formattedLogFile;
	
	if ($numOfCheckingError != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found.\n\n\n");
		
		# AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $checkNibFilesLogFile\n\n\n");
		
		# `open -a "AD Viewer" "$checkNibFilesLogFile"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}

	
#---------------------------------------------------------------------------------------------
#	CheckNibFilesOld
#---------------------------------------------------------------------------------------------

sub CheckNibFilesOld
{
	my($inAppleGlotEnvPath, $inUpdatedOnly) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc";

	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:CheckNibFiles] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check Nib Files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $checkNibFilesLogFile;
	my $checkNibFilesFormttedLogFile;
	
	if ($inUpdatedOnly == kUpdatedOnly)
	{
		$checkNibFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkUpdatedNibFilesLog.txt";
		$checkNibFilesFormttedLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkUpdatedNibFilesFormttedLog.txt";
	}
	else
	{
		$checkNibFilesLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkNibFilesLog.txt";
		$checkNibFilesFormttedLogFile = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_checkNibFilesFormattedLog.txt";
	}


	if (-e $checkNibFilesLogFile)
	{
		# SA system "rm '$checkNibFilesLogFile'";
		`rm "$checkNibFilesLogFile"`;
	}
	
	
	my $havePreReport = 0;
	my $numOfPreError = 0;
	my @preError;
	
	if (-e $checkNibFilesFormttedLogFile)
	{
		$havePreReport = 1;
	
		open(FILECONTENT, "<$checkNibFilesFormttedLogFile") or die "Cannot open '$checkNibFilesFormttedLogFile': $!";
			@fileContent = <FILECONTENT>;
		close(FILECONTENT);
	
		my $line;
		my $currentFile = "";

		foreach $line(@fileContent)
		{
			$line =~ m/^(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)$/;
			
			if ($1 eq "File")
			{
				if ($3 ne $currentFile)
				{
					$currentFile = $3;
				}
			}
			else
			{
				$preError[$numOfPreError] = $currentFile . $1 . $2 . $3;
				$numOfPreError++;
			}
		}
	
		`rm "$checkNibFilesFormttedLogFile"`;
	}


	open logFile, ">> $checkNibFilesLogFile" or die "Failed to open $checkNibFilesLogFile\n";
	open formattedLogFile, ">> $checkNibFilesFormttedLogFile" or die "Failed to open $checkNibFilesFormttedLogFile\n";


	print logFile "#==========================================================================\n";
	print logFile "# $appleGlotEnvironmentName Check Result\n";
	print logFile "# ";
	print logFile `date`;
	print logFile "#==========================================================================\n";
	print logFile "\n";


	#-----------------------------------------------------------------------------------------
	#	Check .nib files
	#-----------------------------------------------------------------------------------------

	my $numOfCheckingError = 0;
	my $numOfError = 0;
	my $localizedFile;
	my $englishFile;
	my $oldLocalizedFile;
	my $index;
	my $line;
	my $partialLocalizedFile;
	my $lastComponent = "";
	my $currentComponent = "";
	my $isLocOnlyError = 0;
	my $isNewError = 1;
	my $line1NibID;
	my $line2NibID;


	chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type d \\( -path "*/$language.lproj/*.nib" \\) | grep -v "~.nib"`);
	
	foreach $file (@searchResult)
	{
		$localizedFile = $file;
		
		$partialFileName = $localizedFile;
		$partialFileName =~ s/$appleGlotEnvNewLocPath//;

		AALocUtilities::PrintLog("$partialFileName\n");
		
		if (($inUpdatedOnly == kUpdatedOnly) && !AALocFileUtilities::IsFileUpdatedOrNew($localizedFile))
		{
			AALocUtilities::PrintLog("\tSkipped not updated\n");
			next;
		}
		
		AALocUtilities::PrintLog("\tChecking\n");
		
		$englishFile = $file;
		$englishFile =~ s/$language.lproj/English.lproj/;
		# $englishFile =~ s/_NewLoc/_NewBase/;
		
		if (!(-e "$englishFile"))
		{
			$englishFile = $file;
			$englishFile =~ s/$inLprojLanguage.lproj/en.lproj/;
		}

		$oldLocalizedFile = $file;
		$oldLocalizedFile =~ s/_NewLoc/_OldLoc/;
		

		$file =~ s/$appleGlotEnvNewLocPath//;	# take out the base path
		$file =~ m/\/(.*)/;			# take out the first /
		$file = $1;


		#	if (-e $oldLocalizedFile)
		#	{
		#		@localizedFileResult = `check_locnibs -checkall -newloc "$localizedFile" -newbase "$englishFile" -oldloc "$oldLocalizedFile"`;
		#	}
		#	else
		#	{
			@localizedFileLocOnlyResult = `check_locnibs -checkall -newloc "$localizedFile" -newbase "$englishFile"`;
			@localizedFileResult = `check_locnibs -checkall -newloc "$localizedFile"`;
		#	}


		#-------------------------------------------------------------------------------------
		#	Process Loc Only Result
		#-------------------------------------------------------------------------------------

		my $numOfLocOnlyError = 0;
		my @locOnlyError;
		
		for ($index = 0; $index < @localizedFileLocOnlyResult; $index++)
		{
			$line = $localizedFileLocOnlyResult[$index];
		
			if ($line !~ /### start/
				&& $line !~ /### end/
				&& $line !~ /error processing file/
				&& $line !~ /newloc is equal to oldloc/
				&& $line ne "\n")
			{
				if (($line =~ /overwrapped :/) || ($line =~ /window position unmatch :/))
				{
					$index++;
					$line1 = $localizedFileLocOnlyResult[$index];
					$index++;
					$line2 = $localizedFileLocOnlyResult[$index];
	
					
					$line1 =~ m/nib\?(.*?)>$/;
					$line1NibID = $1;
	
					$line2 =~ m/nib\?(.*?)>$/;
					$line2NibID = $1;
	
					#--Debug----------------------------------------------------------------------------------
					print STDERR "[Debug:CheckNibFiles] line: $line" if ($gDebug);
					print STDERR "[Debug:CheckNibFiles] line1: $line1" if ($gDebug);
					print STDERR "[Debug:CheckNibFiles] line1NibID: $line1NibID\n" if ($gDebug);
					print STDERR "[Debug:CheckNibFiles] line2: $line2" if ($gDebug);
					print STDERR "[Debug:CheckNibFiles] line2NibID: $line2NibID\n" if ($gDebug);
					#-----------------------------------------------------------------------------------------
				
					if ($line1NibID > $line2NibID)
					{
						$locOnlyError[$numOfLocOnlyError] = $line . $line2 . $line1;
					}
					else
					{
						$locOnlyError[$numOfLocOnlyError] = $line . $line1 . $line2;
					}

					$numOfLocOnlyError++;
				}
				else
				{
					# partly invisible
					# text clipped
					# others
				
					$locOnlyError[$numOfLocOnlyError] = $line;
					$numOfLocOnlyError++;
				}
			}
		}

		

		#-------------------------------------------------------------------------------------
		#	Process
		#-------------------------------------------------------------------------------------

		$numOfError = 0;
		
		
		for ($index = 0; $index < @localizedFileResult; $index++)
		{
			$line = $localizedFileResult[$index];
		
			if ($line !~ /### start/
				&& $line !~ /### end/
				&& $line !~ /error processing file/
				&& $line !~ /newloc is equal to oldloc/
				&& $line ne "\n")
			{
				if (($line =~ /overwrapped :/) || ($line =~ /window position unmatch :/))
				{
					$index++;
					$line1 = $localizedFileResult[$index];
					$index++;
					$line2 = $localizedFileResult[$index];
	
					
					$line1 =~ m/nib\?(.*?)>$/;
					$line1NibID = $1;
	
					$line2 =~ m/nib\?(.*?)>$/;
					$line2NibID = $1;

					if ($line1NibID > $line2NibID)
					{
						$checkString = $line . $line2 . $line1;
					}
					else
					{
						$checkString = $line . $line1 . $line2;
					}
					
					
					if (($inUpdatedOnly == kUpdatedOnly) && !IsUpdatedNibID($localizedFile, $line1NibID, $line2NibID))
					{
						AALocUtilities::PrintLog("\$localizedFile ($line1NibID, $line2NibID) Skipped not updated\n");
						next;
					}
				}
				else
				{
					# partly invisible
					# text clipped
					# others
				
					$checkString = $line;
					
					$line =~ m/(.*) : <nib:\/(.*?)\?(.*)>$/;
					$line1NibID = $3;
					
					if (($inUpdatedOnly == kUpdatedOnly) && !IsUpdatedNibID($localizedFile, $line1NibID, -1))
					{
						AALocUtilities::PrintLog("\$localizedFile ($line1NibID) Skipped not updated\n");
						next;
					}
				}

				
				##	Check Loc Only

				$isLocOnlyError = 0;
				
				for ($index2 = 0; $index2 < $numOfLocOnlyError; $index2++)
				{
					$locOnlyErrorLine = $locOnlyError[$index2];
				
					if ($checkString eq $locOnlyErrorLine)
					{
						$isLocOnlyError = 1;
						last;
					}
				}


				##	Check New

				$isNewError = 1;
				$checkString = "";

				$partialLocalizedFile = $localizedFile;
				$partialLocalizedFile =~ s/$appleGlotEnvNewLocPath//;
				
				$partialLocalizedFile =~ m/\/(.*?)\/(.*)$/;
				$currentComponent = $1;

				$partialLocalizedFile =~ m/\/(.*)\/(.*)$/;
				$currentNibFile = $2;
				

				$checkString = $partialLocalizedFile;
				
				$line =~ s/# //;
				$line1 =~ s/# //;
				$line2 =~ s/# //;
				
				if (($line =~ /overwrapped :/) || ($line =~ /window position unmatch :/))
				{
					if ($line =~ /overwrapped :/)
					{
						$checkString = $checkString . "overwrapped";
					}
					else
					{
						$checkString = $checkString . "window position unmatch";
					}

					$line1 =~ m/(.*?)\?(.*)>$/;
					$line1NibID = $2;

					$line2 =~ m/(.*?)\?(.*)>$/;
					$line2NibID = $2;
					
					if ($line1NibID > $line2NibID)
					{
						$checkString = $checkString . $line2NibID . $line1NibID;
					}
					else
					{
						$checkString = $checkString . $line1NibID . $line2NibID;
					}
				}
				else
				{
					$line =~ m/(.*) : <nib:\/(.*?)\?(.*)>$/;
					$checkString = $checkString . $1 . $3 . "-";
				}
				
				for ($index2 = 0; $index2 < $numOfPreError; $index2++)
				{
					#--Debug----------------------------------------------------------------------
					print STDERR "[Debug:CheckNibFiles] check string: $checkString" if ($gDebug);
					print STDERR "[Debug:CheckNibFiles] pre string: $preError[$index2]" if ($gDebug);
					#-----------------------------------------------------------------------------
				
					if ($checkString eq $preError[$index2])
					{
						$isNewError = 0;
						last;
					}
				}

			
			
				if ($numOfError == 0)
				{
					print logFile "#--------------------------------------------------------------------------\n";
					print logFile AALocFileUtilities::GetFileURL($englishFile) . "\n";
					print logFile AALocFileUtilities::GetFileURL($localizedFile) . "\n";
					print logFile "\n";
					
					
					if ($currentComponent ne $lastComponent)
					{
						print formattedLogFile "Component\t$currentComponent\t-\t-\t-\n";
						$lastComponent = $currentComponent;
					}
					
					print formattedLogFile "File\t$currentNibFile\t$partialLocalizedFile\t-\t-\n";
				}
				
				if ($isLocOnlyError == 1)
				{
					print logFile "*";
				}
				
				if ($isNewError == 1)
				{
					print logFile "NEW ";
				}
				
				print logFile "$line";

				if (($line =~ /overwrapped :/) || ($line =~ /window position unmatch :/))
				{
					if ($isLocOnlyError == 1)
					{
						print logFile "*";
					}
				
					if ($isNewError == 1)
					{
						print logFile "NEW ";
					}
				
					print logFile "$line1";


					if ($isLocOnlyError == 1)
					{
						print logFile "*";
					}
				
					if ($isNewError == 1)
					{
						print logFile "NEW ";
					}


					print logFile "$line2";
					
					
					## formatted Log file
					
					if ($line =~ /overwrapped :/)
					{
						print formattedLogFile "overwrapped\t";
					}
					else
					{
						print formattedLogFile "window position unmatch\t";
					}
					
					$line1 =~ m/(.*?)\?(.*)>$/;
					$line1NibID = $2;

					$line2 =~ m/(.*?)\?(.*)>$/;
					$line2NibID = $2;

					if ($line1NibID > $line2NibID)
					{
						print formattedLogFile "$line2NibID\t$line1NibID\t";
					}
					else
					{
						print formattedLogFile "$line1NibID\t$line2NibID\t";
					}
					
					if ($isLocOnlyError == 1)
					{
						print formattedLogFile "Yes\t";
					}
					else
					{
						print formattedLogFile "No\t";
					}

					if ($isNewError == 1)
					{
						print formattedLogFile "Yes\n";
					}
					else
					{
						print formattedLogFile "No\n";
					}
				}
				else
				{
					$line =~ m/(.*) : <nib:\/(.*?)\?(.*)>$/;

					print formattedLogFile "$1\t$3\t-\t";
					
					if ($isLocOnlyError == 1)
					{
						print formattedLogFile "Yes\t";
					}
					else
					{
						print formattedLogFile "No\t";
					}

					if ($isNewError == 1)
					{
						print formattedLogFile "Yes\n";
					}
					else
					{
						print formattedLogFile "No\n";
					}
				}
				
				$numOfError++;
			}
		}
		
		
		# print `check_objattribute -p -base "$englishFile" -loc "$localizedFile"`;
		
		if ($numOfError != 0)
		{
			print logFile "\n";
		}
		
		
		$numOfCheckingError += $numOfError;
	}


	if ($numOfCheckingError == 0)
	{
		print logFile "No Problem Found\n";
	}

	print logFile "\n\n";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	print logFile "#==========================================================================\n";
	print logFile "#                     E N D    O F    R E P O R T                          \n";
	print logFile "#==========================================================================\n";

	close logFile;
	close formattedLogFile;

	if ($numOfCheckingError != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found.\n\n\n");

		# AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $checkNibFilesLogFile\n\n\n");
		
		# `open -a "AD Viewer" "$checkNibFilesLogFile"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}
	
	
#---------------------------------------------------------------------------------------------
#	LocalizeAppleGlotNewLocRTLNibs
#---------------------------------------------------------------------------------------------

sub LocalizeAppleGlotNewLocRTLNibs
{
	my($inAppleGlotEnvPath, $inUpdatedOnly, $inComponentName) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc";
	my $appleGlotEnvLogPath = $inAppleGlotEnvPath . "_Logs/RTLLogs";
	
	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);

	
	#-----------------------------------------------------------------------------------------
	#	Localize RTL .nib files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Localize RTL Nib Files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	

	if ($language eq "ar" || $language eq "he")
	{
		if ($inComponentName ne "")
		{
			chomp(@searchResult = `find "$appleGlotEnvNewLocPath/$inComponentName" -type d \\( -path "*/$language.lproj/*.nib" \\) | grep -v "~.nib"`);
		}
		else
		{
			chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type d \\( -path "*/$language.lproj/*.nib" \\) | grep -v "~.nib"`);
		}

		my $oAlter = Alter->new($gLocalizeRTLNibConfigFile, $appleGlotEnvLogPath, 0);
		
		foreach $file (@searchResult)
		{
			$localizedFile = $file;
			
			$partialFileName = $localizedFile;
			$partialFileName =~ s/$appleGlotEnvNewLocPath//;
			
			AALocUtilities::PrintLog("$partialFileName\n");
			
			if (($inUpdatedOnly == kUpdatedOnly) && !AALocFileUtilities::IsFileUpdatedOrNew($localizedFile))
			{
				AALocUtilities::PrintLog("\tSkipped not updated\n");
				next;
			}
			
			AALocUtilities::PrintLog("\tLocalizing\n");
			
			$labelColor = AALocFileUtilities::GetFileLabel($localizedFile);
			
			$copyFile = AALocFileUtilities::CreateNibFileCopy($localizedFile);
			
			$oAlter->file($copyFile, $localizedFile);
			
			AALocFileUtilities::SetFileLabel($localizedFile, $labelColor);

			# AALocFileUtilities::RemoveFile($copyFile);
			AALocFileUtilities::RemoveFile($copyFile . ".plist");
		}
	}
	else
	{
		AALocUtilities::PrintLog("The AppleGlot Environment is not Arabic or Hebrew\n");
	}
}
	
	
#---------------------------------------------------------------------------------------------
#	LocalizeRTLNib
#---------------------------------------------------------------------------------------------

sub LocalizeRTLNib
{
	my($inNibFilePath) = @_;

	my $fileExtension = AALocFileUtilities::GetFileExtension($inNibFilePath);
	
	if ($fileExtension eq "nib")
	{
		LocalizeRTLNibFile($inNibFilePath);
	}
	else
	{
		LocalizeRTLNibFolder($inNibFilePath);
	}
}
	

#---------------------------------------------------------------------------------------------
#	LocalizeRTLNibFile
#---------------------------------------------------------------------------------------------

sub LocalizeRTLNibFile
{
	my($inNibFilePath) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-e "$inNibFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inNibFilePath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------	

	$log = $ENV{HOME} . "/RTLLogs";
	
	
	my $oAlter = Alter->new($gLocalizeRTLNibConfigFile, $log, 0);

	$labelColor = AALocFileUtilities::GetFileLabel($inNibFilePath);

	$copyFile = AALocFileUtilities::CreateNibFileCopy($inNibFilePath);
	
	
	$oAlter->file($copyFile, $inNibFilePath);

	
	AALocFileUtilities::SetFileLabel($inNibFilePath, $labelColor);

	# AALocFileUtilities::RemoveFile($copyFile);
	AALocFileUtilities::RemoveFile($copyFile . ".plist");
}


#---------------------------------------------------------------------------------------------
#	LocalizeRTLNibFolder
#---------------------------------------------------------------------------------------------

sub LocalizeRTLNibFolder
{
	my($inNibFolderPath) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inNibFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified folder $inNibFolderPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	chomp(@searchResult = `find "$inNibFolderPath" -type d | grep ".nib" | grep -v "~.nib" | grep -v ".DS_Store"`);
	
	foreach $file (@searchResult)
	{
		$filename = $file;
		$filename =~ s/$inNibFolderPath//;
		
		AALocUtilities::PrintLog("Localizing $filename\n");
		LocalizeRTLNibFile($file);
	}
}
	

#---------------------------------------------------------------------------------------------
#	SettingGlobalsFile
#---------------------------------------------------------------------------------------------

sub SettingGlobalsFile
{
	my($inGlobalsFilePath, $inCountryCode) = @_;


	open globalsFile, "> $inGlobalsFilePath" or die "Failed to open $inGlobalsFilePath\n";
	
	print globalsFile "my(%globals);\n";
	print globalsFile "\n";
	print globalsFile "# Set a default build train name. (Only alphabet and _ characters are acceptable.)\n";
	print globalsFile "# ------------------------------------------------------------------------\n";
	print globalsFile "# NEED-TO-KNOW:\n";
	print globalsFile "# \$globals{'Train'} is no longer used. You don't have to set this anymore.\n";
	print globalsFile "# Train name is taken from LocEnv/Info/Project/<component name> instead.\n";
	print globalsFile "# ------------------------------------------------------------------------\n";
	print globalsFile "\$globals{'Train'}     = \"PleaseSetAppropriateTrainNameInGlobalFile\";\n";
	print globalsFile "\n";
	print globalsFile "# Set your Tier language number from 1, 2 or 3\n";

	print globalsFile "\$globals{'Tier'}      = \"";
	my $tier = $AALocUtilities::kCountryCode2Tier{$inCountryCode};
	print globalsFile "$tier";
	print globalsFile "\";\n";

	print globalsFile "\n";
	print globalsFile "# Set your language name. ISO code for Tier2 and Tier3 language. (See below.)\n";

	print globalsFile "\$globals{'Languages'} = [\"";
	my $lprojLanguageCode = $AALocUtilities::kCountryCode2LprojLanguageCode{$inCountryCode};
	print globalsFile "$lprojLanguageCode";
	print globalsFile "\"];\n";

	print globalsFile "\n";
	print globalsFile "# For Tier1 localizers.\n";
	print globalsFile "# Use any one of the following language names:\n";
	print globalsFile "# French, German, Japanese, Spanish, Italian, Dutch\n";
	print globalsFile "#\n";
	print globalsFile "# For Tier2 localizers.\n";
	print globalsFile "# Use any one of the following ISO codes instead of your language name:\n";
	print globalsFile "# 'TradChinese' => 'zh_TW', 'SimpChinese' => 'zh_CN',\n";
	print globalsFile "# 'Korean'      => 'ko',    'Brazilian'   => 'pt',\n";
	print globalsFile "# 'Danish'      => 'da',    'Swedish'     => 'sv',\n";
	print globalsFile "# 'Finnish'     => 'fi',    'Norwegian'   => 'no',\n";
	print globalsFile "#\n";
	print globalsFile "# For Tier3 localizers.\n";
	print globalsFile "# Use any one of the following ISO codes instead of your language name:\n";
	print globalsFile "# 'Czech'       => 'cs',    'Polish'      => 'pl',\n";
	print globalsFile "# 'Bulgarian'   => 'bg',    'Hungarian'   => 'hu',\n";
	print globalsFile "# 'Romanian'    => 'ro',    'Ukranian'    => 'uk',\n";
	print globalsFile "# 'Russian'     => 'ru',    'Greek'       => 'el',\n";
	print globalsFile "# 'Turkish'     => 'tr',    'Arabic'      => 'ar',\n";
	print globalsFile "# 'Hebrew'      => 'he',    'Thai'        => 'th',\n";
	print globalsFile "# 'Icelandic'   => 'is',    'Croatian'    => 'hr'\n";
	print globalsFile "# 'Portuguese'  => 'pt_PT'\n";
	print globalsFile "\n";
	print globalsFile "# Use either one of the following two formats: 'tgz' or 'tar'.\n";
	print globalsFile "\$globals{'TarFormat'} = \"tgz\";\n";
	print globalsFile "# 'tar' => gnutar\n";
	print globalsFile "# 'tgz' => gzip gnutar\n";
	print globalsFile "\n";
	print globalsFile "%globals;\n";
	
	close globalsFile;
}


#---------------------------------------------------------------------------------------------
#	CreateCommandLineFile
#---------------------------------------------------------------------------------------------

sub CreateCommandLineFile
{
	my($inLocEnvPath, $inCommandLineFilePath) = @_;


	my $commandLimeTemplate;
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath);

	if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv)
	{
		$commandLimeTemplate = $gLocalizationCommandLineTemplateFilePath;
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv)
	{
		$commandLimeTemplate = $gLocalizationPDSCommandLineTemplateFilePath;
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv)
	{
		$commandLimeTemplate = $gLocalizationCommandLineTemplateFilePath;
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWBugFixLocEnv)
	{
		$commandLimeTemplate = $gLocalizationBugFixCommandLineTemplateFilePath;
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kWinSWLocEnv)
	{
		$commandLimeTemplate = $gLocalizationCommandLineTemplateFilePath;
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
	{
		$commandLimeTemplate = $gLocalizationCommandLineTemplateFilePath;
	}


	#-----------------------------------------------------------------------------------------
	#	Read Localization Command Line Template File
	#-----------------------------------------------------------------------------------------

	if (!(-e "$commandLimeTemplate"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The template file $commandLimeTemplate doesn't exist.\n");
		return;
	}

	open(FILECONTENT, "<$commandLimeTemplate") or die "Cannot open '$commandLimeTemplate': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if (-e $inCommandLineFilePath)
	{
		# SA system "rm '$inCommandLineFilePath'";
		`rm "$inCommandLineFilePath"`;
	}
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	open commandLineFile, ">> $inCommandLineFilePath" or die "Failed to open $inCommandLineFilePath\n";

	my $line;


	foreach $line(@fileContent)
	{
		$line =~ s/PathOfLocEnv/$inLocEnvPath/;
		print commandLineFile $line;
	}

	close commandLineFile;
}


#---------------------------------------------------------------------------------------------
#	CreateLocEnv
#
#	Create Loc Environment folder if not exist
#	Change the mode of Loc Environment folder to 777
#	Use setLocEnv to set current Loc Env
#	Create AppleGlot Environment folder inside Loc Environment folder
#	Create Reports folder inside Loc Environment folder
#	Create Check List folder inside Loc Environment folder
#	Copy Check Lists to Check List folder
#	Create History folder inside Loc Environment folder
#	Create Translation Submit folder inside Loc Environment folder
#	Localize Globals file
#	Create autoFtp_<cc>.txt file to Reports folder
#	Create Loc Tools report to Reports folder
#	Create Command Line file
#---------------------------------------------------------------------------------------------

sub CreateLocEnv
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	if (AALocEnvUtilities::CheckLocEnvName($inLocEnvPath) == 0)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           The naming convention is LocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Create Directory if not exist
	#-----------------------------------------------------------------------------------------

	AALocFileUtilities::CreateFolderIfNotExist($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath);

	if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv)
	{
		CreateMacSWLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv)
	{
		CreateMacSWLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv)
	{
		CreateMacSWLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWBugFixLocEnv)
	{
		CreateMacSWBugFixLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kWinSWLocEnv)
	{
		CreateWinSWLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
	{
		CreateMacHelpLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kPARLocEnv)
	{
		CreatePARLocEnv($inLocEnvPath);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::k019LocEnv)
	{
		Create019LocEnv($inLocEnvPath);
	}
	

	#-----------------------------------------------------------------------------------------
	#	Copy Default LocEnv Info
	#-----------------------------------------------------------------------------------------

	my $locEnvInfoFilePath = $inLocEnvPath . "LocEnvInfo";

	AALocFileUtilities::CopyFile($gDefaultLocEnvInfoFilePath, $locEnvInfoFilePath, kNotOpen);
}


#---------------------------------------------------------------------------------------------
#	CreateMacSWLocEnv
#
#	Create Loc Environment folder if not exist
#	Change the mode of Loc Environment folder to 777
#	Use setLocEnv to set current Loc Env
#	Create AppleGlot Environment folder inside Loc Environment folder
#	Create Reports folder inside Loc Environment folder
#	Create Check List folder inside Loc Environment folder
#	Copy Check Lists to Check List folder
#	Create History folder inside Loc Environment folder
#	Create Translation Submit folder inside Loc Environment folder
#	Localize Globals file
#	Create autoFtp_<cc>.txt file to Reports folder
#	Create Loc Tools report to Reports folder
#	Create Command Line file
#---------------------------------------------------------------------------------------------

sub CreateMacSWLocEnv
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	if (AALocEnvUtilities::CheckLocEnvName($inLocEnvPath) == 0)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           3333333The naming convention is LocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create Mac SW LocEnv\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $directoryPath = dirname($inLocEnvPath);
	my $appelGlotEnvironmentPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $locEnvReportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath);
	my $locEnvCheckListPath = AALocEnvUtilities::GetCheckListPathFromLocEnv($inLocEnvPath);
	my $locEnvTranslationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath);
	my $locEnvInfoPath = $inLocEnvPath . "Info/";

	system "$gSudoPath chmod 777 $inLocEnvPath";
	system "setLocEnv $inLocEnvPath";
	
	AALocUtilities::PrintLog("Creating AppleGlot Env\n");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath);
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_ApplicationDictionaries");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_LanguageGlossaries");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Logs");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_NewBase");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_NewLoc");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_OldBase");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_OldLoc");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Projects");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Rules");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Temporary");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Translators");

	AALocUtilities::PrintLog("Creating Reports folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvReportsPath);

	AALocUtilities::PrintLog("Creating Check List folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvCheckListPath);

	AALocUtilities::PrintLog("Copying Check List Files\n");
	`ditto "$gLocCheckListFolderPath" "$locEnvCheckListPath"`;

	AALocUtilities::PrintLog("Creating History folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnvPath));

	AALocUtilities::PrintLog("Creating Translation Submit folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath));


	#-----------------------------------------------------------------------------------------
	#	Setting Globals
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Setting Globals file\n");
	if (AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) eq "")
	{
		AALocUtilities::PrintLog("### WARNING: Cannot set Globals file since cannot get Country Code\n");
	}
	else
	{
		SettingGlobalsFile($locEnvInfoPath . "Globals", AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath));
	}


	#-----------------------------------------------------------------------------------------
	#	Copy autoFtp
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying autoFtp file\n");
	AALocFileUtilities::CopyFile($inLocEnvPath . "autoFtp-template.txt",
								 AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "autoFtp_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt",
								 kNotOpen);


	#-----------------------------------------------------------------------------------------
	#	Loc Tools Env Info
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Getting Loc Tools Env Info\n");
	my $locEnvInfoFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "locToolsEnvInfo.txt";
	# system "$gAALocCommandPath -getLocToolsEnvInfo > $locEnvInfoFilePath";

	open STDOUT, "> $locEnvInfoFilePath" or die "Failed to open $locEnvInfoFilePath\n";
	GetLocToolsEnvInfo();
	close STDOUT;


	#-----------------------------------------------------------------------------------------
	#	Create Command Line File
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Create Mac SW Command Line File\n");

	my $commandLineFilePath = $inLocEnvPath . "CommandLine.rtf";

	CreateCommandLineFile($inLocEnvPath, $commandLineFilePath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Set permission of LocEnv folder\n");
	system "$gSudoPath chmod -R 777 $inLocEnvPath";


	#-----------------------------------------------------------------------------------------
	#	Warning Meesage
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#         This process window is no longer valide           #\n");
	AALocUtilities::PrintLog("# Please Close this one and launch a *NEW* Terminal window. #\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("\n\n");
}


#---------------------------------------------------------------------------------------------
#	CreateMacSWBugFixLocEnv
#
#	Create Loc Environment folder if not exist
#	Change the mode of Loc Environment folder to 777
#	Use setLocEnv to set current Loc Env
#	Create AppleGlot Environment folder inside Loc Environment folder
#	Create Reports folder inside Loc Environment folder
#	Create Check List folder inside Loc Environment folder
#	Copy Check Lists to Check List folder
#	Create History folder inside Loc Environment folder
#	Create Translation Submit folder inside Loc Environment folder
#	Localize Globals file
#	Create autoFtp_<cc>.txt file to Reports folder
#	Create Loc Tools report to Reports folder
#	Create Command Line file
#---------------------------------------------------------------------------------------------

sub CreateMacSWBugFixLocEnv
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	if (AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath) != AALocEnvUtilities::kMacSWBugFixLocEnv)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           The naming convention is MacSWBugFixLocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create Mac SW Bug Fix LocEnv\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $directoryPath = dirname($inLocEnvPath);
	my $appelGlotEnvironmentPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $locEnvReportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath);
	my $locEnvCheckListPath = AALocEnvUtilities::GetCheckListPathFromLocEnv($inLocEnvPath);
	my $locEnvTranslationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath);
	my $locEnvInfoPath = $inLocEnvPath . "Info/";

	system "$gSudoPath chmod 777 $inLocEnvPath";
	system "setLocEnv $inLocEnvPath";
	
	AALocUtilities::PrintLog("Creating AppleGlot Env\n");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath);
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_ApplicationDictionaries");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_LanguageGlossaries");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Logs");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_NewBase");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_NewLoc");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_OldBase");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_OldLoc");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Projects");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Rules");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Temporary");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Translators");

	AALocUtilities::PrintLog("Creating Reports folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvReportsPath);

	AALocUtilities::PrintLog("Creating Check List folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvCheckListPath);

	AALocUtilities::PrintLog("Copying Check List Files\n");
	`ditto "$gLocCheckListFolderPath" "$locEnvCheckListPath"`;

	AALocUtilities::PrintLog("Creating History folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnvPath));

	AALocUtilities::PrintLog("Creating Translation Submit folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath));


	#-----------------------------------------------------------------------------------------
	#	Setting Globals
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Setting Globals file\n");
	if (AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) eq "")
	{
		AALocUtilities::PrintLog("### WARNING: Cannot set Globals file since cannot get Country Code\n");
	}
	else
	{
		SettingGlobalsFile($locEnvInfoPath . "Globals", AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath));
	}


	#-----------------------------------------------------------------------------------------
	#	Copy autoFtp
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying autoFtp file\n");
	AALocFileUtilities::CopyFile($inLocEnvPath . "autoFtp-template.txt",
								 AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "autoFtp_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt",
								 kNotOpen);


	#-----------------------------------------------------------------------------------------
	#	Loc Tools Env Info
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Getting Loc Tools Env Info\n");
	my $locEnvInfoFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "locToolsEnvInfo.txt";
	# system "$gAALocCommandPath -getLocToolsEnvInfo > $locEnvInfoFilePath";

	open STDOUT, "> $locEnvInfoFilePath" or die "Failed to open $locEnvInfoFilePath\n";
	GetLocToolsEnvInfo();
	close STDOUT;


	#-----------------------------------------------------------------------------------------
	#	Create Command Line File
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Create Mac SW Command Line File\n");

	my $commandLineFilePath = $inLocEnvPath . "CommandLine.rtf";

	CreateCommandLineFile($inLocEnvPath, $commandLineFilePath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Set permission of LocEnv folder\n");
	system "$gSudoPath chmod -R 777 $inLocEnvPath";


	#-----------------------------------------------------------------------------------------
	#	Warning Meesage
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#         This process window is no longer valide           #\n");
	AALocUtilities::PrintLog("# Please Close this one and launch a *NEW* Terminal window. #\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("\n\n");
}


#---------------------------------------------------------------------------------------------
#	CreateWinSWLocEnv
#
#---------------------------------------------------------------------------------------------

sub CreateWinSWLocEnv
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	if (AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath) != AALocEnvUtilities::kWinSWLocEnv)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           The naming convention is WinSWLocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create Win SW LocEnv\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $directoryPath = dirname($inLocEnvPath);
	my $appelGlotEnvironmentPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $locEnvReportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath);
	my $locEnvCheckListPath = AALocEnvUtilities::GetCheckListPathFromLocEnv($inLocEnvPath);
	my $locEnvTranslationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath);
	my $locEnvInfoPath = $inLocEnvPath . "Info/";

	system "$gSudoPath chmod 777 $inLocEnvPath";
	system "setLocEnv $inLocEnvPath";
	
	AALocUtilities::PrintLog("Creating AppleGlot Env\n");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath);
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_ApplicationDictionaries");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_LanguageGlossaries");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Logs");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_NewBase");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_NewLoc");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_OldBase");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_OldLoc");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Projects");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Rules");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Temporary");
	AALocFileUtilities::CreateFolderIfNotExist($appelGlotEnvironmentPath . "_Translators");

	AALocUtilities::PrintLog("Creating Reports folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvReportsPath);

	AALocUtilities::PrintLog("Creating Check List folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvCheckListPath);

	AALocUtilities::PrintLog("Copying Check List Files\n");
	`ditto "$gLocCheckListFolderPath" "$locEnvCheckListPath"`;

	AALocUtilities::PrintLog("Creating History folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnvPath));

	AALocUtilities::PrintLog("Creating Translation Submit folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath));


	#-----------------------------------------------------------------------------------------
	#	Loc Tools Env Info
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Getting Loc Tools Env Info\n");
	my $locEnvInfoFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "locToolsEnvInfo.txt";
	# system "$gAALocCommandPath -getLocToolsEnvInfo > $locEnvInfoFilePath";

	open STDOUT, "> $locEnvInfoFilePath" or die "Failed to open $locEnvInfoFilePath\n";
	GetLocToolsEnvInfo();
	close STDOUT;


	#-----------------------------------------------------------------------------------------
	#	Create Command Line File
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Create Win SW Command Line File\n");

	my $commandLineFilePath = $inLocEnvPath . "CommandLine.rtf";

	CreateCommandLineFile($inLocEnvPath, $commandLineFilePath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Set permission of LocEnv folder\n");
	system "$gSudoPath chmod -R 777 $inLocEnvPath";


	#-----------------------------------------------------------------------------------------
	#	Warning Meesage
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#         This process window is no longer valide           #\n");
	AALocUtilities::PrintLog("# Please Close this one and launch a *NEW* Terminal window. #\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("\n\n");
}


#---------------------------------------------------------------------------------------------
#	CreateMacHelpLocEnv
#
#	Create Loc Environment folder if not exist
#	Change the mode of Loc Environment folder to 777
#	Use setLocEnv to set current Loc Env
#	Create AppleGlot Environment folder inside Loc Environment folder
#	Create Reports folder inside Loc Environment folder
#	Create Check List folder inside Loc Environment folder
#	Copy Check Lists to Check List folder
#	Create History folder inside Loc Environment folder
#	Create Translation Submit folder inside Loc Environment folder
#	Localize Globals file
#	Create autoFtp_<cc>.txt file to Reports folder
#	Create Loc Tools report to Reports folder
#	Create Command Line file
#---------------------------------------------------------------------------------------------

sub CreateMacHelpLocEnv
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	if (AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath) != AALocEnvUtilities::kMacHelpLocEnv)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           The naming convention is MacHelpLocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create Mac Help LocEnv\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $directoryPath = dirname($inLocEnvPath);
	my $helpEnvironmentPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $locEnvReportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath);
	my $locEnvCheckListPath = AALocEnvUtilities::GetCheckListPathFromLocEnv($inLocEnvPath);
	my $locEnvTranslationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath);
	my $locEnvInfoPath = $inLocEnvPath . "Info/";

	system "$gSudoPath chmod 777 $inLocEnvPath";
	system "setLocEnv $inLocEnvPath";
	
	AALocUtilities::PrintLog("Creating Help Loc folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($helpEnvironmentPath);
	system "CreateHelpLocEnv -targetDir $helpEnvironmentPath -helpTemplates $gHelpLocTemplatesPath";

	AALocUtilities::PrintLog("Creating Reports folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvReportsPath);

	AALocUtilities::PrintLog("Creating Check List folder\n");
	AALocFileUtilities::CreateFolderIfNotExist($locEnvCheckListPath);

	AALocUtilities::PrintLog("Copying Check List Files\n");
	`ditto "$gLocCheckListFolderPath" "$locEnvCheckListPath"`;

	AALocUtilities::PrintLog("Creating History folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnvPath));

	AALocUtilities::PrintLog("Creating Translation Submit folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath));


	#-----------------------------------------------------------------------------------------
	#	Setting Globals
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Setting Globals file\n");
	if (AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) eq "")
	{
		AALocUtilities::PrintLog("### WARNING: Cannot set Globals file since cannot get Country Code\n");
	}
	else
	{
		SettingGlobalsFile($locEnvInfoPath . "Globals", AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath));
	}


	#-----------------------------------------------------------------------------------------
	#	Copy autoFtp
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Copying autoFtp file\n");
	AALocFileUtilities::CopyFile($inLocEnvPath . "autoFtp-template.txt",
								 AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "autoFtp_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt",
								 kNotOpen);


	#-----------------------------------------------------------------------------------------
	#	Loc Tools Env Info
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Getting Loc Tools Env Info\n");
	my $locEnvInfoFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "locToolsEnvInfo.txt";
	# system "$gAALocCommandPath -getLocToolsEnvInfo > $locEnvInfoFilePath";

	open STDOUT, "> $locEnvInfoFilePath" or die "Failed to open $locEnvInfoFilePath\n";
	GetLocToolsEnvInfo();
	close STDOUT;


	#-----------------------------------------------------------------------------------------
	#	Create Command Line File
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Create Mac Help Command Line File\n");

	my $commandLineFilePath = $inLocEnvPath . "CommandLine.rtf";

	CreateCommandLineFile($inLocEnvPath, $commandLineFilePath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Set permission of LocEnv folder\n");
	system "$gSudoPath chmod -R 777 $inLocEnvPath";


	#-----------------------------------------------------------------------------------------
	#	Warning Meesage
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#         This process window is no longer valide           #\n");
	AALocUtilities::PrintLog("# Please Close this one and launch a *NEW* Terminal window. #\n");
	AALocUtilities::PrintLog("#                                                           #\n");
	AALocUtilities::PrintLog("#### IMPORTANT ### IMPORTANT ### IMPORTANT ### IMPORTANT ####\n");
	AALocUtilities::PrintLog("\n\n");
}


#---------------------------------------------------------------------------------------------
#	CreatePARLocEnv
#---------------------------------------------------------------------------------------------

sub CreatePARLocEnv
{
	my($inLocEnvPath) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	if (AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath) != AALocEnvUtilities::kPARLocEnv)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           The naming convention is PARLocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create PAR LocEnv\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	my $directoryPath = dirname($inLocEnvPath);
	
	AALocUtilities::PrintLog("Creating History folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnvPath));
}


#---------------------------------------------------------------------------------------------
#	Create019LocEnv
#---------------------------------------------------------------------------------------------

sub Create019LocEnv
{
	my($inLocEnvPath) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------
	
	if (AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath) != AALocEnvUtilities::k019LocEnv)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("### ERROR: The name of Loc Env $inLocEnvPath is incorrect.\n");
		AALocUtilities::PrintLog("           The naming convention is 019LocEnv_ProjectName_BuildNumber_LocSubmitNumber_CountryCode_Localizer.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create 019 LocEnv\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	my $directoryPath = dirname($inLocEnvPath);
	
	AALocUtilities::PrintLog("Creating History folder\n");
	AALocFileUtilities::CreateFolderIfNotExist(AALocEnvUtilities::GetHistoryPathFromLocEnv($inLocEnvPath));
}
	
	
#---------------------------------------------------------------------------------------------
#	CopyLXRipEnv
#
#	Check whether Loc Kit country code equal to Loc Env or not
#	Copy Loc Kit contents to Loc Environment
#	Copy tarballs to Component folder
#	Copy AppleGlot Env
#	Fix AppleGlot Env permission 
#	Copy GlotEnv (using addGlotEnvToLocEnv)
#	Set AppleGlot enviroment Language
#	Update AutoLayout Adjust Log
#	count WG files
#	Check Loc Kit
#	Create ALA log file
#	Run verificator
#	Run flidentifier
#	Build file list
#---------------------------------------------------------------------------------------------

sub CopyLXRipEnv
{
	my($inLocEnvPath, $inLXRipEnvFolderPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inLXRipEnvFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified LXRip Env folder $inLXRipEnvFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $numOfErrors = 0;
	my @errors;
	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $locEnvCountryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Copy Mac SW LXRip Env\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	opendir(directory, $inLXRipEnvFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$file =~ m/^(.*)_(.*)$/;
		my ($component, $countryCodeAndExt) = ($1, $2, $3);

		$countryCodeAndExt =~ m/^(.*?)\.(.*?)\.(.*?)$/;
		my ($countryCode, $glotenv, $cpgz) = ($1, $2, $3);

		if ($countryCode eq $locEnvCountryCode && $cpgz eq "cpgz")
		{
			AALocUtilities::PrintLog("Copying $file\n");

			$lxRipEnvFile = $inLXRipEnvFolderPath . $file;
			$result = `addGlotEnvToLocEnv -glot "$lxRipEnvFile"`;
			
			if ($result =~ m/Error happened/)
			{
				AALocUtilities::PrintLog("### ERROR: addGlotEnvToLocEnv encountered problem.\n");
			}
		}
	}
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("\n");
	my $locEnvGlotEnvPath = $inLocEnvPath . "GlotEnv/";


	#-------------------------------------------------------------------------------------
	#	Copy LKCX files
	#-------------------------------------------------------------------------------------

	my $srcFolder;
	my $destFolder;
	
	AALocUtilities::PrintLog("Copying _LKCXInfo\n");
	$srcFolder = $locEnvGlotEnvPath . "_EnvLog/";
	$destFolder = $inLocEnvPath . "_LKCXInfo/";
	
	AALocFileUtilities::CreateFolderIfNotExist($destFolder);

	if (-d "$srcFolder")
	{
		$srcSubFolder = $srcFolder . "autolayoutadjuster_log/";
		$desSubtFolder = $destFolder . "autolayoutadjuster_log/";
	
		`ditto "$srcSubFolder" "$desSubtFolder"`;

		$srcSubFolder = $srcFolder . "flidentifier_result/";
		$desSubtFolder = $destFolder . "flidentifier_result/";
	
		`ditto "$srcSubFolder" "$desSubtFolder"`;

		$srcSubFolder = $srcFolder . "locToolsInfo/";
		$desSubtFolder = $destFolder . "locToolsInfo/";
	
		`ditto "$srcSubFolder" "$desSubtFolder"`;
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: Can't find _EnvLog folder in the LXRip\n");
	}


	$srcFolder = $locEnvGlotEnvPath . "_ComponentData/";

	if (-d "$srcFolder")
	{
		$srcSubFolder = $srcFolder;
		$desSubtFolder = $destFolder . "_ComponentData/";
	
		`ditto "$srcSubFolder" "$desSubtFolder"`;
	}
	else
	{
		AALocUtilities::PrintLog("### ERROR: Can't find _ComponentData folder in the LXRip\n");
	}


	#-----------------------------------------------------------------------------------------
	#	Rename AppleGlot folder name
	#-----------------------------------------------------------------------------------------
	
	AALocFileUtilities::RemoveFolder($appleGlotEnvPath);
	rename $locEnvGlotEnvPath, $appleGlotEnvPath;


	#-------------------------------------------------------------------------------------
	#	GlotEnv
	#-------------------------------------------------------------------------------------

	AALocFileUtilities::CreateFolderIfNotExist($locEnvGlotEnvPath);
	AALocFileUtilities::CreateFolderIfNotExist($locEnvGlotEnvPath . "_NewBase");
	
	my $appleGlotNewBasePath = $appleGlotEnvPath . "_NewBase";
	my $appleGlotOutboundGlossariesPath = $appleGlotEnvPath . ".OutboundGlossaries/";
	my $glotEnvNewBasePath = $locEnvGlotEnvPath . "_NewBase";
	my $glotEnvOutboundGlossariesPath = $locEnvGlotEnvPath . ".OutboundGlossaries/";
	
	`ditto $appleGlotNewBasePath $glotEnvNewBasePath`;
	`ditto $appleGlotOutboundGlossariesPath $glotEnvOutboundGlossariesPath`;


	#-----------------------------------------------------------------------------------------
	#	Backup Projects
	#-----------------------------------------------------------------------------------------
	
	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvProjectsBackupPath = $inLocEnvPath . "Projects_US/";

	AALocUtilities::PrintLog("Backup $inLocEnvPath Projects\n");
	# `ditto "$locEnvProjectsPath" "$locEnvProjectsBackupPath"`;
	`mv "$locEnvProjectsPath" "$locEnvProjectsBackupPath"`;
	AALocFileUtilities::CreateFolderIfNotExist($locEnvProjectsPath);


	#-----------------------------------------------------------------------------------------
	#	Backup Info
	#-----------------------------------------------------------------------------------------

	BackupLocEnvInfo($inLocEnvPath);
	UpdateMailNotifyFromLocEnvInfo($inLocEnvPath);
	

	#-----------------------------------------------------------------------------------------
	#	Fix AppleGlot Env permission
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("Fixing AppleGlot Env permission\n");
	system "$gSudoPath chmod -R +w $appleGlotEnvPath*";
	
	
	#-------------------------------------------------------------------------------------
	#	Set AppleGlot Environment Language
	#-------------------------------------------------------------------------------------

	my $language = GetAppleGlotADLanguageCode($appleGlotEnvPath);
	
	if ($language eq "")
	{
		$locEnvLang = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
		
		if ($locEnvLang ne "")
		{
			$language = $AALocUtilities::kCountryCode2AGLanguageCode{$locEnvLang};
		}
	}
	
	if ($language eq "")
	{
		my $locLanguage = GetLprojLanguage($appleGlotEnvPath . "_NewLoc");
		
		if ($locLanguage ne "")
		{
			#
		}
	}
	
	if ($language ne "")
	{
		AALocUtilities::PrintLog("Set AppleGlot Env language to $language\n");
		`$gAppleGlotCLPath -d "$appleGlotEnvPath" setlangs en $language`;
	}
	else
	{
		AALocUtilities::PrintLog("ERROR: Cannot get language code of AppleGlot environment\n");
	}

	
	#-------------------------------------------------------------------------------------
	#	Update AutoLayout Adjust Log
	#-------------------------------------------------------------------------------------

	my $autoLayoutAdjusterLogFile = $inLocEnvPath
									. "_LKCXInfo/autolayoutadjuster_log/compare_nib_before_after_result.txt",


	AALocUtilities::PrintLog("Updating AutoLayout Adjust log\n");


	if (-e "$autoLayoutAdjusterLogFile")
	{
		UpdateAutoLayoutAdjustLog($inLocEnvPath, $appleGlotEnvPath);
	}
	else
	{
		AALocUtilities::PrintLog("### WARNING: The autoLayout log file doesn't exist.\n");
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Find all comment in updated .strings
	#-------------------------------------------------------------------------------------
	
	# AALocUtilities::PrintLog("Finding comments in updated .strings\n");
	# FindAllCommentsInStrings($appleGlotEnvPath, kUpdatedOnly);
	
	
	#-------------------------------------------------------------------------------------
	#	Count WG files
	#-------------------------------------------------------------------------------------

	CountAppleGlotWGFiles($appleGlotEnvPath);

	AALocEnvUtilities::CopyReportFromAG2LocEnv($inLocEnvPath, "_WGWordCount.html", kNotOpen);

	
	#-------------------------------------------------------------------------------------
	#	Compare LocToolsEnvInfo
	#-------------------------------------------------------------------------------------
			
	

	#-------------------------------------------------------------------------------------
	#	Check Loc Kit
	#-------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check Loc Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`"$gAACheckLKCXPath" "$inLocEnvPath"`;
	
	# my $checkLKCXLogFile = AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath) . "_checkLocKitLog.txt";
	# AALocFileUtilities::CopyFile($inLocEnvPath . "_LKCXInfo/" . $checkLKCXLogFile, AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . $checkLKCXLogFile, kNotOpen);


	#-------------------------------------------------------------------------------------
	#	ALA log file
	#-------------------------------------------------------------------------------------
	
	CreateALAChangesLog($inLocEnvPath);


	#-------------------------------------------------------------------------------------
	#	Verificator
	#-------------------------------------------------------------------------------------
	
	Verificator($appleGlotEnvPath);
	AALocEnvUtilities::CopyReportFromAG2LocEnv($inLocEnvPath, "_verificator.html", kNotOpen);


	#-------------------------------------------------------------------------------------
	#	Run flidentifier
	#-------------------------------------------------------------------------------------
	
	FLIdentifier($appleGlotEnvPath);
	

	#-------------------------------------------------------------------------------------
	#	Build File List
	#-------------------------------------------------------------------------------------
	
	BuildAllFileList($appleGlotEnvPath);


	#-------------------------------------------------------------------------------------
	#	Process Nib Score
	#-------------------------------------------------------------------------------------
	
	`"$gAAProcessNibScorePath" "$inLocEnvPath"`;


	#-------------------------------------------------------------------------------------
	#	Compare _NewBase and _OldBase
	#-------------------------------------------------------------------------------------
	
	if (AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath) == AALocEnvUtilities::kMacSWPDSLocEnv)
	{
		CompareOldBaseNewBase($appleGlotEnvPath, "");
	}
}


#---------------------------------------------------------------------------------------------
#	CopyLocKit
#
#	Check whether Loc Kit country code equal to Loc Env or not
#	Mount the Loc Kit Dmg
#	Copy Loc Kit contents to Loc Environment
#	Copy tarballs to Component folder
#	Copy AppleGlot Env
#	Fix AppleGlot Env permission 
#	Copy GlotEnv (using addGlotEnvToLocEnv)
#	Set AppleGlot enviroment Language
#	Update AutoLayout Adjust Log
#	count WG files
#	Check Loc Kit
#	Create ALA log file
#	Run verificator
#	locuntar
#	Run flidentifier
#	Build file list
#---------------------------------------------------------------------------------------------

sub CopyLocKit
{
	my($inLocEnvPath, $inLocKitDmgPath, $inLocKit2DmgPath, $inLocKit3DmgPath, $inRunFlidentifier) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inLocKitDmgPath") && !(-d "$inLocKitDmgPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified LKCX dmg $inLocKitDmgPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	$gCurrentLocEnvType = AALocEnvUtilities::GetLocEnvTypeFromLocEnv($inLocEnvPath);

	if ($gCurrentLocEnvType == AALocEnvUtilities::kMacSWLocEnv
		|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWPDSLocEnv
		|| $gCurrentLocEnvType == AALocEnvUtilities::kMacSWProLocEnv)
	{
		if (-d "$inLocKitDmgPath")
		{
			CopyLXRipEnv($inLocEnvPath, $inLocKitDmgPath);
		}
		else
		{
			#-----------------------------------------------------------------------------------------
			#	Check Loc Kit Path
			#-----------------------------------------------------------------------------------------

			my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
			my $locKitCountryCode = AALocEnvUtilities::GetCountryCodeFromLocKitPath($inLocKitDmgPath);
			

			if ($countryCode ne $locKitCountryCode)
			{
				AALocUtilities::PrintLog("\n### ERROR: Loc Kit country code is not equal to loc env ($locKitCountryCode vs $countryCode)\n");
				AALocUtilities::PrintLog("           Do you want to continue to copy loc kit to your loc env? (y/[n])\n");

				$response = <STDIN>;
				
				if ($response =~ /y/i)
				{
					print "\n### INFO: Continue copy loc kit ($locKitCountryCode) to your loc env ($countryCode)\n";
				}
				else
				{
					print "\n### INFO: Stop copy loc kit to your loc env\n";
					return;
				}
			}


			CopyMacSWLocKit($inLocEnvPath, $inLocKitDmgPath, $inRunFlidentifier);
		}
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kWinSWLocEnv)
	{
		CopyWinSWLocKit($inLocEnvPath, $inLocKitDmgPath, $inRunFlidentifier);
	}
	elsif ($gCurrentLocEnvType == AALocEnvUtilities::kMacHelpLocEnv)
	{
		CopyMacHelpLocKit($inLocEnvPath, $inLocKitDmgPath, $inLocKit2DmgPath, $inLocKit3DmgPath);
	}
}


#---------------------------------------------------------------------------------------------
#	CopyMacSWLocKit
#
#	Check whether Loc Kit country code equal to Loc Env or not
#	Mount the Loc Kit Dmg
#	Copy Loc Kit contents to Loc Environment
#	Copy tarballs to Component folder
#	Copy AppleGlot Env
#	Fix AppleGlot Env permission 
#	Copy GlotEnv (using addGlotEnvToLocEnv)
#	Set AppleGlot enviroment Language
#	Update AutoLayout Adjust Log
#	count WG files
#	Check Loc Kit
#	Create ALA log file
#	Run verificator
#	locuntar
#	Run flidentifier
#	Build file list
#---------------------------------------------------------------------------------------------

sub CopyMacSWLocKit
{
	my($inLocEnvPath, $inLocKitDmgPath, $inRunFlidentifier) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inLocKitDmgPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified LKCX dmg $inLocKitDmgPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Copy Mac SW Loc Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	# Using VFS & DiskImage to do the image mounting and copying
	# much cleaner and safer than calling hdid and hdiutil directly.
	my $dmgObj = undef;
	my $mountpoint = undef;
	
	# mount the image
	$dmgObj = DiskImage->new(image => $inLocKitDmgPath);
	$dmgObj->attach(readonly => 1);
				
	# copy its contents
	$mountpoint = $dmgObj->getOneMountpoint();
	
	if ($mountpoint)
	{
		#-------------------------------------------------------------------------------------
		#	Copy LKCX files
		#-------------------------------------------------------------------------------------

		my $srcFolder;
		my $destFolder;
		
		AALocUtilities::PrintLog("Copying _LKCXInfo\n");
		$srcFolder = $mountpoint . "/_LKCXInfo/";
		$destFolder = $inLocEnvPath . "_LKCXInfo/"; 

		if (-d "$srcFolder")
		{
			`ditto "$srcFolder" "$destFolder"`;
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: Can't find _LKCXInfo folder in the Loc Kit\n");
		}

		
		AALocUtilities::PrintLog("Copying Submission Tarballs to Components folder\n");
		$srcFolder = $mountpoint . "/Submission/";
		$destFolder = $inLocEnvPath . "Components/"; 

		if (-d "$srcFolder")
		{
			`ditto "$srcFolder" "$destFolder"`;
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: Can't find Submission folder in the Loc Kit\n");
		}

		
		AALocUtilities::PrintLog("Copying Env_NoGlot\n");
		$srcFolder = $mountpoint . "/Env_NoGlot/";
		$destFolder = $inLocEnvPath . "Env_NoGlot/"; 

		if (-d "$srcFolder")
		{
			`ditto "$srcFolder" "$destFolder"`;
		}
		else
		{
			AALocUtilities::PrintLog("### WARNING: Can't find Env_NoGlot folder in the Loc Kit\n");
		}
		
		
		AALocUtilities::PrintLog("Copying AppleGlot Env\n");
		$srcFolder = $mountpoint . "/Env/";

		if (-d "$srcFolder")
		{
			`ditto "$srcFolder" "$appleGlotEnvPath"`;

			AALocUtilities::PrintLog("Fixing AppleGlot Env permission\n");
			system "$gSudoPath chmod -R +w $appleGlotEnvPath*";
		}
		else
		{
			AALocUtilities::PrintLog("### ERROR: Can't find AppleGlot folder in the Loc Kit\n");
		}

		
		AALocUtilities::PrintLog("Copying GlotEnv\n");
		`addGlotEnvToLocEnv -LXKitRoot $mountpoint`;


		#-------------------------------------------------------------------------------------
		#	Set AppleGlot Environment Language
		#-------------------------------------------------------------------------------------

		my $language = GetAppleGlotADLanguageCode($appleGlotEnvPath);
		
		if ($language eq "")
		{
			$locEnvLang = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
			
			if ($locEnvLang ne "")
			{
				$language = $AALocUtilities::kCountryCode2AGLanguageCode{$locEnvLang};
			}
		}
		
		if ($language eq "")
		{
			my $locLanguage = GetLprojLanguage($appleGlotEnvPath . "_NewLoc");
			
			if ($locLanguage ne "")
			{
				#
			}
		}
		
		if ($language ne "")
		{
			AALocUtilities::PrintLog("Set AppleGlot Env language to $language\n");
			`$gAppleGlotCLPath -d "$appleGlotEnvPath" setlangs en $language`;
		}
		else
		{
			AALocUtilities::PrintLog("ERROR: Cannot get language code of AppleGlot environment\n");
		}

		
		#-------------------------------------------------------------------------------------
		#	Update AutoLayout Adjust Log
		#-------------------------------------------------------------------------------------

		my $autoLayoutAdjusterLogFile = $inLocEnvPath
										. "_LKCXInfo/autolayoutadjuster_log/compare_nib_before_after_result.txt",


		AALocUtilities::PrintLog("Updating AutoLayout Adjust log\n");


		if (-e "$autoLayoutAdjusterLogFile")
		{
			UpdateAutoLayoutAdjustLog($inLocEnvPath, $appleGlotEnvPath);
		}
		else
		{
			AALocUtilities::PrintLog("### WARNING: The autoLayout log file doesn't exist.\n");
		}
		
		
		#-------------------------------------------------------------------------------------
		#	Find all comment in updated .strings
		#-------------------------------------------------------------------------------------
		
		# AALocUtilities::PrintLog("Finding comments in updated .strings\n");
		# FindAllCommentsInStrings($appleGlotEnvPath, kUpdatedOnly);
		
		
		#-------------------------------------------------------------------------------------
		#	Count WG files
		#-------------------------------------------------------------------------------------

		CountAppleGlotWGFiles($appleGlotEnvPath);

		AALocEnvUtilities::CopyReportFromAG2LocEnv($inLocEnvPath, "_WGWordCount.html", kNotOpen);

		
		#-------------------------------------------------------------------------------------
		#	Compare LocToolsEnvInfo
		#-------------------------------------------------------------------------------------
				
		

		#-------------------------------------------------------------------------------------
		#	Check Loc Kit
		#-------------------------------------------------------------------------------------
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Check Loc Kit\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		`"$gAACheckLKCXPath" "$inLocEnvPath"`;
		
		# my $checkLKCXLogFile = AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath) . "_checkLocKitLog.txt";
		# AALocFileUtilities::CopyFile($inLocEnvPath . "_LKCXInfo/" . $checkLKCXLogFile, AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . $checkLKCXLogFile, kNotOpen);


		#-------------------------------------------------------------------------------------
		#	ALA log file
		#-------------------------------------------------------------------------------------
		
		CreateALAChangesLog($inLocEnvPath);


		#-------------------------------------------------------------------------------------
		#	Verificator
		#-------------------------------------------------------------------------------------
		
		Verificator($appleGlotEnvPath);
		AALocEnvUtilities::CopyReportFromAG2LocEnv($inLocEnvPath, "_verificator.html", kNotOpen);
		

		#-------------------------------------------------------------------------------------
		#	locuntar
		#-------------------------------------------------------------------------------------
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# locuntar\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		Locuntar($inLocEnvPath);
		
		UpdateMailNotifyFromLocEnvInfo($inLocEnvPath);
		

		#-------------------------------------------------------------------------------------
		#	Run flidentifier
		#-------------------------------------------------------------------------------------
		
		if ($inRunFlidentifier eq kRunFlidentifier)
		{
			FLIdentifier($appleGlotEnvPath);
		}
		

		#-------------------------------------------------------------------------------------
		#	Build File List
		#-------------------------------------------------------------------------------------
		
		BuildAllFileList($appleGlotEnvPath);
		

		#-------------------------------------------------------------------------------------
		#	Process Nib Score
		#-------------------------------------------------------------------------------------
		
		`"$gAAProcessNibScorePath" "$inLocEnvPath"`;
	}
	else
	{
		AALocUtilities::PrintLog("ERROR: Could not mount Loc Kit image: $inLocKitDmgPath\n");
	}
	
	# unmount the image
	$dmgObj->detach();
}


#---------------------------------------------------------------------------------------------
#	CopyWinSWLocKit
#
#	Check whether Loc Kit country code equal to Loc Env or not
#	Mount the Loc Kit Dmg
#	Copy Loc Kit contents to Loc Environment
#	Copy tarballs to Component folder
#	Copy AppleGlot Env
#	Fix AppleGlot Env permission 
#	Copy GlotEnv (using addGlotEnvToLocEnv)
#	Set AppleGlot enviroment Language
#	Update AutoLayout Adjust Log
#	count WG files
#	Check Loc Kit
#	Create ALA log file
#	Run verificator
#	locuntar
#	Run flidentifier
#	Build file list
#---------------------------------------------------------------------------------------------

sub CopyWinSWLocKit
{
	my($inLocEnvPath, $inLocKitDmgPath, $inRunFlidentifier) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inLocKitDmgPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified LKCX dmg $inLocKitDmgPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Copy Win SW Loc Kit\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	# Using VFS & DiskImage to do the image mounting and copying
	# much cleaner and safer than calling hdid and hdiutil directly.
	my $dmgObj = undef;
	my $mountpoint = undef;
	
	# mount the image
	$dmgObj = DiskImage->new(image => $inLocKitDmgPath);
	$dmgObj->attach(readonly => 1);
				
	# copy its contents
	$mountpoint = $dmgObj->getOneMountpoint();
	
	if ($mountpoint)
	{
	}
	else
	{
		AALocUtilities::PrintLog("ERROR: Could not mount Loc Kit image: $inLocKitDmgPath\n");
	}
	
	# unmount the image
	$dmgObj->detach();
}


#---------------------------------------------------------------------------------------------
#	CopyMacHelpLocKit
#
#---------------------------------------------------------------------------------------------

sub CopyMacHelpLocKit
{
	my($inLocEnvPath, $inLocKitDmgPath, $inLocKit2DmgPath, $inLocKit3DmgPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inLocKitDmgPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified LKCX dmg $inLocKitDmgPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $isTransitLK = 0;
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if ((-e "$inLocKit2DmgPath") && (-e "$inLocKit3DmgPath"))
	{
		$fileExtension = AALocFileUtilities::GetFileExtension($inLocKitDmgPath);
		
		if ($fileExtension eq "dmg")
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# Copy Mac Help 019 dmgs\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			$destFolder = $helpEnvPath . "_In/_Images/_NewBase/";
			`ditto "$inLocKitDmgPath" "$destFolder"`;

			$destFolder = $helpEnvPath . "_In/_Images/_OldBase/";
			`ditto "$inLocKit2DmgPath" "$destFolder"`;

			$destFolder = $helpEnvPath . "_In/_Images/_OldLoc/";
			`ditto "$inLocKit3DmgPath" "$destFolder"`;


			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# MaterialSorter\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			system "MaterialSorter -env $helpEnvPath -clean -flatten -categorize -NBfromDmg -OBfromDmg -OLfromDmg";
		}
		else
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# Copy Mac Help Tarballs\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			$destFolder = $helpEnvPath . "_In/Extracted/_NewBase/";
			`ditto "$inLocKitDmgPath" "$destFolder"`;

			$destFolder = $helpEnvPath . "_In/Extracted/_OldBase/";
			`ditto "$inLocKit2DmgPath" "$destFolder"`;

			$destFolder = $helpEnvPath . "_In/Extracted/_OldLoc/";
			`ditto "$inLocKit3DmgPath" "$destFolder"`;


			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# MaterialSorter\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			system "MaterialSorter -env $helpEnvPath -clean -flatten -categorize -NBfromTar -OBfromTar -OLfromTar";
		}
	}
	else
	{
		$fileExtension = AALocFileUtilities::GetFileExtension($inLocKitDmgPath);
		
		if ($fileExtension eq "dmg")
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# Copy Mac Help Loc Kit\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			$destFolder = $helpEnvPath . "_In/_Images/_LXKit/";

			`ditto "$inLocKitDmgPath" "$destFolder"`;
			
		
			# Using VFS & DiskImage to do the image mounting and copying
			# much cleaner and safer than calling hdid and hdiutil directly.
			my $dmgObj = undef;
			my $mountpoint = undef;
			
			# mount the image
			$dmgObj = DiskImage->new(image => $inLocKitDmgPath);
			$dmgObj->attach(readonly => 1);
						
			# copy its contents
			$mountpoint = $dmgObj->getOneMountpoint();
			
			if ($mountpoint)
			{
				#-------------------------------------------------------------------------------------
				#	Copy LKCX files
				#-------------------------------------------------------------------------------------

				my $srcFolder;
				my $destFolder;
				
				AALocUtilities::PrintLog("Copying _LKCXInfo\n");
				$srcFolder = $mountpoint . "/_LKCXInfo/";
				$destFolder = $inLocEnvPath . "_LKCXInfo/"; 

				if (-d "$srcFolder")
				{
					`ditto "$srcFolder" "$destFolder"`;
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: Can't find _LKCXInfo folder in the Loc Kit\n");
				}

				
				AALocUtilities::PrintLog("Copying Submission Tarballs to Components folder\n");
				$srcFolder = $mountpoint . "/Submission/";
				$destFolder = $inLocEnvPath . "Components/"; 

				if (-d "$srcFolder")
				{
					`ditto "$srcFolder" "$destFolder"`;
				}
				else
				{
					AALocUtilities::PrintLog("### ERROR: Can't find Submission folder in the Loc Kit\n");
				}

				
				AALocUtilities::PrintLog("Copying Env_NoGlot\n");
				$srcFolder = $mountpoint . "/Env_NoGlot/";
				$destFolder = $inLocEnvPath . "Env_NoGlot/"; 

				if (-d "$srcFolder")
				{
					`ditto "$srcFolder" "$destFolder"`;
				}
				else
				{
					AALocUtilities::PrintLog("### WARNING: Can't find Env_NoGlot folder in the Loc Kit\n");
				}
				
				
				
				AALocUtilities::PrintLog("Copying GlotEnv\n");
				`addGlotEnvToLocEnv -LXKitRoot $mountpoint`;


				#-------------------------------------------------------------------------------------
				#	locuntar
				#-------------------------------------------------------------------------------------
				
				AALocUtilities::PrintLog("\n");
				AALocUtilities::PrintLog("#========================================================================================\n");
				AALocUtilities::PrintLog("# locuntar\n");
				AALocUtilities::PrintLog("#========================================================================================\n");

				Locuntar($inLocEnvPath);
				
				UpdateMailNotifyFromLocEnvInfo($inLocEnvPath);
			}
			else
			{
				AALocUtilities::PrintLog("ERROR: Could not mount Loc Kit image: $inLocKitDmgPath\n");
			}
			
			# unmount the image
			$dmgObj->detach();
										


			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# MaterialSorter\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			system "MaterialSorter -env $helpEnvPath -clean -flatten -categorize -NBfromLX -OBfromLX -OLfromLX";
		}
		else
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# Copy Mac Help Transit Env\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			$isTransitLK = 1;
			$helpEnvTransitPath = $helpEnvPath . "Transit/";
	
			AALocFileUtilities::RemoveFileAndFolder($helpEnvTransitPath);
			AALocFileUtilities::CreateFolderIfNotExist($helpEnvTransitPath);
		
			$result = AALocFileUtilities::CopyZipOrDmgToFolder($inLocKitDmgPath, $helpEnvTransitPath);
		}
	}


	if ($isTransitLK == 0)
	{
		#-----------------------------------------------------------------------------------------
		#
		#-----------------------------------------------------------------------------------------
		
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# ChangeTracker\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		system "ChangeTracker -env $helpEnvPath -clean -line -ni -ri -rui";

		BuildHelpHTMLFileList($helpEnvPath);


		my $locRequiredPath = $helpEnvPath . "_Working/_LocRequired/";
		my $locRequiredOrgPath = $helpEnvPath . "_Working/_LocRequired_Org/";

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("Backuping _LcoRequired\n");
			
		`ditto "$locRequiredPath" "$locRequiredOrgPath"`;


		#-----------------------------------------------------------------------------------------
		#	GetKeyword if TA or CH
		#-----------------------------------------------------------------------------------------
		
		my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
		
		if ($countryCode eq "TA" || $countryCode eq "CH")
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# GetKeyword\n");
			AALocUtilities::PrintLog("#========================================================================================\n");

			system "GetKeyword -env $helpEnvPath -keywordlist 'Chinese-Keyword Table.txt' -skipword 'Chinese-Skipword Table.txt'";

			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("Backuping Keyword\n");

			my $helpEnvADtableFilePath = $helpEnvPath . "_Working/ADtable.txt";
			my $helpEnvWGtableFilePath = $helpEnvPath . "_Working/WGtable.txt";

			`ditto "$helpEnvADtableFilePath" "$locRequiredOrgPath"`;
			`ditto "$helpEnvWGtableFilePath" "$locRequiredOrgPath"`;
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Diff Report of NB and OB
	#-----------------------------------------------------------------------------------------

	my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "NewBaseOldBaseDiffReport.txt";
	my $helpEnvInNewBasePath = $helpEnvPath . "_In/_Flattened/_NewBase/";
	my $helpEnvInOldBasePath = $helpEnvPath . "_In/_Flattened/_OldBase/";

	my $resultString = CompareFolder($helpEnvInNewBasePath, $helpEnvInOldBasePath);

	system "echo '$resultString' > $reportFilePath";


	#-----------------------------------------------------------------------------------------
	#	Backup Info
	#-----------------------------------------------------------------------------------------

	BackupLocEnvInfo($inLocEnvPath);
	UpdateMailNotifyFromLocEnvInfo($inLocEnvPath);
}


#---------------------------------------------------------------------------------------------
#	CopyBackupForBugFix
#
#	Check whether BackupFile country code equal to Loc Env or not
#	Copy Backup file contents to Loc Environment
#---------------------------------------------------------------------------------------------

sub CopyBackupForBugFix
{
	my($inLocEnvPath, $inBackupPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-e "$inBackupPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified Backup $inBackupPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Backup file Country Code
	#-----------------------------------------------------------------------------------------

	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $backupFileName = AALocFileUtilities::GetDirectoryBaseName($inBackupPath);

	$backupFileName =~ m/^(.*?)_(.*?)$/;
	my $backupFileCountryCode = $1; 

	if ($countryCode ne $backupFileCountryCode)
	{
		AALocUtilities::PrintLog("\n### ERROR: Backup File country code is not equal to loc env ($backupFileCountryCode vs $countryCode)\n");
		AALocUtilities::PrintLog("           Do you want to continue to copy backup to your loc env? (y/[n])\n");

		$response = <STDIN>;
		
		if ($response =~ /y/i)
		{
			print "\n### INFO: Continue copy backup ($backupFileCountryCode) to your loc env ($countryCode)\n";
		}
		else
		{
			print "\n### INFO: Stop copy backup to your loc env\n";
			return;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $lkcxInfoPath = $inLocEnvPath . "_LKCXInfo/"; 
	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $appleGlotEnvNewLocPath = $appleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvNewBasePath = $appleGlotEnvPath . "_NewBase/";
	my $appleGlotEnvOldLocPath = $appleGlotEnvPath . "_OldLoc/";
	my $appleGlotEnvOldBasePath = $appleGlotEnvPath . "_OldBase/";
	my $appleGlotEnvNewLocOrgPath = $appleGlotEnvPath . "_NewLoc_Org";

	AALocFileUtilities::CreateFolderIfNotExist($lkcxInfoPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Copy Backup for Bug Fix\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $locEnvBackupFolderPath = $inLocEnvPath . "BackupZip/";
	my $locEnvBackupProjectsFolderPath = $locEnvBackupFolderPath . "Projects/";
	my $locEnvBackupTarballsFolderPath = $locEnvBackupFolderPath . "Tarballs";
	my $locEnvBackupDecompressedTarballsFolderPath = $locEnvBackupFolderPath . "Tarballs_Decompressed/";
	my $appleGlotOutboundGlossariesPath = $appleGlotEnvPath . ".OutboundGlossaries/";
	my $locEnvGlotEnvFolderPath = $inLocEnvPath . "GlotEnv/";
	my $locEnvGlotEnvNewBaseFolderPath = $locEnvGlotEnvFolderPath . "_NewBase/";
	my $locEnvGlotEnvOutboundGlossariesPath = $locEnvGlotEnvFolderPath . ".OutboundGlossaries/";

	my $locEnvInfoFolderPath = $inLocEnvPath . "Info/";
	my $locEnvInfoFolderBackupPath = $inLocEnvPath . "Info_Org/";
	my $locEnvInfoFolderBackupReleasePath = $locEnvInfoFolderBackupPath . "Released/";
	my $locEnvInfoBugFixCommentsPath = $locEnvInfoFolderPath . "BugFixComments/";
	my $locEnvInfoComponentDataPath = $locEnvInfoFolderPath . "ComponentData/";
	my $locEnvInfoProjectsPath = $locEnvInfoFolderPath . "Projects/";

	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvProjectsBackupPath = $inLocEnvPath . "Projects_US/";

	my $tarballFolderPath;

	my $srcFilePath;
	my $destFilePath;
	
	my ($train, $update, $updateVer, $isHSR);
	
	
	#-------------------------------------------------------------------------------------
	#	Copy Zip
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Unzip Backup\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::CreateFolderIfNotExist($locEnvBackupFolderPath);
	AALocFileUtilities::RemoveFolderContent($locEnvBackupFolderPath);

	`unzip \"$inBackupPath\" -d \"$locEnvBackupFolderPath\"`;
		
	sleep 10;

	my($cmd_vol1, $cmd_dir1, $fileName) = File::Spec->splitpath($inBackupPath);

	$fileName =~ s/\..*//;		# remove file extension
	
	if (-d "$locEnvBackupFolderPath$fileName")
	{
		`mv $locEnvBackupFolderPath$fileName/* $locEnvBackupFolderPath`;
		AALocFileUtilities::RemoveFolder($locEnvBackupFolderPath . $fileName);
	}
	
	AALocFileUtilities::RemoveFolder($locEnvBackupFolderPath . "__MACOSX/");


	#-------------------------------------------------------------------------------------
	#	Copy Projects
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy Projects\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::CreateFolderIfNotExist($locEnvBackupProjectsFolderPath);
	AALocFileUtilities::RemoveFolderContent($locEnvBackupProjectsFolderPath);

	opendir(directory, $locEnvBackupFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if ($file =~ /Projects_(.*)/)
		{
			$result = AALocFileUtilities::CopyZipOrDmgToFolder($locEnvBackupFolderPath . $file, $locEnvBackupProjectsFolderPath);
		}
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Unzip Projects
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Unzip Projects\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	my $projectFile;

	opendir(directory, $locEnvBackupProjectsFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if ($file =~ /(.*)\.tgz$/)
		{
			AALocUtilities::PrintLog("Unzip $file\n");
			
			$projectFile = $locEnvBackupProjectsFolderPath . $file;
		
			`unzip \"$projectFile\" -d \"$locEnvBackupProjectsFolderPath\"`;
		}
	}
	
	sleep 10;

	foreach $file (@searchResult)
	{
		if ($file =~ /(.*)\.tgz$/)
		{
			$projectFile = $locEnvBackupProjectsFolderPath . $file;
			AALocFileUtilities::RemoveFile($projectFile);
		}
	}
	
	
	#-------------------------------------------------------------------------------------
	#	Decompress Tarballs
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Decompress Tarballs\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	my $tarballFilePath;

	opendir(directory, $locEnvBackupFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if ($file =~ /Tarballs_(.*)/)
		{
			$tarballFolderPath = $locEnvBackupFolderPath . $file;
			last;
		}
	}

	rename $tarballFolderPath, $locEnvBackupTarballsFolderPath;
	$locEnvBackupTarballsFolderPath = $locEnvBackupTarballsFolderPath . "/";


	AALocFileUtilities::CreateFolderIfNotExist($locEnvBackupDecompressedTarballsFolderPath);
	AALocFileUtilities::RemoveFolderContent($locEnvBackupDecompressedTarballsFolderPath);

	opendir(directory, $locEnvBackupTarballsFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if ($file =~ /(.*)\.tgz$/)
		{
			AALocUtilities::PrintLog("Decompressing $file\n");

			$tarballFilePath = $locEnvBackupTarballsFolderPath . $file;
		
			`gnutar xzf \"$tarballFilePath\" -C \"$locEnvBackupDecompressedTarballsFolderPath\"`;
		}
	}


	#-------------------------------------------------------------------------------------
	#	Components Array
	#-------------------------------------------------------------------------------------

	my @components = ();
	my @backupTarballs = ();

	opendir(directory, $locEnvBackupDecompressedTarballsFolderPath);
	@backupTarballs = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@backupTarballs)
	{
		if ($file =~ /BO_(.*)_(.*)_(.*)/)
		{
			push(@components, $1);
		}
	}


	#-------------------------------------------------------------------------------------
	#	Copy GlotEnv OutboundGlossaries files
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy GlotEnv OutboundGlossaries files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::CreateFolderIfNotExist($locEnvGlotEnvFolderPath);
	AALocFileUtilities::RemoveFolderContent($locEnvGlotEnvFolderPath);

	AALocFileUtilities::CreateFolderIfNotExist($locEnvGlotEnvOutboundGlossariesPath);
	AALocFileUtilities::RemoveFolderContent($locEnvGlotEnvOutboundGlossariesPath);
	
	
	my $outBoundGlossariesFolderPath;
	
	foreach $file (@backupTarballs)
	{
		if ($file =~ /BO_(.*)/)
		{
			AALocUtilities::PrintLog("Copying $file\n");

			$outBoundGlossariesFolderPath = $locEnvBackupDecompressedTarballsFolderPath . $file . "/OutboundGlossaries/";
			
			`ditto $outBoundGlossariesFolderPath $locEnvGlotEnvOutboundGlossariesPath`;
		}
	}


	#-------------------------------------------------------------------------------------
	#	Copy GlotEnv _NewBase files
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy GlotEnv _NewBase files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::CreateFolderIfNotExist($locEnvGlotEnvNewBaseFolderPath);
	AALocFileUtilities::RemoveFolderContent($locEnvGlotEnvNewBaseFolderPath);
	
	
	foreach $file (@backupTarballs)
	{
		if ($file =~ /BO_(.*)_(.*)_(.*)/)
		{
			$srcFilePath = $locEnvBackupDecompressedTarballsFolderPath . $file . "/NewBase/NewBase.cpgz";
			$destFilePath = $locEnvGlotEnvNewBaseFolderPath . $1 . "/";
			
			AALocUtilities::PrintLog("Copying $1\n");

			AALocFileUtilities::CreateFolderIfNotExist($destFilePath);
			
			`ditto -x $srcFilePath $destFilePath`;
		}
	}


	#-------------------------------------------------------------------------------------
	#	Info
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Create Bug Fix Comment files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	AALocFileUtilities::CreateFolderIfNotExist($locEnvInfoBugFixCommentsPath);

	foreach $file (@components)
	{
		AALocUtilities::PrintLog("Creating $file\n");

		open COMMENT, "> $locEnvInfoBugFixCommentsPath/$file";
		close COMMENT;
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy ComponentData.plist and Create Submission Receptacle\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	my $componentDataPlistFilePath;
	my $projectFilePath;
	my $mailNotify = "";
	
	AALocFileUtilities::CreateFolderIfNotExist($locEnvInfoComponentDataPath);
	AALocFileUtilities::CreateFolderIfNotExist($locEnvInfoProjectsPath);

	foreach $file (@backupTarballs)
	{
		if ($file =~ /BO_(.*)_(.*)_(.*)/)
		{
			$component = $1;
		
			AALocUtilities::PrintLog("Creating $component\n");
			
			if ($mailNotify eq "")
			{
				$srcFilePath = $locEnvBackupDecompressedTarballsFolderPath . $file . "/MailNotify";
				
				if (open LPFILE, $srcFilePath)
				{
					$saveRS = $/;
					undef $/;
					$mailNotify = <LPFILE>;
					$/ = $saveRS;
					close (LPFILE);
					
					$mailNotify =~ s/locsubmits\@group.apple.com,//;
					$mailNotify =~ s/xautosubmit\@group.apple.com,//;
				}
			}
			
			
			# copy ComponentData.plist
			
			$srcFilePath = $locEnvBackupDecompressedTarballsFolderPath . $file . "/ComponentData/" . $component;
			$destFilePath = $locEnvInfoComponentDataPath . $component;
			
			`ditto $srcFilePath $destFilePath`;
			
			
			# 

			$componentDataPlistFilePath = $srcFilePath . "/ComponentData.plist";
			
			my $dict = NSDictionary->dictionaryWithContentsOfFile_($componentDataPlistFilePath);
			my $comp = Foundation::perlRefFromObjectRef($dict);
			
			
			# read keys
			if (defined ($comp->{'Train'}))
			{
				$train = $comp->{'Train'};
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: Cannot find build train in ComponentData.plist in $component.\n");
			}

			if (defined ($comp->{'Update'}))
			{
				$update = $comp->{'Update'};
				$updateVer = $update;		
				$updateVer =~ s/${train}(.*)/$component/;
			}
			else
			{
				AALocUtilities::PrintLog("### ERROR: Cannot find update in ComponentData.plist in $component.\n");
			}

			$isHSR = 0;
			if (defined ($comp->{'SecurityLevel'}))
			{
				if (($comp->{'SecurityLevel'} eq "SHSR")
					|| ($comp->{'SecurityLevel'} eq "HSR"))
				{
						$isHSR = 1;
				}
			}
			
			
			$projectFilePath = $locEnvInfoProjectsPath . $component;
			
			# the content of the file should be the same as created by 'createSubmissionReceptacle'
			open(PROJFILE, "> $projectFilePath") or die "Can't open a file $projectFilePath\n";
			print PROJFILE 'my(%proj);';
			print PROJFILE "\n";
			print PROJFILE "\$proj{'Name'} = \"${component}_Tier1\";\n";
			print PROJFILE "\$proj{'Train'} = \"${train}\";\n";
			print PROJFILE "\$proj{'RcName'} = \"${component}\";\n";
			print PROJFILE "\$proj{'Dir'} = \"##LOCARCHIVE/Projects/${component}_Tier1_proj/\";\n";
			if ($isHSR)
			{
				print PROJFILE "\$proj{'Security'} = 'SHSR';\n";
			}
			print PROJFILE 'return(\%proj);';
			close PROJFILE;
		}
	}
	
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Write MailNotify and MailNotify.SHSR\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	$srcFilePath = $locEnvInfoFolderPath . "MailNotify.SHSR";
	open mailNotifyFile, "> $srcFilePath" or die "Failed to open $srcFilePath\n";
		print mailNotifyFile "xautosubmit\@group.apple.com, $mailNotify\n";
	close mailNotifyFile;

	$srcFilePath = $locEnvInfoFolderPath . "MailNotify";
	open mailNotifyFile, "> $srcFilePath" or die "Failed to open $srcFilePath\n";
		print mailNotifyFile "locsubmits\@group.apple.com, $mailNotify\n";
	close mailNotifyFile;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Backup Info\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	BackupLocEnvInfo($inLocEnvPath);


	#-------------------------------------------------------------------------------------
	#	Projects
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Create Projects and AppleGlot Env\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::CreateFolderIfNotExist($locEnvProjectsPath);
	AALocFileUtilities::RemoveFolderContent($locEnvProjectsPath);
	AALocFileUtilities::CreateFolderIfNotExist($locEnvProjectsBackupPath);
	AALocFileUtilities::RemoveFolderContent($locEnvProjectsBackupPath);
	
	opendir(directory, $locEnvBackupProjectsFolderPath);
	@result = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@result)
	{
		$srcFilePath = $locEnvBackupProjectsFolderPath . $file . "/Localization.plist";
		$destFilePath = $locEnvProjectsBackupPath . $file . "/Localization.plist";
		
		`ditto $srcFilePath $destFilePath`;
		
		$file =~ m/(.*)_(.*)_(.*)/;
		$component = $1;
		
		AALocUtilities::PrintLog("Creating $component\n");
		
		$srcFilePath = $locEnvBackupProjectsFolderPath . $file;
		$destFilePath = $appleGlotEnvNewBasePath . $component;
		
		`ditto $srcFilePath $destFilePath`;

		$destFilePath = $appleGlotEnvNewBasePath . $component . "/Localization.plist";
		AALocFileUtilities::RemoveFile($destFilePath);


		$srcFilePath = $appleGlotEnvNewBasePath . $component;
		$destFilePath = $appleGlotEnvOldBasePath . $component;
		
		`ditto $srcFilePath $destFilePath`;


		$srcFilePath = $appleGlotEnvNewBasePath . $component;
		$destFilePath = $appleGlotEnvOldLocPath . $component;
		
		`ditto $srcFilePath $destFilePath`;
	}


	#-------------------------------------------------------------------------------------
	#
	#-------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Update Tar Number\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::CreateFolderIfNotExist($locEnvInfoFolderBackupReleasePath);

	opendir(directory, $locEnvBackupTarballsFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		# QTApplications_ToroTiger.74A65.01_FU_1.tgz
		if ($file =~ /(.*)_(.*)_(.*)_(.*)\.tgz/)
		{
			$component = $1;
			$tarNumber = $4;
			
			AALocUtilities::PrintLog("$component $tarNumber\n");

			#-----------------------------------------------------------------------------------------
			#
			#-----------------------------------------------------------------------------------------

			my $locPlistFile = $locEnvProjectsBackupPath . $component . "_Tier1_proj/Localization.plist";

			if (open LPFILE, $locPlistFile)
			{
				$saveRS = $/;
				undef $/;
				$lpData = <LPFILE>;
				$/ = $saveRS;
				close (LPFILE);
				
				($locPJName) = $lpData =~ /<key>\s*LocProjectName\s*<\/key>\s*<string>\s*(.*?)\s*<\/string>/i;
				($locPJBase) = $lpData =~ /<key>\s*LocProjectBaseVersion\s*<\/key>\s*<string>\s*(.*?)\s*<\/string>/i;
				($locPJlocv) = $lpData =~ /<key>\s*LocProjectLocVersion\s*<\/key>\s*<string>\s*(\d*?)\s*<\/string>/i;
				$locPJlocv = sprintf ("%02d", $tarNumber);

				$lpData =~ s/<key>\s*LocProjectLocVersion\s*<\/key>\s*<string>\s*\d*\s*<\/string>/<key>LocProjectLocVersion<\/key>\n\t<string>${locPJlocv}<\/string>/i;			
				
				open LPFILE, ">$locPlistFile";
				print LPFILE "$lpData";
				close (LPFILE);
			}

				
			if (open(COUNTER, ">" .$locEnvInfoFolderBackupReleasePath."/$component"))
			{
				print COUNTER "$tarNumber\n";
				close (COUNTER);
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	SelectBugFixComponents
#---------------------------------------------------------------------------------------------

sub SelectBugFixComponents
{
	my($inLocEnvPath, $inComponentNames) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Check Components
	#-----------------------------------------------------------------------------------------

	if ($inComponentNames eq "")
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified -comps.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my @components = split(/\,/, $inComponentNames);
	

	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $appleGlotEnvNewBasePath = $appleGlotEnvPath . "_NewBase/";

	opendir(directory, $appleGlotEnvNewBasePath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $component (@searchResult)
	{
		if (grep {$_ eq $component} @components)
		{
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
			AALocUtilities::PrintLog("# Bug Fix component $component\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
			AALocUtilities::PrintLog("\n");
		}
		else
		{
			RemoveComponent($inLocEnvPath, $component);
			AALocUtilities::PrintLog("\n");
		}
	}
}


#---------------------------------------------------------------------------------------------
#	BugFixPreProcess
#---------------------------------------------------------------------------------------------

sub BugFixPreProcess
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $appleGlotEnvNewLocPath = $appleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvNewLocOrgPath = $appleGlotEnvPath . "_NewLoc_Org";
	
	#-------------------------------------------------------------------------------------
	#	AppleGlot Pass 1, 2 and 3
	#-------------------------------------------------------------------------------------

	system "$gAALocCommandPath -runAppleGlotPass1 -locenv $inLocEnvPath";
	system "$gAALocCommandPath -runAppleGlotPass2And3 -locenv $inLocEnvPath";
	

	#-------------------------------------------------------------------------------------
	#	Compare OldLoc and NewLoc
	#-------------------------------------------------------------------------------------
	
	CompareOldLocNewLoc($appleGlotEnvPath, "");
	AALocEnvUtilities::CopyReportFromAG2LocEnv($inLocEnvPath, "_OldLoc_vs_NewLoc_Comp_Result.txt");
	

	#-------------------------------------------------------------------------------------
	#	Build File List
	#-------------------------------------------------------------------------------------
	
	BuildAllFileList($appleGlotEnvPath);


	#-----------------------------------------------------------------------------------------
	#	Backup NewLoc
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Backup NewLoc\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	`ditto $appleGlotEnvNewLocPath $appleGlotEnvNewLocOrgPath`;
}


#---------------------------------------------------------------------------------------------
#	Verificator
#---------------------------------------------------------------------------------------------

sub Verificator
{
	my($inAppleGlotEnvPath) = @_;

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);

	my $appleGlotNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $verificatorReportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_verificator.html";

	if (-e $verificatorReportFilePath)
	{
		system "rm $verificatorReportFilePath";
	}

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Verificator\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gVerificatorPath -newLoc "$appleGlotNewLocPath" > "$verificatorReportFilePath"`;
	AALocUtilities::PrintLog("verificator report: $verificatorReportFilePath\n");
	
	# FixFLVerifierReport($flVerifierReportFilePath);
}


#---------------------------------------------------------------------------------------------
#	CreateALAChangesLog
#---------------------------------------------------------------------------------------------

sub CreateALAChangesLog
{
	my($inLocEnvPath) = @_;

	my $lkcxInfoPath = $inLocEnvPath . "_LKCXInfo/";
	
	
	if (!(-d $lkcxInfoPath))
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# Create ALA Changes Log\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("\n### ERROR: Cannot find _LKCXInfo folder.\n");
		AALocUtilities::PrintLog("\n");

		return;
	}
	
	
	my $lprojLanguageCode = AALocEnvUtilities::GetLprojLanguageCodeFromLocEnv($inLocEnvPath);
	my $alaLogPath = $inLocEnvPath . "_LKCXInfo/autolayoutadjuster_log/";
	my $tempFilePath;
	my @theALAChanges = ();


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Create ALA Changes Log\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	opendir(directory, $alaLogPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);


	foreach $file (@searchResult)
	{
		$alaLogFilePath = $alaLogPath . $file . "/" . $file . "_log.txt.gz";
		$tempCompressFilePath = "/tmp/$file" . "_log.txt.gz";
		$tempFilePath = "/tmp/$file" . "_log.txt";
	
		if (-e $alaLogFilePath)
		{
			AALocUtilities::PrintLog("Creating $file\n");

			system "cp '$alaLogFilePath' '$tempCompressFilePath'";
			system "gzip -d '$tempCompressFilePath'";
		
			open(FILECONTENT, "<$tempFilePath") or die "Cannot open '$tempFilePath': $!";
				@fileContent = <FILECONTENT>;
			close(FILECONTENT);
	
			$currentNibFile = "";
			$currentOID = "";
			$currentCood = "";
	
			foreach $line(@fileContent)
			{
				if ($line =~ m/^nib:(.*)_NewLoc\/(.*?)$/)
				{
					if ($currentNibFile ne "" && $currentOID ne "")
					{
						push @theALAChanges,	{	"filePath"	=> $currentNibFile,
													"oid"		=> $currentOID,
													"cood"		=> $currentCood,
												};
					}
					
					$currentNibFile = $2;
					$currentNibFile =~ s|$lprojLanguageCode.lproj|English.lproj|;


					#--Debug------------------------------------------------------------------------------
					print STDERR "[Debug:AAflverifierFilter] currentNibFile $nibFile\n" if ($gDebug);
					#-------------------------------------------------------------------------------------
				}
				elsif ($line =~ m/^\t(.*?), (.*?), (.*), (.*), (.*) => \{\{(.*)\}\}, (.*)$/)
				{
					$oid = $2;
					$cood = $6;
					$cood =~ s|\*||;
					$cood =~ s|\*||;
					$cood =~ s|\*||;
					$cood =~ s|\*||;
					$cood = "{{" . $cood . "}}";

					if ($currentOID eq "")
					{
						$currentOID = $oid;
						$currentCood = $cood;
					}
					elsif ($currentOID eq $oid)
					{
						$currentCood = $cood;
					}
					elsif ($currentOID ne $oid)
					{
						push @theALAChanges,	{	"filePath"	=> $currentNibFile,
													"oid"		=> $currentOID,
													"cood"		=> $currentCood,
												};
					
						$currentOID = $oid;
						$currentCood = $cood;
					}
					else
					{
						$currentOID = $oid;
						$currentCood = $cood;
					}

					#--Debug------------------------------------------------------------------------------
					print STDERR "[Debug:AAflverifierFilter] $oid $cood\n" if ($gDebug);
					#-------------------------------------------------------------------------------------
				}
			}
		
			if ($currentNibFile ne "" && $currentOID ne "")
			{
				push @theALAChanges,	{	"filePath"	=> $currentNibFile,
											"oid"		=> $currentOID,
											"cood"		=> $currentCood,
										};
			}

			`rm $tempFilePath` if (-e $tempFilePath);
		}
	}
	

	my $alaChangesLogFilePath = $inLocEnvPath . "_LKCXInfo/alaChangesLog";

	open alaChangedLogFile, "> $alaChangesLogFilePath" or die "Failed to open $alaChangesLogFilePath\n";

	for ($index = 0; $index < (scalar @theALAChanges); $index++)
	{
		my %alaChangesItem = %{$theALAChanges[$index]};
		
		print alaChangedLogFile "$alaChangesItem{'filePath'}\t";
		print alaChangedLogFile "$alaChangesItem{'oid'}\t";
		print alaChangedLogFile "$alaChangesItem{'cood'}\n";
		
		#--Debug--------------------------------------------------------------------------
		if ($gDebug)
		{
			print STDERR "[Debug:AAflverifierFilter] file path: $alaChangesItem{'filePath'}\n";
			print STDERR "[Debug:AAflverifierFilter] oid:       $alaChangesItem{'oid'}\n";
			print STDERR "[Debug:AAflverifierFilter] cood:      $alaChangesItem{'cood'}\n";
		}
		#-------------------------------------------------------------------------------------
	}

	close alaChangedLogFile;
}


#---------------------------------------------------------------------------------------------
#	RemoveComponent
#---------------------------------------------------------------------------------------------

sub RemoveComponent
{
	my($inLocEnvPath, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------

	my $appleGlotEnv = AALocEnvUtilities::GetAppleGlotEnvFromLocEnv($inLocEnvPath);
	my $locEnvGlotEnvNewBasePath = $inLocEnvPath . "GlotEnv/_NewBase/";
	my $locEnvGlotEnvOutboundGlossariesPath = $inLocEnvPath . "GlotEnv/.OutboundGlossaries/";
	my $locEnvAppleGlotPath = $inLocEnvPath . "$appleGlotEnv/";
	my $locEnvInfoComponentDataPath = $inLocEnvPath . "Info/ComponentData/";
	my $locEnvInfoProjectsPath = $inLocEnvPath . "Info/Projects/";
	my $locEnvInfoBugFixCommentsPath = $inLocEnvPath . "Info/BugFixComments/";
	my $locEnvInfoReleasedPath = $inLocEnvPath . "Info/Released/";
	my $locEnvInfoOrgComponentDataPath = $inLocEnvPath . "Info_Org/ComponentData/";
	my $locEnvInfoOrgProjectsPath = $inLocEnvPath . "Info_Org/Projects/";
	my $locEnvInfoOrgBugFixCommentsPath = $inLocEnvPath . "Info_Org/BugFixComments/";

	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvProjectsUSPath = $inLocEnvPath . "Projects_US/";

	my $locEnvLKCXInfoComponentDataPath = $inLocEnvPath . "_LKCXInfo/_ComponentData/";
	my $locEnvLKCXInfoAutoLayoutAdjusterLogPath = $inLocEnvPath . "_LKCXInfo/autolayoutadjuster_log/";
	my $locEnvLKCXInfoFlidentifierResultPath = $inLocEnvPath . "_LKCXInfo/flidentifier_result/";


	#-----------------------------------------------------------------------------
	#	AppleGlot Environment
	#-----------------------------------------------------------------------------

	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Remove component $inComponentName\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	#-----------------------------------------------------------------------------
	#	AppleGlot Environment
	#-----------------------------------------------------------------------------

	RemoveComponentFromAppeleGlotEnvironment($locEnvAppleGlotPath, $inComponentName);


	#-----------------------------------------------------------------------------
	#	GlotEnv
	#-----------------------------------------------------------------------------

	AALocFileUtilities::RemoveFolder($locEnvGlotEnvNewBasePath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvGlotEnvOutboundGlossariesPath . $inComponentName . ".cpgz");


	#-----------------------------------------------------------------------------
	#	Info
	#-----------------------------------------------------------------------------

	AALocFileUtilities::RemoveFolder($locEnvInfoComponentDataPath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvInfoProjectsPath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvInfoBugFixCommentsPath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvInfoReleasedPath . $inComponentName);
	AALocFileUtilities::RemoveFolder($locEnvInfoOrgComponentDataPath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvInfoOrgProjectsPath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvInfoOrgBugFixCommentsPath . $inComponentName);


	#-----------------------------------------------------------------------------
	#	Projects
	#-----------------------------------------------------------------------------

	AALocFileUtilities::RemoveFolder($locEnvProjectsPath . $inComponentName . "_Tier1_proj");
	AALocFileUtilities::RemoveFolder($locEnvProjectsPath . $inComponentName . "_Tier2_proj");
	AALocFileUtilities::RemoveFolder($locEnvProjectsUSPath . $inComponentName . "_Tier1_proj");
	AALocFileUtilities::RemoveFolder($locEnvProjectsUSPath . $inComponentName . "_Tier2_proj");


	#-----------------------------------------------------------------------------
	#	LKCXInfo
	#-----------------------------------------------------------------------------

	AALocFileUtilities::RemoveFolder($locEnvLKCXInfoComponentDataPath . $inComponentName);
	AALocFileUtilities::RemoveFolder($locEnvLKCXInfoAutoLayoutAdjusterLogPath . $inComponentName);
	AALocFileUtilities::RemoveFile($locEnvLKCXInfoFlidentifierResultPath . $inComponentName . ".txt");


	#-----------------------------------------------------------------------------
	#	File List
	#-----------------------------------------------------------------------------
	
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "RTFFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "RTFUpdatedFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "PlistFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "PlistUpdatedFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "XMLFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "XMLUpdatedFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "HTMLFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "HTMLUpdatedFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "NibFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "NibUpdatedFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "RsrcFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "RsrcUpdatedFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "StringsFileList.txt", $inComponentName);
	#	RemoveComponentFromFileList($locEnvAppleGlotPath . "_Logs/" . "StringsUpdatedFileList.txt", $inComponentName);

	AALocFileUtilities::RemoveFile($locEnvAppleGlotPath . "_Logs/" . "LocalizableFiles.plist");
}


#---------------------------------------------------------------------------------------------
#	RemoveComponentFromFileList
#---------------------------------------------------------------------------------------------

sub RemoveComponentFromFileList
{
	my($inFileListPath, $inComponent) = @_;


	if (!(-e $inFileListPath))
	{
		return;
	}

	open(FILELISTCONTENT, "<$inFileListPath") or die "Cannot open '$inFileListPath': $!";
		@fileListContent = <FILELISTCONTENT>;
	close(FILELISTCONTENT);

	open fileListFile, "> $inFileListPath" or die "Failed to open $inFileListPath\n";

	foreach $line(@fileListContent)
	{
		$line =~ m/^(.*?)\t(.*?)\t(.*?)$/;
		my $filePath = $2;

		if (!($filePath =~ m/^\/$inComponent\//))
		{
			print fileListFile $line;
		}
	}

	close fileListFile;
}


#---------------------------------------------------------------------------------------------
#	CheckLKCX
#---------------------------------------------------------------------------------------------

sub CheckLKCX
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	`"$gAACheckLKCXPath" "$inLocEnvPath"`;
}


#---------------------------------------------------------------------------------------------
#	CheckConductorLocEnv
#---------------------------------------------------------------------------------------------

sub CheckConductorLocEnv
{
	my($inLocEnvPath) = @_;
	
	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	`"$gAACheckConductorLocEnvPath" "$inLocEnvPath"`;
	
	
	#-------------------------------------------------------------------------------------
	#	Process Nib Score
	#-------------------------------------------------------------------------------------
	
	`"$gAAProcessNibScorePath" -conductor "$inLocEnvPath"`;
}
	

#---------------------------------------------------------------------------------------------
#	Locuntar
#---------------------------------------------------------------------------------------------

sub Locuntar
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	locuntar
	#-----------------------------------------------------------------------------------------

	my $locEnvComponentsPath = $inLocEnvPath . "Components/";

	AALocUtilities::PrintLog("locuntar $locEnvComponentsPath\n");
	
	`cd $locEnvComponentsPath`;
	`locuntar $locEnvComponentsPath*`;


	#-----------------------------------------------------------------------------------------
	#	Delete Components
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("Delete Components\n");
	AALocFileUtilities::RemoveFolder($locEnvComponentsPath);
	AALocFileUtilities::CreateFolderIfNotExist($locEnvComponentsPath);
	

	#-----------------------------------------------------------------------------------------
	#	Backup Projects
	#-----------------------------------------------------------------------------------------
	
	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvProjectsBackupPath = $inLocEnvPath . "Projects_US/";

	AALocUtilities::PrintLog("Backup $inLocEnvPath Projects\n");
	# `ditto "$locEnvProjectsPath" "$locEnvProjectsBackupPath"`;
	`mv "$locEnvProjectsPath" "$locEnvProjectsBackupPath"`;
	AALocFileUtilities::CreateFolderIfNotExist($locEnvProjectsPath);


	#-----------------------------------------------------------------------------------------
	#	Backup Info
	#-----------------------------------------------------------------------------------------

	BackupLocEnvInfo($inLocEnvPath);
}


#---------------------------------------------------------------------------------------------
#	BackupLocEnvInfo
#---------------------------------------------------------------------------------------------

sub BackupLocEnvInfo
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $locEnvInfoPath = $inLocEnvPath . "Info";
	my $locEnvInfoBackupPath = $inLocEnvPath . "Info_Org";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Backup $inLocEnvPath Info\n");
	
	`ditto $locEnvInfoPath $locEnvInfoBackupPath`;
}


#---------------------------------------------------------------------------------------------
#	UpdateMailNotifyFromLocEnvInfo
#---------------------------------------------------------------------------------------------

sub UpdateMailNotifyFromLocEnvInfo
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $locEnvInfoFilePath = $inLocEnvPath . "LocEnvInfo";

	if (-e $locEnvInfoFilePath)
	{
		my $locEnvInfoPath = $inLocEnvPath . "Info";
		my $locEnvInfoBackupPath = $inLocEnvPath . "Info_Org";

		my $mailNotifyFilePath = $locEnvInfoPath . "/MailNotify";
		my $mailNotifySHSRFilePath = $locEnvInfoPath . "/MailNotify.SHSR";
		my $mailNotifyOrgFilePath = $locEnvInfoBackupPath . "/MailNotify";
		my $mailNotifySHSROrgFilePath = $locEnvInfoBackupPath . "/MailNotify.SHSR";


		#-----------------------------------------------------------------------------------------
		#
		#-----------------------------------------------------------------------------------------

		my $saveRS = $/;
		undef $/;

		open(LOCENVINFOFILECONTENT, "<$locEnvInfoFilePath") or die "Cannot open '$locEnvInfoFilePath': $!";
			@locEnvInfoFILECONTENT = split /[\n\r]/, <LOCENVINFOFILECONTENT>;
		close(LOCENVINFOFILECONTENT);

		$/ = $saveRS;

		$mailNotify = $locEnvInfoFILECONTENT[1];
		
		
		system "echo 'locsubmits\@group.apple.com, $mailNotify' > $mailNotifyFilePath";
		system "echo 'locsubmits\@group.apple.com, $mailNotify' > $mailNotifyOrgFilePath";
		system "echo 'xautosubmit\@group.apple.com, $mailNotify' > $mailNotifySHSRFilePath";
		system "echo 'xautosubmit\@group.apple.com, $mailNotify' > $mailNotifySHSROrgFilePath";
	}
}


#---------------------------------------------------------------------------------------------
#	RestoreLocEnvInfo
#---------------------------------------------------------------------------------------------

sub RestoreLocEnvInfo
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $locEnvInfoPath = $inLocEnvPath . "Info/";
	my $locEnvInfoBackupPath = $inLocEnvPath . "Info_Org/";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Restore $inLocEnvPath Info\n");
	
	AALocFileUtilities::RemoveFolderContent($locEnvInfoPath);
	`ditto $locEnvInfoBackupPath $locEnvInfoPath`;
}


#---------------------------------------------------------------------------------------------
#	LocalizeLocversionPlist
#
#	Localize locversion.plist in _NewLoc
#	Backup _NewLoc to _NewLoc_Org
#---------------------------------------------------------------------------------------------

sub LocalizeLocversionPlist
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified AppleGlot environment $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Localize Locversion.plist
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Localize Locversion.plist in $inAppleGlotEnvPath\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $lprojLanguageCode = GetLprojLanguage($inAppleGlotEnvPath . "_NewLoc");
	my $reportFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_fixLocversionPlist.txt";


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:LocalizeLocversionPlist] lproj Language code: $lprojLanguageCode\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------

	system "check_locfiles -projdir $appleGlotEnvNewLocPath -lang $lprojLanguageCode -fixLocversionPlist > $reportFilePath";


	#-----------------------------------------------------------------------------------------
	#	Check Error
	#-----------------------------------------------------------------------------------------

	my $line;
	my $hasError = 0;
	my $firstError = 1;

	open(LOGFILECONTENT, "<$reportFilePath") or die "Cannot open '$reportFilePath': $!";
		@logFileContent = <LOGFILECONTENT>;
	close(LOGFILECONTENT);

	foreach $line(@logFileContent)
	{
		if ($hasError)
		{
			chomp($line);
			AALocUtilities::PrintLog("$line/$lprojLanguageCode.lproj/\n");
			$hasError = 0;
		}
		elsif ($line =~ m/## WARNING - MISSING LOC PACKAGE/)
		{
			# AALocUtilities::PrintLog("$line");
			if ($firstError)
			{
				AALocUtilities::PrintLog("### ERROR: Need manually fix the locversion.plist in the following path:\n");
				$firstError = 0;
			}
			
			$hasError = 1;
		}
	}


	#-----------------------------------------------------------------------------------------
	#	Backup NewLoc
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Backup NewLoc\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	my $appleGlotNewLocPath = $inAppleGlotEnvPath . "_NewLoc";
	my $appleGlotNewLocOrgPath = $inAppleGlotEnvPath . "_NewLoc_Org";

	AALocUtilities::PrintLog("Backup $appleGlotNewLocPath\n");
	AALocUtilities::PrintLog("to     $appleGlotNewLocOrgPath\n");
	
	`ditto $appleGlotNewLocPath $appleGlotNewLocOrgPath`;
}


#---------------------------------------------------------------------------------------------
#	DittoProj
#---------------------------------------------------------------------------------------------

sub DittoProj
{
	my($inLocEnvPath, $inAppleGlotEnvPath, $inSanitize, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# dittoProj\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvProjectsBackupPath = $inLocEnvPath . "Projects_US";
	my $locEnvGlossariesPath = $inLocEnvPath . "Glossaries/";
	my $locEnvTarOutPath = $inLocEnvPath . "TarOut/";
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $lprojLanguage = GetLprojLanguage($appleGlotEnvNewLocPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Cleanup\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::RemoveFolderContent($locEnvProjectsPath);
	AALocFileUtilities::RemoveFolderContent($locEnvGlossariesPath);
	AALocFileUtilities::RemoveFolderContent($locEnvTarOutPath);

	AALocUtilities::PrintLog("Restore Projects backup\n");
	# SA system "ditto '$locEnvProjectsBackupPath' '$locEnvProjectsPath'";
	`ditto "$locEnvProjectsBackupPath" "$locEnvProjectsPath"`;


	#-----------------------------------------------------------------------------------------
	#	dittoProj
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# ditto\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	if ($inSanitize eq kSanitize)
	{
		if ($inComponentName eq "")
		{
			AALocUtilities::PrintLog("ditto All Components\n");
			system "dittoProj --AGEnv $inAppleGlotEnvPath --sanitize";
		}
		else
		{
			AALocUtilities::PrintLog("ditto $inComponentName\n");
			system "dittoProj --AGEnv $inAppleGlotEnvPath --sanitize $inComponentName";
		}
	}
	else
	{
		if ($inComponentName eq "")
		{
			AALocUtilities::PrintLog("ditto sanitize All Components\n");
			system "dittoProj --AGEnv $inAppleGlotEnvPath";
		}
		else
		{
			AALocUtilities::PrintLog("ditto don't sanitize $inComponentName\n");
			system "dittoProj --AGEnv $inAppleGlotEnvPath $inComponentName";
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Copy .rsrc files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	# chomp(@searchResult = `find "$appleGlotEnvNewLocPath" -type f \\( -path "*/*.rsrc" \\)`);
	chomp(@searchResult = `find $appleGlotEnvNewLocPath -type f | grep ".rsrc"`);

	foreach $file (@searchResult)
	{
		if (-s "$file" <= 81)
		{
			my $patialFilePathName = AALocAppleGlotUtilities::GetPartialFilePathNameInAppleGlotEnv($file, $appleGlotEnvNewLocPath);
			my $componentName = AALocAppleGlotUtilities::GetComponentNameInAppleGlotEnv($file, $appleGlotEnvNewLocPath);
			my $componentProjectName = AALocEnvUtilities::GetComponentProjectName($inLocEnvPath, $componentName);
			my $componentProjectFolderPath = $locEnvProjectsPath . $componentProjectName . "/";
			
			AALocUtilities::PrintLog("Copying $patialFilePathName\n");

			if (-d $componentProjectFolderPath)
			{
				my $targetFile = $componentProjectFolderPath . GetFileSubPathInAppleGlotEnv($file, $appleGlotEnvNewLocPath);

				`cp "$file" "$targetFile"`;
				`setFinderLabel None "$targetFile"`;
			}
			else
			{
				AALocUtilities::PrintLog("        cannot find $componentProjectName in Projects folder\n");
			}
		}
	}


	#-----------------------------------------------------------------------------------------
	#	check_locfiles
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Processing check_locfiles\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	CheckLocfiles($inLocEnvPath);
}


#---------------------------------------------------------------------------------------------
#	DittoHelpProj
#---------------------------------------------------------------------------------------------

sub DittoHelpProj
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# dittoHelpProj\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvProjectsBackupPath = $inLocEnvPath . "Projects_US";
	my $locEnvGlossariesPath = $inLocEnvPath . "Glossaries/";
	my $locEnvTarOutPath = $inLocEnvPath . "TarOut/";
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $lprojLanguage = GetLprojLanguage($appleGlotEnvNewLocPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Cleanup\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	AALocFileUtilities::RemoveFolderContent($locEnvProjectsPath);
	AALocFileUtilities::RemoveFolderContent($locEnvGlossariesPath);
	AALocFileUtilities::RemoveFolderContent($locEnvTarOutPath);

	AALocUtilities::PrintLog("Restore Projects backup\n");
	`ditto "$locEnvProjectsBackupPath" "$locEnvProjectsPath"`;


	#-----------------------------------------------------------------------------------------
	#	dittoProj
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# ditto\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");


	system "dittoProj --LBEnv $helpEnvPath --sanitize";
}


#---------------------------------------------------------------------------------------------
#	CheckComponentDataPlist
#---------------------------------------------------------------------------------------------

sub CheckComponentDataPlist
{
	my($inComponent, $inComponentDataPlistFilePath, $inCountryCode, $inReportFilePath) = @_;
	my $resultString = "No Problem Found";
	
	if (-e $inComponentDataPlistFilePath)
	{
		my $plistObject = NSDictionary->dictionaryWithContentsOfFile_($inComponentDataPlistFilePath);

		if ($plistObject and $$plistObject)
		{
			$languageObject = $plistObject->objectForKey_("Language");

			if ($languageObject and $$languageObject)
			{
				$languageCode = $languageObject->description()->UTF8String();

				if ($languageCode ne $inCountryCode)
				{
					$resultString = "### ERROR: Language code incorrect ($languageCode vs $inCountryCode).";
				}
			}
			else
			{
				$resultString = "### ERROR: cannot find Language code";
			}
		}
		else
		{
			$resultString = "### ERROR: ComponentData.plist has problem.";
		}
	}
	else
	{
		$resultString = "### ERROR: cannot find ComponentData.plist";
	}

	system "echo '$resultString' >> $inReportFilePath";
}


#---------------------------------------------------------------------------------------------
#	Loctar
#---------------------------------------------------------------------------------------------

sub Loctar
{
	my($inLocEnvPath, $inComponentName, $inLocVer) = @_;
	
	my $lprojLanguageCode = AALocEnvUtilities::GetLprojLanguageCodeFromLocEnv($inLocEnvPath);
	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $locEnvGlotEnvPath = $inLocEnvPath . "GlotEnv/";
	my $locEnvGlotEnvNewBasePath = $locEnvGlotEnvPath . "_NewBase/";
	my $locEnvGlotEnvOutboundGlossariesPath = $locEnvGlotEnvPath . ".OutboundGlossaries/";
	my $locEnvInfoPath = $inLocEnvPath . "Info/";
	my $locEnvInfoComponentDataPath = $inLocEnvPath . "Info/ComponentData/";
	my $locEnvInfoProjectsPath = $locEnvInfoPath . "Projects/";
	my $locEnvInfoReleasedPath = $locEnvInfoPath . "Released/";
	my $locEnvInfoBugFixCommentsPath = $inLocEnvPath . "Info/BugFixComments/";
	my $directory;
	my $file;
	my $error = 0;
	

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if ($inLocVer eq "1")
	{
		AALocUtilities::PrintLog("# loctar\n");
	}
	else
	{
		AALocUtilities::PrintLog("# loctar bug fix $inLocVer\n");
	}

	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	RestoreLocEnvInfo($inLocEnvPath);
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if ($inLocVer != 1)
	{
		$inLocVer = $inLocVer - 1;

		my $locEnvProjectsPath = $inLocEnvPath . "Projects/";

		opendir(directory, $locEnvProjectsPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
	
		foreach $file (@searchResult)
		{
			my $locPlistFile = $locEnvProjectsPath . $file . "/Localization.plist";

			if (open LPFILE, $locPlistFile)
			{
				$saveRS = $/;
				undef $/;
				$lpData = <LPFILE>;
				$/ = $saveRS;
				close (LPFILE);
				
				($locPJName) = $lpData =~ /<key>\s*LocProjectName\s*<\/key>\s*<string>\s*(.*?)\s*<\/string>/i;
				($locPJBase) = $lpData =~ /<key>\s*LocProjectBaseVersion\s*<\/key>\s*<string>\s*(.*?)\s*<\/string>/i;
				($locPJlocv) = $lpData =~ /<key>\s*LocProjectLocVersion\s*<\/key>\s*<string>\s*(\d*?)\s*<\/string>/i;
				$locPJlocv = sprintf ("%02d", $inLocVer);

				$lpData =~ s/<key>\s*LocProjectLocVersion\s*<\/key>\s*<string>\s*\d*\s*<\/string>/<key>LocProjectLocVersion<\/key>\n\t<string>${locPJlocv}<\/string>/i;			
				
				open LPFILE, ">$locPlistFile";
				print LPFILE "$lpData";
				close (LPFILE);
			}
		}
		
		
		AALocFileUtilities::CreateFolderIfNotExist($locEnvInfoReleasedPath);
		
		opendir(directory, $locEnvInfoProjectsPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		foreach $file (@searchResult)
		{
			if (open(COUNTER, ">" .$locEnvInfoReleasedPath."/$file"))
			{
				print COUNTER "$inLocVer\n";
				close(COUNTER);
			}
		}
	}
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "checktarfile_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt";
	my $componentDataPlistFilePath;
	my $bugFixCommentsFilePath;


	system "echo '' > $reportFilePath";
	
	if ($inComponentName eq "")
	{
		opendir(directory, $locEnvInfoProjectsPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);


		#-----------------------------------------------------------------------------------------
		#	Check ComponentData.plist
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check ComponentData.plist\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "echo '#==========================================================================' >> $reportFilePath";
		system "echo '# ComponentData.plist Check Result' >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Checking $file\n");

			system "echo >> $reportFilePath";
			system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
			system "echo '# $file' >> $reportFilePath";
			system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";

			$componentDataPlistFilePath = $locEnvInfoComponentDataPath . $file . "/ComponentData.plist";
			CheckComponentDataPlist($file, $componentDataPlistFilePath, $countryCode, $reportFilePath);
		}


		#-----------------------------------------------------------------------------------------
		#	Check GlotEnv
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check GlotEnv\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "echo >> $reportFilePath";
		system "echo >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
		system "echo '# GlotEnv Check Result' >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
	

		foreach $file (@searchResult)
		{
			$error = 0;
		
			AALocUtilities::PrintLog("Checking $file\n");

			system "echo >> $reportFilePath";
			system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
			system "echo '# $file' >> $reportFilePath";
			system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";


			$componentNewBasePath = $locEnvGlotEnvNewBasePath . $file;
			
			if (!(-d "$componentNewBasePath"))
			{
				system "echo '### ERROR: cannot find _NewBase' >> $reportFilePath";
				$error = 1;
			}


			$componentOutboundGlossaryPath = $locEnvGlotEnvOutboundGlossariesPath . $file . ".cpgz";
			
			if (!(-e "$componentOutboundGlossaryPath"))
			{
				system "echo '### ERROR: cannot find Outbound Glossary' >> $reportFilePath";
				$error = 1;
			}
			
			if ($error == 0)
			{
				system "echo 'No Problem Found' >> $reportFilePath";
			}
		}

		
		#-----------------------------------------------------------------------------------------
		#	Check Bug Fix Comments
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check Bug Fix Comments\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "echo >> $reportFilePath";
		system "echo >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
		system "echo '# Bug Fix Comments' >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Checking $file\n");

			system "echo >> $reportFilePath";
			system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
			system "echo '# $file' >> $reportFilePath";
			system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";

			$bugFixCommentsFilePath = $locEnvInfoBugFixCommentsPath . $file;
			
			if (-e $bugFixCommentsFilePath)
			{
				`cat $bugFixCommentsFilePath >> $reportFilePath`;
				system "echo >> $reportFilePath";
				system "echo >> $reportFilePath";
			}
			else
			{
				system "echo '### ERROR: No bug fix comments file' >> $reportFilePath";
				system "echo >> $reportFilePath";
				system "echo >> $reportFilePath";
			}
		}


		#-----------------------------------------------------------------------------------------
		#	Check Resource Fork
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check Loc Files\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "echo >> $reportFilePath";
		system "echo >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
		system "echo '# Check Loc Files' >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
	
		my $locEnvProjectsPath = $inLocEnvPath . "Projects/";

		chomp(@searchResultForFileChecking = `find $locEnvProjectsPath -type f | grep -v ".DS_Store"`);

		foreach $checkingFile (@searchResultForFileChecking)
		{
			# AALocUtilities::PrintLog("Checking $checkingFile\n");
			
			$partialFilePath = $checkingFile;
			$partialFilePath =~ s/$locEnvProjectsPath//;		# take out the base path
		
			my $resourcefile = "$checkingFile/..namedfork/rsrc";
		
			if (-s $resourcefile > 0)
			{
				system "echo '$partialFilePath has RESOURCE FORK' >> $reportFilePath";
			}
			
			
			my $metaData = `/usr/local/evolution/LocEnv/locbin/getExtraMetadata "$checkingFile"`;
			
			if ($metaData ne "")
			{
				system "echo '$partialFilePath has METADATA' >> $reportFilePath";
				system "echo '$metaData' >> $reportFilePath";
				system "echo >> $reportFilePath";
			}
		}


		#-----------------------------------------------------------------------------------------
		#	loctar
		#-----------------------------------------------------------------------------------------

		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
			AALocUtilities::PrintLog("# loctar $file\n");
			AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

			# SA
			system "loctar -noGlossary -proj '$file'";
		}
	}
	else
	{
		#-----------------------------------------------------------------------------------------
		#	Check ComponentData.plist
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check ComponentData.plist\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "echo >> $reportFilePath";
		system "echo >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
		system "echo '# ComponentData.plist Check Result' >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
	
		AALocUtilities::PrintLog("Checking $inComponentName\n");

		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $inComponentName' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";

		$componentDataPlistFilePath = $locEnvInfoComponentDataPath . $inComponentName . "/ComponentData.plist";
		CheckComponentDataPlist($inComponentName, $componentDataPlistFilePath, $countryCode, $reportFilePath);


		#-----------------------------------------------------------------------------------------
		#	Check Bug Fix Comments
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# Check Bug Fix Comments\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		system "echo >> $reportFilePath";
		system "echo >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
		system "echo '# Bug Fix Comments' >> $reportFilePath";
		system "echo '#==========================================================================' >> $reportFilePath";
	
		AALocUtilities::PrintLog("Checking $inComponentName\n");

		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $inComponentName' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";

		$bugFixCommentsFilePath = $locEnvInfoBugFixCommentsPath . $inComponentName;
		
		if (-e $bugFixCommentsFilePath)
		{
			`cat $bugFixCommentsFilePath >> $reportFilePath`;
			system "echo >> $reportFilePath";
			system "echo >> $reportFilePath";
		}
		else
		{
			system "echo '### ERROR: No bug fix comments file' >> $reportFilePath";
			system "echo >> $reportFilePath";
			system "echo >> $reportFilePath";
		}


		#-----------------------------------------------------------------------------------------
		#	loctar
		#-----------------------------------------------------------------------------------------

		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
		AALocUtilities::PrintLog("# loctar $inComponentName\n");
		AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

		# SA
		system "loctar -noGlossary -proj '$inComponentName'";
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Hidden Files in Localized Files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking Hidden Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Hidden files Check Result' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";

	chomp(@searchResult = `find "$locEnvProjectsPath" -type f \\( -path "*/\.*" \\) | grep -v ".DS_Store"  | grep -v ".localized"`);
	
	$numOfError = 0;
	
	foreach $file (@searchResult)
	{
		$numOfError++;
		
		if ($numOfError == 1)
		{
			system "echo 'The following Hidden file(s) found:' >> $reportFilePath";
		}
		
		$file =~ s/$locEnvProjectsPath//;	# take out the base path
		
		system "echo '$file' >> $reportFilePath";
	}
	
	if ($numOfError == 0)
	{
		system "echo 'No Problem Found' >> $reportFilePath";
	}
	

	#-----------------------------------------------------------------------------------------
	#	Check Specific Files in Localized Files
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Specific Files in Localized Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	open STDOUT, ">> $reportFilePath" or die "Failed to open $reportFilePath\n";

	CheckProjectSpecificFiles($locEnvProjectsPath, $lprojLanguageCode);

	close STDOUT;
		
	
	#-----------------------------------------------------------------------------------------
	#	Check Specific Files in _NewBase
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Specific Files in _NewBase\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Check Specific Files in _NewBase' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	open STDOUT, ">> $reportFilePath" or die "Failed to open $reportFilePath\n";
	
	CheckProjectSpecificFiles($locEnvGlotEnvNewBasePath, "English");
	
	close STDOUT;

	
	#-----------------------------------------------------------------------------------------
	#	Check Tar Files
	#-----------------------------------------------------------------------------------------

	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Check loctar Result' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";

	CheckTarfile($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#	Tarballs Checksum to flverifier report
	#-----------------------------------------------------------------------------------------

	TarballsChecksumToFLVerifierReport($inLocEnvPath);
}


#---------------------------------------------------------------------------------------------
#	LoctarWithGlossary
#---------------------------------------------------------------------------------------------

sub LoctarWithGlossary
{
	my($inLocEnvPath, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	RestoreLocEnvInfo($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if ($inComponentName eq "")
	{
		my $locEnvInfoProjectsPath = $inLocEnvPath . "Info/Projects/";
		AALocUtilities::PrintLog("loctar $inLocEnvPath\n");
		
		my $directory;
		my $file;
	
		opendir(directory, $locEnvInfoProjectsPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);
	
		foreach $file (@searchResult)
		{
			print "$file\n";
		
			# SA
			system "loctar -proj '$file'";
		}
	}
	else
	{
		# SA
		system "loctar -proj '$inComponentName'";
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	CheckTarfile($inLocEnvPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	TarballsChecksumToFLVerifierReport($inLocEnvPath);
}


#---------------------------------------------------------------------------------------------
#	TarballsChecksumToFLVerifierReport
#---------------------------------------------------------------------------------------------

sub TarballsChecksumToFLVerifierReport
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# tarballs checksum to flverifier report\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	my $reportsPath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath);
	my $appleGlotEnvPath = AALocEnvUtilities::GetAppleGlotEnvPathFromLocEnv($inLocEnvPath);
	my $appleGlotEnvBaseName = AALocFileUtilities::GetDirectoryBaseName($appleGlotEnvPath);
	my $flVerifierReportFilePath = $reportsPath . $appleGlotEnvBaseName. "_flverifierReport.txt";
	my $flVerifierFilteredReportFilePath = $reportsPath . $appleGlotEnvBaseName . "_flverifierFilteredReport.txt";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	if (-e $flVerifierFilteredReportFilePath)
	{
		ConvertUTF16ToUTF8($flVerifierFilteredReportFilePath);
	
		my $locEnvTarOutPath = $inLocEnvPath . "TarOut/";

		opendir(directory, $locEnvTarOutPath);
		@searchResult = grep { !/^\./} readdir(directory);
		closedir(directory);



		open(FILECONTENT, "<$flVerifierFilteredReportFilePath") or die "Cannot open '$flVerifierFilteredReportFilePath': $!";
			@fileContent = <FILECONTENT>;
		close(FILECONTENT);


		open updatedReportFile, "> $flVerifierFilteredReportFilePath" or die "Failed to open $flVerifierFilteredReportFilePath\n";

		my $line;
		my $componentNum;
		my $componentName;
		my $checksum;

		foreach $line(@fileContent)
		{
			if ($line =~ m/### FocusedLocVerifier PROGRESS: Verifying a component \[(.*)\]: (.*)\t\[(.*)\]/
				|| $line =~ m/### FocusedLocVerifier PROGRESS: Verifying a component \[(.*)\]: (.*).../)
			{
				$componentNum = $1;
				$componentName = $2;
				$checksum = 0;
				
				AALocUtilities::PrintLog("Checksum $componentName");
				
				foreach $file (@searchResult)
				{
					if ($file =~ m/^$componentName\_/)
					{
						$checksumResult = `cksum $locEnvTarOutPath$file`;
						$checksumResult =~ m/(.*) (.*) (.*)/;
						$checksum = $1;

						last;
					}
				}
				
				AALocUtilities::PrintLog(" $checksum\n");

				print updatedReportFile "### FocusedLocVerifier PROGRESS: Verifying a component [$componentNum]: $componentName\t[$checksum]\n";
			}
			else
			{
				print updatedReportFile $line;
			}
		}

		close updatedReportFile;

		ConvertUTF8ToUTF16($flVerifierFilteredReportFilePath);
	}
	else
	{
		AALocUtilities::PrintLog("\n### WARNING: cannot find the flverifier report '$flVerifierFilteredReportFilePath'.\n");
	}
}


#---------------------------------------------------------------------------------------------
#	CheckTarballChecksumInFLVerifierReport
#---------------------------------------------------------------------------------------------

sub CheckTarballChecksumInFLVerifierReport
{
	my($inFlVerifierReportPath, $inTarballsFolderPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFlVerifierReportPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified flverifier report $inFlVerifierReportPath doesn't exist.\n");
		return;
	}

	if (!(-d "$inTarballsFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified tarball folder $inTarballsFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check tarballs checksum in flverifier report\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	opendir(directory, $inTarballsFolderPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	open(FILECONTENT, "<$inFlVerifierReportPath") or die "Cannot open '$inFlVerifierReportPath': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);


	my $line;
	my $componentNum;
	my $componentName;
	my $checksum;
	my $tarballChecksum;

	foreach $line(@fileContent)
	{
		$utf8Line = UTF16toUTF8($line);

		if ($utf8Line =~ m/### FocusedLocVerifier PROGRESS: Verifying a component \[(.*)\]: (.*)\t\[(.*)\]/)
		{
			$componentNum = $1;
			$componentName = $2;
			$checksum = $3;
			
			AALocUtilities::PrintLog("Checking $componentName\n");
			
			$tarballChecksum = 0;
			
			foreach $file (@searchResult)
			{
				if ($file =~ m/^$componentName\_/)
				{
					$checksumResult = `cksum $inTarballsFolderPath$file`;
					$checksumResult =~ m/(.*) (.*) (.*)/;
					$tarballChecksum = $1;

					last;
				}
			}


			if ($checksum != $tarballChecksum)
			{
				AALocUtilities::PrintLog("### ERROR: Component $componentName checksum doesn't match\n");
			}
		}
	}
}


#---------------------------------------------------------------------------------------------
#	Submission
#
#	Tarball format: autoFtp -f TarOut -se AADRI -s 10.4.1.13 -passive -c
#	dmgs auto submit: autoFtp -f DmgOut -se AADRI -s 10.4.1.13 -c
#---------------------------------------------------------------------------------------------

sub Submission
{
	my($inLocEnvPath, $inComponentName) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	if ($inComponentName eq "")
	{
		AALocUtilities::PrintLog("# Submit All Components\n");
	}
	else
	{
		AALocUtilities::PrintLog("# Submit $inComponentName\n");
	}
	
	AALocUtilities::PrintLog("#========================================================================================\n");
}


#---------------------------------------------------------------------------------------------
#	CheckLocfiles
#---------------------------------------------------------------------------------------------

sub CheckLocfiles
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";
	my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "checklocfiles_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt";
	my $lprojLanguageCode = AALocEnvUtilities::GetLprojLanguageCodeFromLocEnv($inLocEnvPath);


	# system "check_locfiles -v -projdir '$locEnvProjectsPath' -lang $lprojLanguageCode > $reportFilePath -removeExtras -fixLocversionPlist";
	system "check_locfiles -v -projdir '$locEnvProjectsPath' -lang $lprojLanguageCode -removeExtras > $reportFilePath";
	
	`open -a "AD Viewer" "$reportFilePath"`;
}


#---------------------------------------------------------------------------------------------
#	CheckConductorTar
#---------------------------------------------------------------------------------------------

sub CheckConductorTar
{
	my($inLocEnvPath) = @_;
	my $locEnvGlotEnvPath = $inLocEnvPath . "LocEnv/GlotEnv/";
	my $locEnvGlotEnvNewBasePath = $locEnvGlotEnvPath . "_NewBase/";
	my $locEnvInfoComponentDataPath = $inLocEnvPath . "LocEnv/Info/ComponentData/";
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $locEnvGlotEnvOutboundGlossariesPath = $locEnvGlotEnvPath . ".OutboundGlossaries/";
	my $locEnvInfoPath = $inLocEnvPath . "LocEnv/Info/";
	my $locEnvInfoProjectsPath = $locEnvInfoPath . "Projects/";
	my $locEnvInfoBugFixCommentsPath = $inLocEnvPath . "LocEnv/Info/BugFixComments/";
	
	my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "checktarfile.txt";
	
	system "echo '' > $reportFilePath";
	
	
	opendir(directory, $locEnvInfoProjectsPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
	
	#-----------------------------------------------------------------------------------------
	#	Check ComponentData.plist
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check ComponentData.plist\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# ComponentData.plist Check Result' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $file\n");
		
		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $file' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		
		$componentDataPlistFilePath = $locEnvInfoComponentDataPath . $file . "/ComponentData.plist";
		CheckComponentDataPlist($file, $componentDataPlistFilePath, $countryCode, $reportFilePath);
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Check GlotEnv
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check GlotEnv\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# GlotEnv Check Result' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	
	foreach $file (@searchResult)
	{
		$error = 0;
		
		AALocUtilities::PrintLog("Checking $file\n");
		
		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $file' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		
		
		$componentNewBasePath = $locEnvGlotEnvNewBasePath . $file;
		
		if (!(-d "$componentNewBasePath"))
		{
			system "echo '### ERROR: cannot find _NewBase' >> $reportFilePath";
			$error = 1;
		}
		
		
		$componentOutboundGlossaryPath = $locEnvGlotEnvOutboundGlossariesPath . $file . ".cpgz";
		
		if (!(-e "$componentOutboundGlossaryPath"))
		{
			system "echo '### ERROR: cannot find Outbound Glossary' >> $reportFilePath";
			$error = 1;
		}
		
		if ($error == 0)
		{
			system "echo 'No Problem Found' >> $reportFilePath";
		}
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Bug Fix Comments
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Bug Fix Comments\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Bug Fix Comments' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $file\n");
		
		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $file' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		
		$bugFixCommentsFilePath = $locEnvInfoBugFixCommentsPath . $file;
		
		if (-e $bugFixCommentsFilePath)
		{
			`cat $bugFixCommentsFilePath >> $reportFilePath`;
			system "echo >> $reportFilePath";
			system "echo >> $reportFilePath";
		}
		else
		{
			system "echo '### ERROR: No bug fix comments file' >> $reportFilePath";
			system "echo >> $reportFilePath";
			system "echo >> $reportFilePath";
		}
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Resource Fork
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Loc Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Check Loc Files' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	my $locEnvProjectsPath = $inLocEnvPath . "LocEnv/Projects/";
	
	chomp(@searchResultForFileChecking = `find $locEnvProjectsPath -type f | grep -v ".DS_Store"`);
	
	foreach $checkingFile (@searchResultForFileChecking)
	{
		# AALocUtilities::PrintLog("Checking $checkingFile\n");
		
		$partialFilePath = $checkingFile;
		$partialFilePath =~ s/$locEnvProjectsPath//;		# take out the base path
		
		my $resourcefile = "$checkingFile/..namedfork/rsrc";
		
		if (-s $resourcefile > 0)
		{
			system "echo '$partialFilePath has RESOURCE FORK' >> $reportFilePath";
		}
		
		
		my $metaData = `/usr/local/evolution/LocEnv/locbin/getExtraMetadata "$checkingFile"`;
		
		if ($metaData ne "")
		{
			system "echo '$partialFilePath has METADATA' >> $reportFilePath";
			system "echo '$metaData' >> $reportFilePath";
			system "echo >> $reportFilePath";
		}
		

	}
	
	if ((-s $resourcefile == 0) and $metaData eq "")
	{
		system "echo 'No Problem Found' >> $reportFilePath";

	}
	
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Hidden Files in Localized Files
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking Hidden Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Hidden files Check Result' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	chomp(@searchResult = `find "$locEnvProjectsPath" -type f \\( -path "*/\.*" \\) | grep -v ".DS_Store"  | grep -v ".localized"`);
	
	$numOfError = 0;
	
	foreach $file (@searchResult)
	{
		$numOfError++;
		
		if ($numOfError == 1)
		{
			system "echo 'The following Hidden file(s) found:' >> $reportFilePath";
		}
		
		$file =~ s/$locEnvProjectsPath//;	# take out the base path
		
		system "echo '$file' >> $reportFilePath";
	}
	
	if ($numOfError == 0)
	{
		system "echo 'No Problem Found' >> $reportFilePath";
	}
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Specific Files in _NewBase
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Check Specific Files in _NewBase\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Check Specific Files in _NewBase' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	open STDOUT, ">> $reportFilePath" or die "Failed to open $reportFilePath\n";
	
	CheckProjectSpecificFiles($locEnvGlotEnvNewBasePath, "English");
	
	close STDOUT;
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Tar Files
	#-----------------------------------------------------------------------------------------
	
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	system "echo '# Check loctar Result' >> $reportFilePath";
	system "echo '#==========================================================================' >> $reportFilePath";
	
	# CheckTarfile($inLocEnvPath);

	my $locEnvTarOutPath = $inLocEnvPath . "LocEnv/TarOut/";
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check tarfiles\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	
	my $directory;
	my $file;
	
	opendir(directory, $locEnvTarOutPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
	# SA	system "echo -n '' > $reportFilePath";
	
	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $locEnvTarOutPath$file\n");
		
		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $file' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		
		system "/Developer/Evolution/LocEnv/locbin/check_tarfile '$locEnvTarOutPath$file' >> $reportFilePath";
	}
	
	# `open -a "AD Viewer" "$reportFilePath"`;

	
	
	#-----------------------------------------------------------------------------------------
	#	Tarballs Checksum to flverifier report
	#-----------------------------------------------------------------------------------------
	
	TarballsChecksumToFLVerifierReport($inLocEnvPath);
}
	

#---------------------------------------------------------------------------------------------
#	CheckTarfile
#---------------------------------------------------------------------------------------------

sub CheckTarfile
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $locEnvTarOutPath = $inLocEnvPath . "TarOut/";
	my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "checktarfile_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt";


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Check tarfiles\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	
	my $directory;
	my $file;

	opendir(directory, $locEnvTarOutPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	# SA	system "echo -n '' > $reportFilePath";

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $locEnvTarOutPath$file\n");

		system "echo >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";
		system "echo '# $file' >> $reportFilePath";
		system "echo '#--------------------------------------------------------------------------' >> $reportFilePath";

		system "check_tarfile '$locEnvTarOutPath$file' >> $reportFilePath";
	}
	
	`open -a "AD Viewer" "$reportFilePath"`;
}


#---------------------------------------------------------------------------------------------
#	CompareBugFixTarballs
#---------------------------------------------------------------------------------------------

sub CompareBugFixTarballs
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $lprojLanguageCode = AALocEnvUtilities::GetLprojLanguageCodeFromLocEnv($inLocEnvPath) . ".lproj";
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $reportFilePath = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . "comparetarfile_" . AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath) . ".txt";

	my $locEnvTarOutPath = $inLocEnvPath . "TarOut/";
	my $locEnvBackupTarballsFolderPath = $inLocEnvPath . "BackupZip/Tarballs/";

	my $result = PowerCompareTarballFolder($locEnvTarOutPath, $locEnvBackupTarballsFolderPath, $lprojLanguageCode);

	system "echo '$result' > $reportFilePath";
}


#---------------------------------------------------------------------------------------------
#	ExpandTarFolder
#---------------------------------------------------------------------------------------------

sub ExpandTarFolder
{
	my($inFolderPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Expand .tgz in folder
	#-----------------------------------------------------------------------------------------

	chomp(@searchResult = `find $inFolderPath -type f | grep ".tgz | grep ".tar"`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Expanding $file\n");
		
		ExpandTar($file);
	}


	#-----------------------------------------------------------------------------------------
	#	
	#-----------------------------------------------------------------------------------------

	my $expandedFolder = $inFolderPath . "Expanded/";

	if (-d $expandedFolder)
	{
		`rm -R $expandedFolder`;
	}
	else
	{
		`mkdir $expandedFolder`;
	}

	foreach $file (@searchResult)
	{
		my $directoryPath = dirname($file);
		my $tarName = basename($file);
		$tarName =~ /\d\_(\w*)\_\d/;
		my $lang = $1;
	
		$tarName =~ /.*$lang/i;
	
		my $BR_Folder = $directoryPath . "\/" . "BR_" . $&;
		
		`ditto "$BR_Folder" "$expandedFolder"`;
	}
}


#---------------------------------------------------------------------------------------------
#	ExpandTar
#---------------------------------------------------------------------------------------------

sub ExpandTar
{
	my($inTarPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inTarPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified file $inTarPath doesn't exist.\n");
		
		return;
	}
	else
	{
		if (!($inTarPath =~ /\.tgz$/i) && !($inTarPath =~ /\.tar$/i))
		{
			AALocUtilities::PrintLog("\n### ERROR: The $inTarPath filetype is incorrect. The filetype should be tgz or tar.\n");
			
			return;
		}
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $directoryPath = dirname($inTarPath);
	my $tarName = basename($inTarPath);

	$tarName =~ /\d\_(\w*)\_\d/;
	my $lang = $1;

	$tarName =~ /.*$lang/i;

	my $BR_Folder = $directoryPath . "\/" . "BR_" . $&;
	my $BO_Folder = $directoryPath . "\/" . "BO_" . $&;
	my $glossaryFolder = $directoryPath."\/"."BO_".$&."\/Glossaries";
	my $tarPath = $BR_Folder."\/".$&."\.tar";

	
	if ($inTarPath =~ /\.tgz$/i)
	{
		`gnutar xzf "$inTarPath" -C "$directoryPath"`;
		`gnutar xf "$tarPath" -C "$BR_Folder"`;
	}
	elsif ($inTarPath =~ /\.tar$/i)
	{
		`gnutar xf "$inTarPath" -C "$directoryPath"`;
		`gnutar xf "$tarPath" -C "$BR_Folder"`;
	}
	
	`rm $tarPath`;
	`rm -R $BO_Folder`;
}

	
#---------------------------------------------------------------------------------------------
#	ExpandPackage
#---------------------------------------------------------------------------------------------

sub ExpandPackage
{
	my($inPackagePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (($inPackagePath =~ /\.pkg$/i) || ($inPackagePath =~ /\.pkg\//i))
	{
		if ($inPackagePath =~ /\.pkg\//i)
		{
			$inPackagePath =~ s/\.pkg\//\.pkg/;
		}
	
		if (!(-e "$inPackagePath"))
		{
			AALocUtilities::PrintLog("\n### ERROR: The specified file $inPackagePath doesn't exist.\n");
			return;
		}
	}
	else
	{
		AALocUtilities::PrintLog("\n### ERROR: The $inPackagePath filetype is incorrect. The filetype should be pkg.\n");
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $directoryPath = dirname($inPackagePath);
	
	
	my $packageName = basename($inPackagePath);
	my $archiveInPackagePath = $inPackagePath . "/Contents/Archive.pax.gz";
	my $archivePath = $directoryPath . "/Archive.pax.gz";
	
	`ditto $archiveInPackagePath $archivePath`;
	`open -a BOMArchiveHelper $archivePath`;
}


#---------------------------------------------------------------------------------------------
#	ExtractIndex
#---------------------------------------------------------------------------------------------

sub ExtractIndex
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $helpEnvIndexLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_xpgs/";
	my $helpEnvIndexLocRequiredSortingPath = $helpEnvPath . "_Working/_LocRequired/_xpgs_sorting/";
	my $xallFilePath = $helpEnvIndexLocRequiredPath . "xall.html";
	my $xaFilePath = $helpEnvIndexLocRequiredPath . "xa.html";
	my $x1FilePath = $helpEnvIndexLocRequiredPath . "x1.html";
	my $unsortedIndexFilePath = $helpEnvIndexLocRequiredSortingPath . "index_unsorted.txt";


	#-----------------------------------------------------------------------------------------
	#	ExtractIndex
	#
	#	-fourPageIndex	
	#	-leopardIndex	
	#	-file
	#	-output
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# ExtractIndex\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if (-e $xallFilePath)
	{
		if ((-e $xaFilePath) || (-e $x1FilePath))
		{
			if (-e $xaFilePath)
			{
				system "ExtractIndex -env $helpEnvPath -leopardIndex -file $xallFilePath -output $unsortedIndexFilePath";
			}
			else
			{
				system "ExtractIndex -env $helpEnvPath -fourPageIndex -file $xallFilePath -output $unsortedIndexFilePath";
			}
		}
		else
		{
			system "ExtractIndex -env $helpEnvPath -file $xallFilePath -output $unsortedIndexFilePath";
		}
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("No xall.html in _Working/_LocRequired/_xpgs/\n");
	}
}


#---------------------------------------------------------------------------------------------
#	BuildIndex
#---------------------------------------------------------------------------------------------

sub BuildIndex
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $helpEnvIndexLocRequiredPath = $helpEnvPath . "_Working/_LocRequired/_xpgs/";
	my $helpEnvIndexLocRequiredSortingPath = $helpEnvPath . "_Working/_LocRequired/_xpgs_sorting/";
	my $xallFilePath = $helpEnvIndexLocRequiredPath . "xall.html";
	my $xaFilePath = $helpEnvIndexLocRequiredPath . "xa.html";
	my $x1FilePath = $helpEnvIndexLocRequiredPath . "x1.html";
	my $unsortedIndexFilePath = $helpEnvIndexLocRequiredSortingPath . "index_unsorted.txt";


	#-----------------------------------------------------------------------------------------
	#	BuildIndex
	#
	#	-file			keywords list file
	#	-list			indedx list file name
	#	-template		html template
	#	-output			output directory
	#	-bookID			bookID name
	#	-varPageHead
	#	-varPageTitle
	#	-varHome
	#	-type
	#	-usdelete
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# BuildIndex\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if (-e $xallFilePath)
	{
		if ((-e $xaFilePath) || (-e $x1FilePath))
		{
			if (-e $xaFilePath)
			{
				system "ExtractIndex -env $helpEnvPath -leopardIndex -file $xallFilePath -output $unsortedIndexFilePath";
			}
			else
			{
				system "ExtractIndex -env $helpEnvPath -fourPageIndex -file $xallFilePath -output $unsortedIndexFilePath";
			}
		}
		else
		{
			system "ExtractIndex -env $helpEnvPath -file $xallFilePath -output $unsortedIndexFilePath";
		}
	}
	else
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("No xall.html in _Working/_LocRequired/_xpgs/\n");
	}
}


#---------------------------------------------------------------------------------------------
#	ChangeHTML
#---------------------------------------------------------------------------------------------

sub ChangeHTML
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $changeTableFileName = $countryCode . "-ChangeTagInput-UTF8";

	#-----------------------------------------------------------------------------------------
	#	ChangeHTML
	#
	#	-wsu	Web Site URL
	#	-hbn	Help book name
	#	-ce		Character entity
	#	-ft		Font tag
	#	-cst	Character set tag
	#	-ece	European character entity
	#	-ct		Change Table
	#	-fp		File pat or a directory name (ex. English.lproj)
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# ChangeHTML\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	if (AALocEnvUtilities::IsEuroLocEnv($inLocEnvPath))
	{
		system "ChangeHTML -env $helpEnvPath -ece -wsu -hbn -ce -ft -cst -fp -ct $changeTableFileName";
	}
	else
	{
		system "ChangeHTML -env $helpEnvPath -wsu -hbn -ce -ft -cst -fp -ct $changeTableFileName";
	}


	#-----------------------------------------------------------------------------------------
	#	ChangeCSS
	#-----------------------------------------------------------------------------------------
	


	#-----------------------------------------------------------------------------------------
	#	ChangeTOC
	#-----------------------------------------------------------------------------------------
	
	my $tocFilePath = $helpEnvPath . "_Working/_LocRequired/_others/TOCHelper.toc";
	
	if (-e $tocFilePath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# ChangeTOC\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		system "ChangeTOC -env $helpEnvPath -wsu -hbn -ce -ft -cst -fp -ct";
	}
}


#---------------------------------------------------------------------------------------------
#	SetKeyword
#---------------------------------------------------------------------------------------------

sub SetKeyword
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $changeTableFileName = $countryCode . "-ChangeTagInput-UTF8";

	#-----------------------------------------------------------------------------------------
	#	ChangeHTML
	#
	#	-wsu	Web Site URL
	#	-hbn	Help book name
	#	-ce		Character entity
	#	-ft		Font tag
	#	-cst	Character set tag
	#	-ece	European character entity
	#	-ct		Change Table
	#	-fp		File pat or a directory name (ex. English.lproj)
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# ChangeHTML\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	if (AALocEnvUtilities::IsEuroLocEnv($inLocEnvPath))
	{
		system "ChangeHTML -env $helpEnvPath -ece -wsu -hbn -ce -ft -cst -fp -ct $changeTableFileName";
	}
	else
	{
		system "ChangeHTML -env $helpEnvPath -wsu -hbn -ce -ft -cst -fp -ct $changeTableFileName";
	}


	#-----------------------------------------------------------------------------------------
	#	ChangeTOC
	#-----------------------------------------------------------------------------------------
	
	my $tocFilePath = $helpEnvPath . "_Working/_LocRequired/_others/TOCHelper.toc";
	
	if (-e $tocFilePath)
	{
		AALocUtilities::PrintLog("\n");
		AALocUtilities::PrintLog("#========================================================================================\n");
		AALocUtilities::PrintLog("# ChangeTOC\n");
		AALocUtilities::PrintLog("#========================================================================================\n");

		system "ChangeTOC -env $helpEnvPath -wsu -hbn -ce -ft -cst -fp -ct";
	}
}


#---------------------------------------------------------------------------------------------
#	MaterialMixer
#---------------------------------------------------------------------------------------------

sub MaterialMixer
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# MaterialMixer\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	system "MaterialMixer -env $helpEnvPath -clean";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# HelpIndexer\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	# -useMinTermLength xxx
	
	system "HelpIndexer -env $helpEnvPath";
}


#---------------------------------------------------------------------------------------------
#	AAHelpCheckAll
#---------------------------------------------------------------------------------------------

sub AAHelpCheckAll
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}

	
	my $checkHTMLLogFile = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath) . "_checkHTMLLog.txt";
	my $checkHTMLUSLogFile = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath) . "_checkHTMLUSLog.txt";
	
	if (!(-e $checkHTMLUSLogFile))
	{
		CheckUSHTML($inLocEnvPath);
	}
	
	
	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $changeTableFileName = $countryCode . "-ChangeTagInput-UTF8";

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# CheckHTML\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	system "CheckHTML -env $helpEnvPath -apple -tags -links -topic -titleLength -ftags -extra -bid -keytrans -anchors -topiclist -checktoc -checktagstruct -checkTrans -desc -rule $changeTableFileName -useNTFile DNT-UTF8.txt > $checkHTMLLogFile";
}


#---------------------------------------------------------------------------------------------
#	CheckUSHTML
#---------------------------------------------------------------------------------------------

sub CheckUSHTML
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}
	
	
	my $lprojLanguageCode = AALocEnvUtilities::GetLprojLanguageCodeFromLocEnv($inLocEnvPath);

	my $helpEnvPath = AALocEnvUtilities::GetHelpEnvPathFromLocEnv($inLocEnvPath);
	my $countryCode = AALocEnvUtilities::GetCountryCodeFromLocEnv($inLocEnvPath);
	my $changeTableFileName = $countryCode . "-ChangeTagInput-UTF8";
	my $dntFileName = "DNT-UTF8.txt";
	my $helpEnvInExtractedNewBasePath = $helpEnvPath . "_In/_Extracted/_NewBase/";
	my $helpEnvUserePath = $helpEnvPath . "_User/";

	my $helpUSEnvPath = $inLocEnvPath . AALocEnvUtilities::GetHelpEnvFromLocEnv($inLocEnvPath) . "_US/";
	my $helpUSEnvOutStructuredPath = $helpUSEnvPath . "_Out/_Structured/";
	my $helpUSEnvUserPath = $helpUSEnvPath . "_User/";

	my $checkHTMLLogFile = AALocEnvUtilities::GetReportsPathFromLocEnv($inLocEnvPath) . AALocFileUtilities::GetDirectoryBaseName($inLocEnvPath) . "_checkHTMLUSLog.txt";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# CheckHTML US\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	AALocFileUtilities::RemoveFolder($helpUSEnvPath);
	AALocFileUtilities::CreateFolderIfNotExist($helpUSEnvPath);
	system "CreateHelpLocEnv -targetDir $helpUSEnvPath -helpTemplates $gHelpLocTemplatesPath";
	`ditto "$helpEnvInExtractedNewBasePath" "$helpUSEnvOutStructuredPath"`;
	`ditto "$helpEnvUserePath$changeTableFileName" "$helpUSEnvUserPath$changeTableFileName"`;
	`ditto "$helpEnvUserePath$dntFileName" "$helpUSEnvUserPath$dntFileName"`;

	chomp(@searchResult = `find "$helpUSEnvOutStructuredPath" -type d -path "*/English.lproj"`);

	foreach $file (@searchResult)
	{
		$newFile = $file;
		$newFile =~ s/English.lproj/$lprojLanguageCode.lproj/;
		
		rename $file, $newFile;
	}

	system "CheckHTML -env $helpUSEnvPath -apple -tags -links -topic -titleLength -ftags -extra -bid -keytrans -anchors -topiclist -checktoc -checktagstruct -checkTrans -desc -rule $changeTableFileName -useNTFile DNT-UTF8.txt > $checkHTMLLogFile";

	AALocFileUtilities::RemoveFolder($helpUSEnvPath);
}


#---------------------------------------------------------------------------------------------
#	CopyLproj
#---------------------------------------------------------------------------------------------

sub CopyLproj
{
	my($inSourcePath, $inDestPath, $inLanguage) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------
	
	if (!((-d $inSourcePath) && (-d $inDestPath)))
	{
		AALocUtilities::PrintLog("ERROR: specified path '$inSourcePath' or '$inDestPath' doesn't exist.\n");
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	chomp(@searchResult = `find $inSourcePath -type f \\( -path "*/$inLanguage.lproj/*" \\)`);

	my $destFile;

	foreach $file (@searchResult)
	{
		$destFile = $file;

		$destFile =~ s/$inSourcePath/$inDestPath/;
		`ditto "$file" "$destFile"`;				
	}
}


#---------------------------------------------------------------------------------------------
#	PseudoLoc
#---------------------------------------------------------------------------------------------

sub PseudoLoc
{
	my($inWGFolder) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inWGFolder"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified WG folder $inWGFolder doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $directory;
	my $file;
	my $wgFile;

	opendir(directory, $inWGFolder);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Pseudo localize $file\n");

		$wgFile = $inWGFolder . $file;

		`PseudoLocAG3 -force -n $wgFile`;
	}
}


#---------------------------------------------------------------------------------------------
#	MakeDiskImage
#---------------------------------------------------------------------------------------------

sub MakeDiskImage
{
	my($inFolderPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	# `makeLocDimage -src "$inFolderPath"`;
	
	my $dmgFilePath = $inFolderPath;
	$dmgFilePath =~ s|/$||;		# remove trailing slash
	$dmgFilePath = $dmgFilePath . ".dmg";
	
	AALocFileUtilities::RemoveFileAndFolder($dmgFilePath);


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("Make Image of folder $inFolderPath\n");
	AALocUtilities::PrintLog("                  to $dmgFilePath\n");
	AALocUtilities::PrintLog("\n");

	`makeImageOfFolder -src "$inFolderPath" -dest "$dmgFilePath"`;
}


#---------------------------------------------------------------------------------------------
#	FCPPlistPreProcess
#---------------------------------------------------------------------------------------------

sub FCPPlistPreProcess
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	$appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	$appleGlotEnvOldBasePath = $inAppleGlotEnvPath . "_OldBase/";
	$appleGlotEnvOldLocPath = $inAppleGlotEnvPath . "_OldLoc/";

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run Pre-Process for FCP .plist files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gFCPPlistToolPath -pd $appleGlotEnvNewBasePath`;
	`$gFCPPlistToolPath -pd $appleGlotEnvOldBasePath`;
	`$gFCPPlistToolPath -pd $appleGlotEnvOldLocPath`;
}


#---------------------------------------------------------------------------------------------
#	FCPPlistPostProcess
#---------------------------------------------------------------------------------------------

sub FCPPlistPostProcess
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inLocEnvPath doesn't exist.\n");
		return;
	}


	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run Post-Process for FCP .plist files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gFCPPlistToolPath -sd $locEnvProjectsPath`;
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $glotEnvNewBasePath = $inLocEnvPath . "GlotEnv/_NewBase/";
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Remove FCP .plist.strings files in GlotEnv:_NewBase\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	chomp(@searchResult = `find $glotEnvNewBasePath -type f | grep ".plist.strings"`);
	
	foreach $file (@searchResult)
	{
		AALocFileUtilities::RemoveFile($file);
	}
}


#---------------------------------------------------------------------------------------------
#	WidgetJSPreProcess
#---------------------------------------------------------------------------------------------

sub WidgetJSPreProcess
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	$appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	$appleGlotEnvOldBasePath = $inAppleGlotEnvPath . "_OldBase/";
	$appleGlotEnvOldLocPath = $inAppleGlotEnvPath . "_OldLoc/";

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run Pre-Process for Widget .js files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gWidgetJSToolPath -jd $appleGlotEnvNewBasePath`;
	`$gWidgetJSToolPath -jd $appleGlotEnvOldBasePath`;
	`$gWidgetJSToolPath -jd $appleGlotEnvOldLocPath`;
}


#---------------------------------------------------------------------------------------------
#	WidgetJSPostProcess
#---------------------------------------------------------------------------------------------

sub WidgetJSPostProcess
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inLocEnvPath doesn't exist.\n");
		return;
	}

	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run Post-Process for Widget .js files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gWidgetJSToolPath -sd $locEnvProjectsPath`;
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $glotEnvNewBasePath = $inLocEnvPath . "GlotEnv/_NewBase/";
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Remove Widget .js.strings files in GlotEnv:_NewBase\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	chomp(@searchResult = `find $glotEnvNewBasePath -type f | grep ".js.strings"`);
	
	foreach $file (@searchResult)
	{
		AALocFileUtilities::RemoveFile($file);
	}
}


#---------------------------------------------------------------------------------------------
#	JavaPropertiesPreProcess
#---------------------------------------------------------------------------------------------

sub JavaPropertiesPreProcess
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	$appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	$appleGlotEnvOldBasePath = $inAppleGlotEnvPath . "_OldBase/";
	$appleGlotEnvOldLocPath = $inAppleGlotEnvPath . "_OldLoc/";

 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run Pre-Process for Jave .properties files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gJavaPropertiesToolPath -pd $appleGlotEnvNewBasePath`;
	`$gJavaPropertiesToolPath -pd $appleGlotEnvOldBasePath`;
	`$gJavaPropertiesToolPath -pd $appleGlotEnvOldLocPath`;
}


#---------------------------------------------------------------------------------------------
#	JavaPropertiesPostProcess
#---------------------------------------------------------------------------------------------

sub JavaPropertiesPostProcess
{
	my($inLocEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inLocEnvPath doesn't exist.\n");
		return;
	}

	my $locEnvProjectsPath = $inLocEnvPath . "Projects/";

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Run Post-Process for Jave .properties files\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	`$gJavaPropertiesToolPath -sd $locEnvProjectsPath`;
	
	
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $glotEnvNewBasePath = $inLocEnvPath . "GlotEnv/_NewBase/";

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Remove Jave .properties.strings files in GlotEnv:_NewBase\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	chomp(@searchResult = `find $glotEnvNewBasePath -type f | grep ".properties.strings"`);
	
	foreach $file (@searchResult)
	{
		AALocFileUtilities::RemoveFile($file);
	}
}


#---------------------------------------------------------------------------------------------
#	CompareFolder
#---------------------------------------------------------------------------------------------

sub CompareFolder
{
	my($inFolder1, $inFolder2) = @_;
	
        my $mydate= strftime("%Y-%m-%d %H.%M.%S", localtime(time)); 
	my $reportPathFile="/tmp/AALocBench/" . "_" . $mydate . "_DifferReport.txt";
        
    
	`rm /tmp/AALocBench/*_DifferReport.txt`;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolder1"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inFolder1 doesn't exist.\n");
		return "";
	}


	if (!(-d "$inFolder2"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inFolder2 doesn't exist.\n");
		return "";
	}
 
 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare $inFolder1\n");
	AALocUtilities::PrintLog("# vs      $inFolder2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -v -purl -fm`;
		}
		else
		{
			$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -v -purl -fm`;
		}
	}
	else
	{
		$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" | $gFpcxPath -v -purl -fm`;
	}

#	$reportPathFile=$result;
	
	open OUTFILE, "> $reportPathFile" or die "Failed to open $reportPathFile\n";
	print OUTFILE $result;
	
	close OUTFILE;
	`open "$reportPathFile"`;
	
	
	return $result;
}

#---------------------------------------------------------------------------------------------
#	CompareFolder_Pro
#---------------------------------------------------------------------------------------------

sub CompareFolder_Pro
{
	my($inFolder1, $inFolder2) = @_;
	
        
        my $mydate= strftime("%Y-%m-%d %H.%M.%S", localtime(time)); 
	my $reportPathFile="/tmp/AALocBench/". "_" . $mydate . "_DifferReport.txt";
	
	`rm /tmp/AALocBench/*_DifferReport.txt`;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolder1"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inFolder1 doesn't exist.\n");
		return "";
	}


	if (!(-d "$inFolder2"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inFolder2 doesn't exist.\n");
		return "";
	}
 
 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare Pro $inFolder1\n");
	AALocUtilities::PrintLog("# vs          $inFolder2\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


		if ((-e "/AppleInternal/Library/EmbeddedFrameworks/ProKit/EmbeddedProKit.ibplugin") or  -e ("/AppleInternal/Developer/Plugins/ProKit.ibplugin"))
		{
			$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" -ib_plugin "/AppleInternal/Library/EmbeddedFrameworks/ProKit/EmbeddedProKit.ibplugin:/AppleInternal/Library/EmbeddedFrameworks/ProApps/IBPlugIns/LunaKitEmbedded.ibplugin" | $gFpcxPath -v -purl -fm`;
		}
		else
		{
			$result = `$gPcxPath '$inFolder1' '$inFolder2' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -v -purl -fm`;
		}


	open OUTFILE, "> $reportPathFile" or die "Failed to open $reportPathFile\n";
	print OUTFILE $result;
	
	close OUTFILE;
	`open "$reportPathFile"`;

	return $result;
}




#---------------------------------------------------------------------------------------------
#	CompareOldBaseNewBase
#---------------------------------------------------------------------------------------------

sub CompareOldBaseNewBase
{
	my($inAppleGlotEnvPath, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	my $appleGlotEnvOldBasePath = $inAppleGlotEnvPath . "_OldBase/";
	my $logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_OldBase_vs_NewBase_Comp_Result.txt";

 
	if ($inComponentName ne "")
	{
		$appleGlotEnvNewBasePath = $appleGlotEnvNewBasePath . $inComponentName . "/";
		$appleGlotEnvOldBasePath = $appleGlotEnvOldBasePath . $inComponentName . "/";
		
		$logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_" . $inComponentName . "_OldBase_vs_NewBase_Comp_Result.txt";
	}
 
 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare OldBase vs NewBase  $inComponentName\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			$result = `$gPcxPath '$appleGlotEnvOldBasePath' '$appleGlotEnvNewBasePath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -lproj "English.lproj|en.lproj|en_US.lproj" -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl -fm`;
		}
		else
		{
			$result = `$gPcxPath '$appleGlotEnvOldBasePath' '$appleGlotEnvNewBasePath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -lproj "English.lproj|en.lproj|en_US.lproj" -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl -fm`;
		}
	}
	else
	{
		$result = `$gPcxPath '$appleGlotEnvOldBasePath' '$appleGlotEnvNewBasePath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -lproj "English.lproj|en.lproj|en_US.lproj" -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" | $gFpcxPath -l -purl -fm`;
	}

	AALocUtilities::PrintLog($result);
	
	open logFile, "> $logFilePath" or die "Failed to open $logFilePath\n";
	print logFile $result;
	close logFile;
}


#---------------------------------------------------------------------------------------------
#	CompareOldLocNewLoc
#---------------------------------------------------------------------------------------------

sub CompareOldLocNewLoc
{
	my($inAppleGlotEnvPath, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $appleGlotEnvOldLocPath = $inAppleGlotEnvPath . "_OldLoc/";
	my $logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_OldLoc_vs_NewLoc_Comp_Result.txt";
	my $lprojLanguageCode = GetLprojLanguage($appleGlotEnvNewLocPath);


	if ($inComponentName ne "")
	{
		$appleGlotEnvNewLocPath = $appleGlotEnvNewLocPath . $inComponentName . "/";
		$appleGlotEnvOldLocPath = $appleGlotEnvOldLocPath . $inComponentName . "/";
		
		$logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_" . $inComponentName . "_OldLoc_vs_NewLoc_Comp_Result.txt";
	}

 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare OldLoc vs NewLoc  $inComponentName\n");
	AALocUtilities::PrintLog("#========================================================================================\n");

	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			$result = `$gPcxPath '$appleGlotEnvOldLocPath' '$appleGlotEnvNewLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -lproj "$lprojLanguageCode.lproj" -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl -fm`;
		}
		else
		{
			$result = `$gPcxPath '$appleGlotEnvOldLocPath' '$appleGlotEnvNewLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -lproj "$lprojLanguageCode.lproj" -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl -fm`;
		}
	}
	else
	{
		$result = `$gPcxPath '$appleGlotEnvOldLocPath' '$appleGlotEnvNewLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -lproj "$lprojLanguageCode.lproj" -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" | $gFpcxPath -l -purl -fm`;
	}

	AALocUtilities::PrintLog($result);
	
	open logFile, "> $logFilePath" or die "Failed to open $logFilePath\n";
	print logFile $result;
	close logFile;
}


#---------------------------------------------------------------------------------------------
#	CompareNewBaseNewLoc
#---------------------------------------------------------------------------------------------

sub CompareNewBaseNewLoc
{
	my($inAppleGlotEnvPath, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $lprojLanguageCode = GetLprojLanguage($appleGlotEnvNewLocPath);
	my $logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_NewBase_vs_NewLoc_Comp_Result.txt";

 
	if ($inComponentName ne "")
	{
		$appleGlotEnvNewBasePath = $appleGlotEnvNewBasePath . $inComponentName . "/";
		$appleGlotEnvNewLocPath = $appleGlotEnvNewLocPath . $inComponentName . "/";
		
		$logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_" . $inComponentName . "_NewBase_vs_NewLoc_Comp_Result.txt";
	}
 
 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare NewBase vs NewLoc  $inComponentName\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			$result = `$gPcxPath '$appleGlotEnvNewBasePath' '$appleGlotEnvNewLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -map 'English.lproj/$lprojLanguageCode.lproj' -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl -fm`;
		}
		else
		{
			$result = `$gPcxPath '$appleGlotEnvNewBasePath' '$appleGlotEnvNewLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -map 'English.lproj/$lprojLanguageCode.lproj' -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl -fm`;
		}
	}
	else
	{
		$result = `$gPcxPath '$appleGlotEnvNewBasePath' '$appleGlotEnvNewLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -map 'English.lproj/$lprojLanguageCode.lproj' -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" | $gFpcxPath -l -purl -fm`;
	}

	AALocUtilities::PrintLog($result);
	
	open logFile, "> $logFilePath" or die "Failed to open $logFilePath\n";
	print logFile $result;
	close logFile;
}


#---------------------------------------------------------------------------------------------
#	CompareOldBaseOldLoc
#---------------------------------------------------------------------------------------------

sub CompareOldBaseOldLoc
{
	my($inAppleGlotEnvPath, $inComponentName) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	my $appleGlotEnvironmentName = AALocFileUtilities::GetDirectoryBaseName($inAppleGlotEnvPath);
	my $appleGlotEnvOldBasePath = $inAppleGlotEnvPath . "_OldBase/";
	my $appleGlotEnvOldLocPath = $inAppleGlotEnvPath . "_OldLoc/";
	my $lprojLanguageCode = GetLprojLanguage($appleGlotEnvOldLocPath);
	my $logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_OldBase_vs_OldLoc_Comp_Result.txt";

 
	if ($inComponentName ne "")
	{
		$appleGlotEnvOldBasePath = $appleGlotEnvOldBasePath . $inComponentName . "/";
		$appleGlotEnvOldLocPath = $appleGlotEnvOldLocPath . $inComponentName . "/";
		
		$logFilePath = $inAppleGlotEnvPath . "_Logs/" . "$appleGlotEnvironmentName" . "_" . $inComponentName . "_OldBase_vs_OldLoc_Comp_Result.txt";
	}
 
 
	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Compare OldBase vs OldLoc  $inComponentName\n");
	AALocUtilities::PrintLog("#========================================================================================\n");


	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			$result = `$gPcxPath '$appleGlotEnvOldBasePath' '$appleGlotEnvOldLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -map 'English.lproj/$lprojLanguageCode.lproj' -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl -fm`;
		}
		else
		{
			$result = `$gPcxPath '$appleGlotEnvOldBasePath' '$appleGlotEnvOldLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -map 'English.lproj/$lprojLanguageCode.lproj' -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib"  -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl -fm`;
		}
	}
	else
	{
		$result = `$gPcxPath '$appleGlotEnvOldBasePath' '$appleGlotEnvOldLocPath' -pc -ski -frmap -sniberr -p -nd -objinfo -faddrstr -map 'English.lproj/$lprojLanguageCode.lproj' -exclnibattr 'm/^(dataCell|NSTextFieldCell|layoutInfoCopy|IBCarbonHILayoutInfo|groupedIBObjectID|NSSegmentItem|NSProTextFieldCell|NSProSegmentItem|editorWindowContentRectSynchronizationRect)\$/;' -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -cacheDir2 "~/Library/Caches/LocCache/nib" | $gFpcxPath -l -purl -fm`;
	}

	AALocUtilities::PrintLog($result);
	
	open logFile, "> $logFilePath" or die "Failed to open $logFilePath\n";
	print logFile $result;
	close logFile;
}


#---------------------------------------------------------------------------------------------
#	FindString
#---------------------------------------------------------------------------------------------

sub FindString
{
	my($inFolderPath, $inString) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	#	`mkdir emtpy_temp`;
	#	AALocUtilities::PrintLog(`$gPcxPath -cache1 -ski -fsl "$inString" emtpy_temp "$inFolderPath" | $gFpcxPath -f1`);
	#	`rm -rf emtpy_temp`;

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	AALocUtilities::PrintLog("# Find: $inString\n");
	AALocUtilities::PrintLog("# in    $inFolderPath\n");
	AALocUtilities::PrintLog("#========================================================================================\n");
	
	if (-e "/System/Library/Frameworks/AddressBook.framework/Versions/A/Resources/AddressBookIBPlugin.ibplugin")
	{
		if (-e "/AppleInternal/Developer/Plugins/ProKit.ibplugin")
		{
			$result = `$gPcxPath '$inFolderPath' '$inFolderPath' -pc -ski -str -frmap -sniberr -p -nd -objinfo -faddrstr -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -pnew -pobs -fsl "$inString" -cacheDir2 ~/Library/Caches/LocCache/nib -ib_plugin "$gPCXIBPluginsWithProKit" | $gFpcxPath -l -purl -fm -f1`;
		}
		else
		{
			$result = `$gPcxPath '$inFolderPath' '$inFolderPath' -pc -ski -str -frmap -sniberr -p -nd -objinfo -faddrstr -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -pnew -pobs -fsl "$inString" -cacheDir2 ~/Library/Caches/LocCache/nib -ib_plugin "$gPCXIBPlugins" | $gFpcxPath -l -purl -fm -f1`;
		}
	}
	else
	{
		$result = `$gPcxPath '$inFolderPath' '$inFolderPath' -pc -ski -str -frmap -sniberr -p -nd -objinfo -faddrstr -exclf "m/(^\\.DS_Store\$\|\.nib\\.strings\$|^locversion\\.plist\$)/;" -excld "m/~\\.nib\$/;" -flatten_plist -sksfmi -pnewfile -pobsfile -faddrstr -psummarydiff -pnew -pobs -fsl "$inString" -cacheDir2 ~/Library/Caches/LocCache/nib  | $gFpcxPath -l -purl -fm -f1`;
	}
	
	AALocUtilities::PrintLog($result);
}


#---------------------------------------------------------------------------------------------
#	FindStringInPlist
#---------------------------------------------------------------------------------------------

sub FindStringInPlist
{
	my($inFolderPath, $inString) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	chomp(@searchResult = `find "$inFolderPath" -type f | grep ".plist"`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Seaching $file\n");
	
		$plistObject = NSDictionary->dictionaryWithContentsOfFile_($file);

		if ($plistObject and $$plistObject)
		{
			if ($plistObject->isKindOfClass_(NSArray->class))
			{
				$object = $plist->objectAtIndex_($index);
			}
			elsif ($plistObject->isKindOfClass_(NSDictionary->class))
			{
				$ object = $plist->objectForKey_($key);
			}
			else
			{
				# print "$object is something else, print its value:\n";
				# print perlValue($object) . "\n";
			}
		}	
	}
}


#---------------------------------------------------------------------------------------------
#	PreprocessKeynoteThemes
#---------------------------------------------------------------------------------------------

sub PreprocessKeynoteThemes
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$appleGlotEnvNewBasePath = $inAppleGlotEnvPath . "_NewBase/";
	$appleGlotEnvOldLocPath = $inAppleGlotEnvPath . "_OldLoc/";
	$appleGlotEnvOldBasePath = $inAppleGlotEnvPath . "_OldBase/";


	#-----------------------------------------------------------------------------------------
	#	Process NewBase
	#-----------------------------------------------------------------------------------------

	chomp(@searchResult = `find $appleGlotEnvNewBasePath -type f \\( -path "*/English.lproj/*.masterNames" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		`cp "$file" "$file.strings"`
	}
	

	chomp(@searchResult = `find $appleGlotEnvNewBasePath -type f \\( -path "*/English.lproj/*.name" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		# `cp "$file" "$file.strings"`
		
		open(NAMEFILECONTENT, "<$file") or die "Cannot open '$file': $!";
			@nameFileContent = <NAMEFILECONTENT>;
		close(NAMEFILECONTENT);

		$updatedNameFile = "$file.strings";

		open updatedNameFile, "> $updatedNameFile" or die "Failed to open $updatedNameFile\n";

		foreach $line(@nameFileContent)
		{
			chomp($line);
			print updatedNameFile "\"$line\" = \"$line\"\n";
		}

		close updatedNameFile;
	}


	#-----------------------------------------------------------------------------------------
	#	Process OldBase
	#-----------------------------------------------------------------------------------------

	chomp(@searchResult = `find $appleGlotEnvOldBasePath -type f \\( -path "*/English.lproj/*.masterNames" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		`cp "$file" "$file.strings"`
	}

	
	chomp(@searchResult = `find $appleGlotEnvOldBasePath -type f \\( -path "*/English.lproj/*.name" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		# `cp "$file" "$file.strings"`
		
		open(NAMEFILECONTENT, "<$file") or die "Cannot open '$file': $!";
			@nameFileContent = <NAMEFILECONTENT>;
		close(NAMEFILECONTENT);

		$updatedNameFile = "$file.strings";

		open updatedNameFile, "> $updatedNameFile" or die "Failed to open $updatedNameFile\n";

		foreach $line(@nameFileContent)
		{
			chomp($line);
			print updatedNameFile "\"$line\" = \"$line\"\n";
		}

		close updatedNameFile;
	}


	#-----------------------------------------------------------------------------------------
	#	Process OldLoc
	#-----------------------------------------------------------------------------------------

	for $language ("Dutch", "French", "German", "Italian", "Japanese", "Spanish")
	{
		chomp(@searchResult = `find $appleGlotEnvOldLocPath -type f \\( -path "*/$language.lproj/*.masterNames" \\)`);
	
		foreach $file (@searchResult)
		{
			AALocUtilities::PrintLog("Processing $file\n");
			$targetFile = $file;
			$targetFile =~ s/$language.masterNames/English.masterNames/;
			`cp "$file" "$targetFile.strings"`
		}
	}

	
	chomp(@searchResult = `find $appleGlotEnvOldLocPath -type f \\( -path "*/$language.lproj/*.name" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		
		open(NAMEFILECONTENT, "<$file") or die "Cannot open '$file': $!";
			@nameFileContent = <NAMEFILECONTENT>;
		close(NAMEFILECONTENT);

		$updatedNameFile = "$file.strings";

		open updatedNameFile, "> $updatedNameFile" or die "Failed to open $updatedNameFile\n";

		foreach $line(@nameFileContent)
		{
			chomp($line);
			print updatedNameFile "\"$line\" = \"$line\"\n";
		}

		close updatedNameFile;
	}
}


#---------------------------------------------------------------------------------------------
#	PostprocessKeynoteThemes
#---------------------------------------------------------------------------------------------

sub PostprocessKeynoteThemes
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);


	#--Debug----------------------------------------------------------------------------------
	print STDERR "[Debug:PostprocessKeynoteThemes] Language: $language\n" if ($gDebug);
	#-----------------------------------------------------------------------------------------


	#-----------------------------------------------------------------------------------------
	#	Process NewLoc
	#-----------------------------------------------------------------------------------------

	chomp(@searchResult = `find $appleGlotEnvNewLocPath -type f \\( -path "*/$language.lproj/*.masterNames.strings" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		$targetFile = $file;
		$targetFile =~ s/English.masterNames.strings/$language.masterNames/;
		`mv "$file" "$targetFile"`
	}

	
	chomp(@searchResult = `find $appleGlotEnvNewLocPath -type f \\( -path "*/$language.lproj/*.name.strings" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Processing $file\n");
		
		open(NAMEFILECONTENT, "<$file") or die "Cannot open '$file': $!";
			@nameFileContent = <NAMEFILECONTENT>;
		close(NAMEFILECONTENT);

		$updatedNameFile = $file;
		$updatedNameFile =~ s/English.name.strings/$language.name/;

		open updatedNameFile, "> $updatedNameFile" or die "Failed to open $updatedNameFile\n";

		foreach $line(@nameFileContent)
		{
			chomp($line);
			
			$line =~ m/\"(.*?)\" = \"(.*?)\"/;
			print updatedNameFile "$2\n";
		}
	
		close updatedNameFile;

		`rm "$file"`;

		$tempFile = $file;
		$tempFile =~ s/English.name.strings/English.masterNames/;
		`rm "$tempFile"`;

		$tempFile = $file;
		$tempFile =~ s/English.name.strings/English.name/;
		`rm "$tempFile"`;
		
		$tempFile = $file;
		$tempFile =~ s/English.name.strings/English.preview.tiff/;
		`rm "$tempFile"`;
	}
}


#---------------------------------------------------------------------------------------------
#	PreprocessKeynoteSACountry
#---------------------------------------------------------------------------------------------

sub PreprocessKeynoteSACountry
{
	my($inFilePath) = @_;
	my $tempFile = "/tmp/stanley";


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#	Convert SACountry from UTF-16 to UTF-8
	#-----------------------------------------------------------------------------------------

	`rm $tempFile` if (-e "$tempFile");

	# `iconv -s -f UTF-16 -t UTF8 < "$inFilePath" > "$tempFile"`;
	`iconv -c -f UTF-16 -t UTF8 < "$inFilePath" > "$tempFile"`;


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Processing $inFilePath\n");
	
	open(FILECONTENT, "<$tempFile") or die "Cannot open '$tempFile': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	$updatedFile = "$inFilePath.txt";

	open updatedFile, "> $updatedFile" or die "Failed to open $updatedFile\n";

	# write UTF-8 BOM
	print updatedFile "\xEF\xBB\xBF";

	foreach $line(@fileContent)
	{
		chomp($line);
		# $line =~ m/\0\"(.*?)\0\"\0 \0=\0 \0\"(.*?)\0\"/;
		$line =~ m/\"(.*?)\" = \"(.*?)\"/;

		print updatedFile "$1\t$2\n";
	}

	close updatedFile;
	
	`rm $tempFile` if (-e "$tempFile");
}


#---------------------------------------------------------------------------------------------
#	PostprocessKeynoteSACountry
#---------------------------------------------------------------------------------------------

sub PostprocessKeynoteSACountry
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("Processing $inFilePath\n");
	
	my $saveRS = $/;
	undef $/;

	open(FILECONTENT, "<$inFilePath") or die "Cannot open '$inFilePath': $!";
		@fileContent = split /[\n\r]/, <FILECONTENT>;
	close(FILECONTENT);

	$/ = $saveRS;


	$updatedFile = "$inFilePath.strings";

	open updatedFile, "> $updatedFile" or die "Failed to open $updatedFile\n";

	foreach $line(@fileContent)
	{
		$line =~ m/(.*)\t(.*)/;
		
		$lhsString = $1;
		$rhsString = $2;

		# remove UTF-8 BOM	
		if ($lhsString =~ m/\xEF\xBB\xBF/)
		{
			$lhsString =~ s/\xEF\xBB\xBF//;
		}
		
		print updatedFile "\"$lhsString\" = \"$rhsString\";\n";
	}

	close updatedFile;
	
	
	#-----------------------------------------------------------------------------------------
	#	Convert SACountry from UTF-8 to UTF-16
	#-----------------------------------------------------------------------------------------

	ConvertUTF8ToUTF16($updatedFile);
}


#---------------------------------------------------------------------------------------------
#	SplitWGFile
#---------------------------------------------------------------------------------------------

sub SplitWGFile
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $lineNumber = 0;
	my $line;
	my $outToFirstFile = 1;

	AALocUtilities::PrintLog("Processing $inFilePath\n");
	
	open(FILECONTENT, "<$inFilePath") or die "Cannot open '$inFilePath': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	$numberOfLines = @fileContent;
	$file1EndLine = $numberOfLines / 2;


	$inFilePath =~ m/(.*)\/(.*)/;
	$directory = $1 . "/";
	$fileName =$2;

	$fileName =~ m/(.*)\.(.*)/;
	$fileName1 = $1;
	$ext =$2;

	$splittedWGFile1 = "$directory$fileName1 #1.$ext";
	$splittedWGFile2 = "$directory$fileName1 #2.$ext";


	open splittedWGFile1, "> $splittedWGFile1" or die "Failed to open $splittedWGFile1\n";
	open splittedWGFile2, "> $splittedWGFile2" or die "Failed to open $splittedWGFile2\n";

	
	foreach $line(@fileContent)
	{
		$lineNumber++;
		
		if ($lineNumber > $file1EndLine)
		{
			if ($line eq "<TextItem>\n")
			{
				$outToFirstFile = 0;
			}
		}

		if ($outToFirstFile)
		{
			print splittedWGFile1 "$line";
		}
		else
		{
			print splittedWGFile2 "$line";
		}
	}

	close splittedWGFile1;
	close splittedWGFile2;
}


#---------------------------------------------------------------------------------------------
#	Split3WGFile
#---------------------------------------------------------------------------------------------

sub Split3WGFile
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	my $lineNumber = 0;
	my $line;
	my $outToFirstFile = 1;
	my $outToSecondFile = 0;

	AALocUtilities::PrintLog("Processing $inFilePath\n");
	
	open(FILECONTENT, "<$inFilePath") or die "Cannot open '$inFilePath': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	$numberOfLines = @fileContent;
	$file1EndLine = $numberOfLines / 3;


	$inFilePath =~ m/(.*)\/(.*)/;
	$directory = $1 . "/";
	$fileName =$2;

	$fileName =~ m/(.*)\.(.*)/;
	$fileName1 = $1;
	$ext =$2;

	$splittedWGFile1 = "$directory$fileName1 #1.$ext";
	$splittedWGFile2 = "$directory$fileName1 #2.$ext";
	$splittedWGFile3 = "$directory$fileName1 #3.$ext";


	open splittedWGFile1, "> $splittedWGFile1" or die "Failed to open $splittedWGFile1\n";
	open splittedWGFile2, "> $splittedWGFile2" or die "Failed to open $splittedWGFile2\n";
	open splittedWGFile3, "> $splittedWGFile3" or die "Failed to open $splittedWGFile3\n";

	
	foreach $line(@fileContent)
	{
		$lineNumber++;
		
		if ($lineNumber > $file1EndLine)
		{
			if ($line eq "<TextItem>\n")
			{
				$outToFirstFile = 0;
				$outToSecondFile = 1;
			}
		}

		
		if ($lineNumber > $file1EndLine * 2)
		{
			if ($line eq "<TextItem>\n")
			{
				$outToFirstFile = 0;
				$outToSecondFile = 0;
			}
		}


		if ($outToFirstFile)
		{
			print splittedWGFile1 "$line";
		}
		elsif ($outToSecondFile)
		{
			print splittedWGFile2 "$line";
		}
		else
		{
			print splittedWGFile3 "$line";
		}
	}

	close splittedWGFile1;
	close splittedWGFile2;
	close splittedWGFile3;
}


#---------------------------------------------------------------------------------------------
#	MergeSplittedWGFile
#---------------------------------------------------------------------------------------------

sub MergeSplittedWGFile
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$inFilePath =~ m/(.*)\/(.*)/;
	$directory = $1 . "/";
	$fileName =$2;

	$fileName =~ m/(.*)\.(.*)/;
	$fileName1 = $1;
	$ext =$2;

	$splittedWGFile1 = "$directory$fileName1 #1.$ext";
	$splittedWGFile2 = "$directory$fileName1 #2.$ext";


	if (!(-e "$splittedWGFile1"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $splittedWGFile1 doesn't exist.\n");
		return;
	}


	if (!(-e "$splittedWGFile2"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $splittedWGFile2 doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	open wgFile, "> $inFilePath" or die "Failed to open $inFilePath\n";


	AALocUtilities::PrintLog("Processing $splittedWGFile1\n");
	
	open(FILECONTENT, "<$splittedWGFile1") or die "Cannot open '$splittedWGFile1': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	foreach $line(@fileContent)
	{
		print wgFile "$line";
	}

	AALocUtilities::PrintLog("Processing $splittedWGFile2\n");
	
	open(FILECONTENT, "<$splittedWGFile2") or die "Cannot open '$splittedWGFile2': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	foreach $line(@fileContent)
	{
		print wgFile "$line";
	}


	close wgFile;
}


#---------------------------------------------------------------------------------------------
#	Merge3SplittedWGFile
#---------------------------------------------------------------------------------------------

sub Merge3SplittedWGFile
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$inFilePath =~ m/(.*)\/(.*)/;
	$directory = $1 . "/";
	$fileName =$2;

	$fileName =~ m/(.*)\.(.*)/;
	$fileName1 = $1;
	$ext =$2;

	$splittedWGFile1 = "$directory$fileName1 #1.$ext";
	$splittedWGFile2 = "$directory$fileName1 #2.$ext";
	$splittedWGFile3 = "$directory$fileName1 #3.$ext";


	if (!(-e "$splittedWGFile1"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $splittedWGFile1 doesn't exist.\n");
		return;
	}

	if (!(-e "$splittedWGFile2"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $splittedWGFile2 doesn't exist.\n");
		return;
	}

	if (!(-e "$splittedWGFile3"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $splittedWGFile3 doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	open wgFile, "> $inFilePath" or die "Failed to open $inFilePath\n";


	AALocUtilities::PrintLog("Processing $splittedWGFile1\n");
	
	open(FILECONTENT, "<$splittedWGFile1") or die "Cannot open '$splittedWGFile1': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	foreach $line(@fileContent)
	{
		print wgFile "$line";
	}

	AALocUtilities::PrintLog("Processing $splittedWGFile2\n");
	
	open(FILECONTENT, "<$splittedWGFile2") or die "Cannot open '$splittedWGFile2': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	foreach $line(@fileContent)
	{
		print wgFile "$line";
	}

	AALocUtilities::PrintLog("Processing $splittedWGFile3\n");
	
	open(FILECONTENT, "<$splittedWGFile3") or die "Cannot open '$splittedWGFile3': $!";
		@fileContent = <FILECONTENT>;
	close(FILECONTENT);

	foreach $line(@fileContent)
	{
		print wgFile "$line";
	}


	close wgFile;
}


#---------------------------------------------------------------------------------------------
#	ConvertMacRomanToUTF16
#---------------------------------------------------------------------------------------------

sub ConvertMacRomanToUTF16
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	`rm /tmp/stanley` if (-e "/tmp/stanley");
	`cp "$inFilePath" "/tmp/stanley"`;

	# `iconv -s -f MacRoman -t UTF-16 < "/tmp/stanley" > "$inFilePath"`;
	`iconv -c -f MacRoman -t UTF-16 < "/tmp/stanley" > "$inFilePath"`;

	`rm /tmp/stanley` if (-e "/tmp/stanley");
}


#---------------------------------------------------------------------------------------------
#	ConvertUTF8ToUTF16
#---------------------------------------------------------------------------------------------

sub ConvertUTF8ToUTF16
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	`rm /tmp/stanley` if (-e "/tmp/stanley");
	`cp "$inFilePath" "/tmp/stanley"`;

	# `iconv -s -f UTF8 -t UTF-16 < "/tmp/stanley" > "$inFilePath"`;
	`iconv -c -f UTF8 -t UTF-16 < "/tmp/stanley" > "$inFilePath"`;

	`rm /tmp/stanley` if (-e "/tmp/stanley");
}


#---------------------------------------------------------------------------------------------
#	ConvertUTF16ToUTF8
#---------------------------------------------------------------------------------------------

sub ConvertUTF16ToUTF8
{
	my($inFilePath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-e "$inFilePath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFilePath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	`rm /tmp/stanley` if (-e "/tmp/stanley");
	`cp "$inFilePath" "/tmp/stanley"`;

	# `iconv -s -f UTF-16 -t UTF8 < "/tmp/stanley" > "$inFilePath"`;
	`iconv -c -f UTF-16 -t UTF8 < "/tmp/stanley" > "$inFilePath"`;

	`rm /tmp/stanley` if (-e "/tmp/stanley");
}


#---------------------------------------------------------------------------------------------
#	UTF8toUTF16
#---------------------------------------------------------------------------------------------

sub UTF8toUTF16
{
    my @input = split('', shift);
    my $i=0, $len = scalar @input;
    my $safe_mode = 1;
    my $result;

    $result = "";

    while ($i < $len)
	{
		# 1-byte char
		if (ord($input[$i]) < 0x80)
		{
			$result .= pack "S", ord($input[$i]);
			$i++;

			next;
		}

		# 2-byte char
		if (ord($input[$i]) < 0xe0)
		{
			$result .= pack "S", ((ord($input[$i]) - $_base_2_1) << 6) + (ord($input[$i+1]) - $_base_2_2);
			$i += 2;

			next;
		}

		# 3-byte char
		if (ord($input[$i]) < 0xf0)
		{
			$result .= pack "S",
						((ord($input[$i])   - $_base_3_1) << 12)
						+ ((ord($input[$i+1]) - $_base_3_2) << 6)
						+ ((ord($input[$i+2]) - $_base_3_3));
			$i += 3;

			next;
		}

		# we ignore UCS-4 range for the moment. just for avoiding infinite loop
		warn "byte_per_char > 3?\n";
		
		if (ord($input[$i]) < 0xf8)
		{
			warn "4-byte char?\n";
			$i += 4; next;
		}
		
		if (ord($input[$i]) < 0xfc)
		{
			warn "5-byte char?\n";
			$i += 5; next;
		}
		else
		{
			warn "6-byte char?\n";
			$i += 6; next;
		}
    }

    return $result;
}


#---------------------------------------------------------------------------------------------
#	UTF16toUTF8
#---------------------------------------------------------------------------------------------

sub UTF16toUTF8
{
	my @input = split('', shift);
	my $i=0, $len = scalar @input;
	my $safe_mode = 1;
	my $result, $num;

	$result = "";

	#warn "16->8: len = $len.\n";
	while ($i < $len)
	{
		$num = (ord($input[$i]) << 8) + ord($input[$i+1]);
		
		# 1-byte UTF-8
		if ($num <= 0x7f)
		{
			#warn "1-byte. \n";
			$result .= pack "C*", $num & 0xff;

			goto NEXT_2;
		}
		
		# 2-byte UTF-8
		if ($num <= 0x07ff)
		{
			#warn "2-byte.\n";
			$result .= pack "C*", 
			(($num & $_mask_2_1) >> 6) + $_base_2_1,
			(($num & $_mask_2_2))      + $_base_2_2;

			goto NEXT_2;
		}

		# 3-byte UTF-8
		if ($num <= 0xffff)
		{
			#warn "3-byte. \n";
			$result .= pack "C*",
						(($num & $_mask_3_1) >> 12)  + $_base_3_1,
						(($num & $_mask_3_2) >>  6)  + $_base_3_2,
						(($num & $_mask_3_3)      )  + $_base_3_3;
			goto NEXT_2;
		}

		# we ignore UCS-4 range for the moment.
		warn "byte_per_char > 3?\n";

		NEXT_2:
		$i += 2;
	}

    return $result;
}


#---------------------------------------------------------------------------------------------
#	FindNumberFormatterInAppleGlotEnv
#---------------------------------------------------------------------------------------------

sub FindNumberFormatterInAppleGlotEnv
{
	my($inAppleGlotEnvPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inAppleGlotEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inAppleGlotEnvPath doesn't exist.\n");
		return;
	}

	$appleGlotEnvNewLocPath = $inAppleGlotEnvPath . "_NewLoc/";
	$numberFormatterLogFile = $inAppleGlotEnvPath . "_Logs/NumberFormatterLog.txt";

	my $language = GetLprojLanguage($appleGlotEnvNewLocPath);


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $tempFile = "/tmp/stanley";
	`rm $tempFile` if (-e "$tempFile");
	
	chomp(@searchResult = `find $appleGlotEnvNewLocPath -type d \\( -path "*/$language.lproj/*.nib" \\) | grep -v "~.nib"`);

	open logFile, "> $numberFormatterLogFile" or die "Failed to open $numberFormatterLogFile\n";

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Seaching $file\n");
	
		`nibtool -a -8 "$file" > "$tempFile"`;
		
		open(FILECONTENT, "<$tempFile") or die "Cannot open '$tempFile': $!";
			@fileContent = <FILECONTENT>;
		close(FILECONTENT);
		
		my $line;
		my $preLine = "";
		
		foreach $line(@fileContent)
		{
			# if ($line =~ m/Class = \"NSNumberFormatter\"/)
			if ($line =~ m/<NSNumberFormatter>/)
			{
				# $preLine =~ m/\"Object (.*?)\"/;
				$preLine =~ m/\"Object (.*?) </;

				print logFile "<nib:/$file?$1>\n";
			}
			
			$preLine = $line;
		}
	}

	close logFile;
	
	`rm $tempFile` if (-e "$tempFile");
}


#---------------------------------------------------------------------------------------------
#	FindNumberFormatter
#---------------------------------------------------------------------------------------------

sub FindNumberFormatter
{
	my($inFolderPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my $tempFile = "/tmp/stanley";
	
	chomp(@searchResult = `find $inFolderPath -type d | grep ".nib"`);

	`rm $tempFile` if (-e "$tempFile");

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Seaching $file\n");
	
		`nibtool -a -8 "$file" > "$tempFile"`;

		
		open(FILECONTENT, "<$tempFile") or die "Cannot open '$tempFile': $!";
			@fileContent = <FILECONTENT>;
		close(FILECONTENT);
		
		my $line;
		my $preLine = "";
		
		foreach $line(@fileContent)
		{
			# if ($line =~ m/Class = \"NSNumberFormatter\"/)
			if ($line =~ m/<NSNumberFormatter>/)
			{
				# $preLine =~ m/\"Object (.*?)\"/;
				$preLine =~ m/\"Object (.*?) </;

				print "<nib:/$file?$1>\n";
			}
			
			$preLine = $line;
		}
	}
	
	`rm $tempFile` if (-e "$tempFile");
}


#---------------------------------------------------------------------------------------------
#	CheckLabel
#---------------------------------------------------------------------------------------------

sub CheckLabel
{
	my($inFolderPath) = @_;

	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inFolderPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified path $inFolderPath doesn't exist.\n");
		return;
	}


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------
	
	my %colorLabels = ();
	my $labelColor = 'None';

	
	chomp(@searchResult = `find $inFolderPath -type d`);

	foreach $folder (@searchResult)
	{
		$colorLabels = `getFinderLabel "$folder"`;
		eval $colorLabels;

		$labelColor = $colorLabels{$folder};
		
		print "$folder\n";
		print "$labelColor\n";
		
		if ($labelColor ne "None")
		{
			print "$folder    $labelColor\n";
		}
	}
}


#---------------------------------------------------------------------------------------------
#	SelfTesting
#---------------------------------------------------------------------------------------------

sub SelfTesting
{
	my($inLocEnvPath, $inLocKitDmgPath, $inLocEngPackDmgPath) = @_;


	#-----------------------------------------------------------------------------------------
	#	Check input path
	#-----------------------------------------------------------------------------------------

	if (!(-d "$inLocEnvPath"))
	{
		AALocUtilities::PrintLog("\n### ERROR: The specified loc environment $inLocEnvPath doesn't exist.\n");
		return;
	}



	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	if (($inLocKitDmgPath ne "") && (-e $inLocKitDmgPath))
	{
		system "$gAALocCommandPath -copyLocKit -file $inLocKitDmgPath -locenv $inLocEnvPath";
	}


	#	Fill Mail Notify

	my $mailNotifyFilePath;

	$mailNotifyFilePath = $inLocEnvPath . "Info/MailNotify";
	open mailNotifyFile, "> $mailNotifyFilePath" or die "Failed to open $mailNotifyFilePath\n";
		print mailNotifyFile "locsubmits\@group.apple.com, stanleyauyeung\@asia.apple.com\n";
	close mailNotifyFile;


	$mailNotifyFilePath = $inLocEnvPath . "Info_Org/MailNotify";
	open mailNotifyFile, "> $mailNotifyFilePath" or die "Failed to open $mailNotifyFilePath\n";
		print mailNotifyFile "locsubmits\@group.apple.com, stanleyauyeung\@asia.apple.com\n";
	close mailNotifyFile;


	$mailNotifyFilePath = $inLocEnvPath . "Info/MailNotify.SHSR";
	open mailNotifyFile, "> $mailNotifyFilePath" or die "Failed to open $mailNotifyFilePath\n";
		print mailNotifyFile "xautosubmit\@group.apple.com, stanleyauyeung\@asia.apple.com\n";
	close mailNotifyFile;


	$mailNotifyFilePath = $inLocEnvPath . "Info_Org/MailNotify.SHSR";
	open mailNotifyFile, "> $mailNotifyFilePath" or die "Failed to open $mailNotifyFilePath\n";
		print mailNotifyFile "xautosubmit\@group.apple.com, stanleyauyeung\@asia.apple.com\n";
	close mailNotifyFile;


	#	Fill BugFixComments

	my $bugFixCommentsPath = $inLocEnvPath . "Info/BugFixComments/";
	my $bugFixCommentsOrgPath = $inLocEnvPath . "Info_Org/BugFixComments/";
	my $bugFixCommentFilePath;
	

	opendir(directory, $bugFixCommentsPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$bugFixCommentFilePath = $bugFixCommentsPath . $file;
	
		open bugFixCommentsFile, "> $bugFixCommentFilePath" or die "Failed to open $file\n";
			print bugFixCommentsFile "Loc submission for US changes\n\nStanley Au-Yeung <stanleyauyeung@asia.apple.com>\n";
		close bugFixCommentsFile;
	}

	opendir(directory, $bugFixCommentsOrgPath);
	@searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		$bugFixCommentFilePath = $bugFixCommentsOrgPath . $file;
	
		open bugFixCommentsFile, "> $bugFixCommentFilePath" or die "Failed to open $file\n";
			print bugFixCommentsFile "Loc submission for US changes\n\nStanley Au-Yeung <stanleyauyeung@asia.apple.com>\n";
		close bugFixCommentsFile;
	}


	system "$gAALocCommandPath -nibNewBaseScreenshot -locenv $inLocEnvPath";
	system "$gAALocCommandPath -updatedNibNewBaseScreenshot -locenv $inLocEnvPath";

	system "$gAALocCommandPath -prepareTranslationKit -locenv $inLocEnvPath";
	system "$gAALocCommandPath -makeTranslationKitDmg -locenv $inLocEnvPath";


	my $componentList = $inLocEnvPath . $kDefualtSplitTranslationKitFileName;

	if (-e $componentList)
	{
		system "$gAALocCommandPath -splitTranslationKit -locenv $inLocEnvPath";
	}
	
	$componentList = $locenv . $kDefualtSplitLocEnvFileName;
	
	if (-e $componentList)
	{
		system "$gAALocCommandPath -splitLocEnv -locenv $inLocEnvPath";
	}
	
	
	if (($inLocEngPackDmgPath ne "") && (-e $inLocEngPackDmgPath))
	{
		system "$gAALocCommandPath -receiveTranslationKit -locenv $inLocEnvPath -file $inLocEngPackPath";
	}
	else
	{
		my $latestTranslationKitPath = AALocEnvUtilities::GetLatestTranslationKitPathFromLocEnv($inLocEnvPath);
		my $translationKitSubmitPath = AALocEnvUtilities::GetTranslationKitSubmitPathFromLocEnv($inLocEnvPath);
		`ditto "$latestTranslationKitPath" "$translationKitSubmitPath"`;
		
		system "$gAALocCommandPath -receiveTranslationKit -locenv $inLocEnvPath";
	}
		
	system "$gAALocCommandPath -mergeWGFiles -locenv $inLocEnvPath";
	system "$gAALocCommandPath -backupReviewedWG -locenv $inLocEnvPath";
	system "$gAALocCommandPath -restoreNonGlotableFiles -locenv $inLocEnvPath";
	system "$gAALocCommandPath -pseudoLoc -locenv $inLocEnvPath";
	system "$gAALocCommandPath -runAppleGlotPass2And3 -locenv $inLocEnvPath";
	system "$gAALocCommandPath -runAppleGlotPass3 -locenv $inLocEnvPath";

	system "$gAALocCommandPath -nibNewLocScreenshot -locenv $inLocEnvPath";
	system "$gAALocCommandPath -updatedNibNewLocScreenshot -locenv $inLocEnvPath";
	
	system "$gAALocCommandPath -localizeLocversionPlist -locenv $inLocEnvPath";
	system "$gAALocCommandPath -autoLayout -locenv $inLocEnvPath";
	system "$gAALocCommandPath -aaCheckAll -locenv $inLocEnvPath";
	system "$gAALocCommandPath -dittoProj -locenv $inLocEnvPath";
	system "$gAALocCommandPath -loctar -locenv $inLocEnvPath";
	system "$gAALocCommandPath -backupLocEnv -locenv $inLocEnvPath";
	system "$gAALocCommandPath -prepareLocEngDoneImage -locenv $inLocEnvPath";
}




#=============================================================================================
# Usage
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	Usage
#---------------------------------------------------------------------------------------------

sub Usage
{
	print STDERR "\n";
	print STDERR "AALocCommand\n";
	print STDERR "\n";

	PrintAALocToolsVersion();
	print STDERR "\n";

	print STDERR "Usage: AALocCommand [-help or -h] <command> <AppleGlot/LKCX environment>\n";
	print STDERR "\n";
	print STDERR "This command allows to:\n";
	print STDERR "  -getLocToolsEnvInfo                Print Loc Tools (includeing AA Tools) Environment Information\n";
	print STDERR "  -mergeInHouseTranslationEnv        Merge InHouse Translation Env\n";
	print STDERR "  -mergeWGFiles                      Merge Translated WG and Original WG to WG folder\n";
	print STDERR "  -checkWGFileSyntax                 Check WG/AD File(s) Syntax\n";
	print STDERR "  -moveADWGToLG                      Move ADs and WGs to LG folder\n";
	print STDERR "  -compareWGFile                     Compare two WG/AD file\n";
	print STDERR "  -compareWGFolder                   Compare two WG/AD folders\n";
	print STDERR "  -compareTarballFolder              Compare two Tarball folders\n";
	print STDERR "  -compareFolder                     Compare two folders\n";
	print STDERR "  -compareFolder_Pro                 Compare two folders\n";
	print STDERR "  -compareOldBaseNewBase             Compare OldBase and NewBase\n";
	print STDERR "  -compareOldLocNewLoc               Compare OldLoc and NewLoc\n";
	print STDERR "  -compareNewBaseNewLoc              Compare NewBase and NewLoc\n";
	print STDERR "  -compareOldBaseOldLoc              Compare OldBase and OldLoc\n";
	print STDERR "  -rerunAppleGlotPass1               Rerun AppleGlot Pass 1.\n";
	print STDERR "                                     Move ADs and WGs to LG folder\n";
	print STDERR "                                     Reset AppleGlot environment\n";
	print STDERR "                                     Run AppleGlot Pass 1\n";
	print STDERR "                                     Run flidentifier\n";
	print STDERR "                                     if -comp Proj1, only rerun AppleGlot Pass 1 of Proj1\n";
	print STDERR "                                     if -lang Language, rerun AppleGlot Pass 1 with Language\n";
	print STDERR "  -rerunAppleGlotPass1ForceUpdate    Rerun AppleGlot Pass 1 with force update.\n";
	print STDERR "  -fixAGEnvPermission                Run chmod -R +w to fix AppleGlot Environment permission problem.\n";
	print STDERR "  -generateNotTranslatedStringsWG    Generate not translated strings from ADs.\n";
	print STDERR "  -generateOnlyTranslatedStringsAD   Generate only translated strings from ADs.\n";
	print STDERR "  -leverageWGFromOther               Leverage WG from other WG/AD.\n";
	print STDERR "  -leverageWGFromOtherFolder         Leverage WG from other WG/AD folder.\n";
	print STDERR "  -runAppleGlotPass1                 Run AppleGlot Pass 1.\n";
	print STDERR "  -runAppleGlotPass1ForceUpdate      Run AppleGlot Pass 1 with force update.\n";
	print STDERR "  -runAppleGlotPass2                 Run AppleGlot Pass 2.\n";
	print STDERR "  -runAppleGlotPass3                 Run AppleGlot Pass 3.\n";
	print STDERR "  -runAppleGlotPass2And3             Run AppleGlot Pass 2 and 3.\n";
	print STDERR "  -fixChangedOID		               Fix changed OID\n";
	print STDERR "  -fixDataDependency                 Fix data.dependency\n";
	print STDERR "  -autoLayout                        AutoLayout .nib files in _NewLoc.\n";
	print STDERR "  -aaCheckAll                        Run aaCheckLocFiles, checkUpdatedNibFiles and aaflverifier\n";
	print STDERR "  -flidentifier                      Run flidentifier\n";
	print STDERR "  -flverifier                        Create flverifier report\n";
	print STDERR "  -aaflverifier                      Create flverifier report using AAflverifier\n";
	print STDERR "  -filterFLVerifierReport            Filter flverifier Report\n";
	print STDERR "  -fwStringVerifier                  Create flverifier report for iPod FW AppleGlot Environment\n";
	print STDERR "  -updateflverifierLog               Update the path in the log file\n";
	print STDERR "  -updateAutoLayoutAdjustLog         Update the path in the log file\n";
	print STDERR "  -extractWGNeedReview               Copy WG that need review to _WorkGlossaryNeedReview folder\n";
	print STDERR "  -createThinWG                      Create Thinned WG to WG_Transit folder\n";
	print STDERR "  -filterCheckLocFilesReport         Filter CheckLocFiles Report\n";
	print STDERR "  -checkAppleGlotLog                 Check AppleGlot Log files\n";
	print STDERR "  -nibNewBaseScreenshot              Dump screenshot of all _NewBase nib files\n";
	print STDERR "  -nibNewLocScreenshot               Dump screenshot of all _NewLoc nib files\n";
	print STDERR "  -updatedNibNewBaseScreenshot       Dump screenshot of updated and new _NewBase nib files\n";
	print STDERR "  -updatedNibNewLocScreenshot        Dump screenshot of updated and new _NewLoc nib files\n";
	print STDERR "  -allNibScreenshot                  Dump screenshot of all nib files\n";
	print STDERR "  -prepareTranslationKit             Copy the files from AppleGlot environment to translation kit\n";
	print STDERR "  -splitTranslationKit               Split the translation kit according to the component list\n";
	print STDERR "  -splitLocEnv                       Split the Loc Env according to the component list\n";
	print STDERR "  -mergeLocEnv                       Merge the Loc Env according to the loc envs list\n";
	print STDERR "  -receiveTranslationKit             Copy the files from translation kit to AppleGlot environment\n";
	print STDERR "  -receiveTranslationKitWithAD       Copy the files from translation kit including AD files to AppleGlot environment\n";
	print STDERR "  -aaCheckLocFiles                   Check the localized files in AppleGlot environment\n";
	print STDERR "  -checkWGFiles                      Check the WG files in AppleGlot environment\n";
	print STDERR "  -checkADFiles                      Check the AD files in AppleGlot environment\n";
	print STDERR "  -checkProblemNibs                  Check the nib files problem\n";
	print STDERR "  -fixContaminatedNibs               Fix contaminated nibs\n";
	print STDERR "  -checkNibFiles                     Check the localized Nib files in AppleGlot environment\n";
	print STDERR "  -checkUpdatedNibFiles              Check the localized Nib files (only updated) in AppleGlot environment\n";
	print STDERR "  -setLocEnv                         Set Current Loc Env\n";
	print STDERR "  -setLocEnvForceUpdate              Set Current Loc Env and update it\n";
	print STDERR "  -getLocEnv                         Get Current Loc Env\n";
	print STDERR "  -createLocEnv                      Create Loc Env\n";
	print STDERR "  -copyLocKit                        Copy Loc Kit to Loc Env\n";
	print STDERR "  -copyLocKitDontRunFlidentifier     Copy Loc Kit to Loc Env but don't run flidentifier\n";
	print STDERR "  -copyLXRipEnv                      Copy LXRip to Loc Env\n";
	print STDERR "  -copyBackupForBugFix               Copy Backup Zip File to Loc Env for Bug Fix\n";
	print STDERR "  -selectBugFixComponents            Select Components for Bug Fix\n";
	print STDERR "  -bugFixPreProcess                  Rerun AppleGlot Pass 1 and run AppleGlot 2 & 3\n";
	print STDERR "  -verificator                       Check whether there are nibs damaged\n";
	print STDERR "  -removeComponent                   Remove component from Loc Env\n";
	print STDERR "  -checkLKCX                         Check LKCX\n";
	print STDERR "  -checkAllLocKitsComponentPlist     Check all loc kits component.plist\n";
	print STDERR "  -makeTranslationKitDmg             Make Translation Kit Dmg\n";
	print STDERR "  -backupReviewedWG                  Backup Reviewed WG from _WorkGlossary to Reviewed_WG\n";
	print STDERR "  -backupNewLoc                      Backup NewLoc from _NewLoc to _NewLoc_Org\n";
	print STDERR "  -backupAGEnv                       Backup AppleGlot Env\n";
	print STDERR "  -prepareLocEngDoneImage            Prepeare LocEngDone image\n";
	print STDERR "  -backupLocEnv                      Backup Loc Env\n";
	print STDERR "  -extractNonGlotableFile            Extract Updated and New NonGlottable Files\n";
	print STDERR "  -extractAllNonGlotableFile         Extract All NonGlottable Files\n";
	print STDERR "  -restoreNonGlotableFiles           Restore NonGlottable Files\n";
	print STDERR "  -locuntar                          locuntar\n";
	print STDERR "  -backupLocEnvInfo                  backup Info folder of LocEnv\n";
	print STDERR "  -restoreLocEnvInfo                 restore Info folder of LocEnv\n";
	print STDERR "  -localizeLocversionPlist           localize locversion.plist\n";
	print STDERR "  -dittoProj                         dittoProj\n";
	print STDERR "  -loctar                            loctar\n";
	print STDERR "  -loctarBugFix                      loctar bug fix\n";
	print STDERR "  -loctarWithGlossary                loctar with glossary\n";
	print STDERR "  -checkLocfiles                     check_locfiles\n";
	print STDERR "  -checkTarfile                      check_tarfile\n";
	print STDERR "  -checkTarballChecksum              Check checksum of tarballs with flverifier report\n";
	print STDERR "  -expandTar                         Expand the tar file or all tar files in a folder\n";
	print STDERR "  -expandPackage                     Expand the files in a Package\n";
	print STDERR "  -copyLproj                         Copy xxx.lproj\n";
	print STDERR "  -pseudoLoc                         Pseudo localizate all WG files\n";
	print STDERR "  -makeDiskImage                     Make Disk Image\n";
	print STDERR "  -fcpPlistPreProcess                Pre-Process FCP .plist files\n";
	print STDERR "  -fcpPlistPostProcess               Post-Process FCP .plist files\n";
	print STDERR "  -widgetJSPreProcess                Pre-Process Widget .js files\n";
	print STDERR "  -widgetJSPostProcess               Post-Process Widget .js files\n";
	print STDERR "  -javaPropertiesPreProcess          Pre-Process Java .properties files\n";
	print STDERR "  -javaPropertiesPostProcess         Post-Process Java .properties files\n";
	print STDERR "  -findString                        Find string in the folder\n";
	print STDERR "  -preprocessKeynoteThemes           Preprocess Keynote Themes files\n";
	print STDERR "  -postprocessKeynoteThemes          Postprocess Keynote Themes files\n";
	print STDERR "  -preprocessKeynoteSACountry        Preprocess Keynote SACountry.strings\n";
	print STDERR "  -postprocessKeynoteSACountry       Postprocess Keynote SACountry.strings\n";
	print STDERR "  -splitWGFile                       Split WG file into two\n";
	print STDERR "  -mergeSplittedWGFile               Merge the splitted WG files\n";
	print STDERR "  -split3WGFile                      Split WG file into three\n";
	print STDERR "  -merge3SplittedWGFile              Merge the three splitted WG files\n";
	print STDERR "  -convertUTF8ToUTF16                Convert the file from UTF-8 to UTF-16\n";
	print STDERR "  -glot                              AppleGlot directory\n";
	print STDERR "  -lkcx                              LKCX directory\n";
	print STDERR "  -locenv                            LocEnv directory\n";
	print STDERR "  -file                              file path\n";
	print STDERR "  -file2                             file path\n";
	print STDERR "  -folder                            folder path\n";
	print STDERR "  -folder2                           folder path\n";
	print STDERR "  -comp                              component name\n";
	print STDERR "  -lang                              language\n";
	print STDERR "\n";
	print STDERR "  -help or -h                        Display this help.\n";
	print STDERR "\n";
	print STDERR "\n";
	print STDERR "AALocCommand -mergeInHouseTranslationEnv -folder /TranslationEnv/\n";
	print STDERR "AALocCommand -mergeWGFiles -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -mergeWGFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkWGFileSyntax -file pathOfWGFile\n";
	print STDERR "AALocCommand -checkWGFileSyntax -folder pathOfWGFileFolder\n";
	print STDERR "AALocCommand -moveADWGToLG -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -generateNotTranslatedStringsWG -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -generateNotTranslatedStringsWG  {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -generateOnlyTranslatedStringsAD -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -generateOnlyTranslatedStringsAD  {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -leverageWGFromOther -file pathOfWGFile -file2 pathOfOtherWGADFile\n";
	print STDERR "AALocCommand -leverageWGFromOtherFolder -folder pathOfWGFolder -folder2 pathOfOtherWGADFolder\n";
	print STDERR "AALocCommand -fixAGEnvPermission -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -fixAGEnvPermission  {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -compareXliffFile -file pathOfFile1 -file2 pathOfFile2\n";
	print STDERR "AALocCommand -compareXliffFolder -folder pathOfFolder1 -folder2 pathOfFolder2\n";
	print STDERR "AALocCommand -compareWGFile -file pathOfFile1 -file2 pathOfFile2\n";
	print STDERR "AALocCommand -compareWGFolder -folder pathOfFolder1 -folder2 pathOfFolder2\n";
	print STDERR "AALocCommand -compareTarballFolder -folder pathOfFolder1 -folder2 pathOfFolder2\n";
	print STDERR "AALocCommand -compareFolder -folder pathOfFolder1 -folder2 pathOfFolder2\n";
	print STDERR "AALocCommand -compareFolder_Pro -folder pathOfFolder1 -folder2 pathOfFolder2\n";
	print STDERR "AALocCommand -compareOldBaseNewBase -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -compareOldBaseNewBase  {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -compareOldLocNewLoc -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -compareOldLocNewLoc  {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -compareNewBaseNewLoc -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -compareNewBaseNewLoc  {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -compareOldBaseOldLoc -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -compareOldBaseOldLoc  {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -resetAGEnv {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -resetAGEnv -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -rerunAppleGlotPass1 -glot /LocEnv/AppleGlot_Env/ {-comp Proj1} {-lang Language}\n";
	print STDERR "AALocCommand -rerunAppleGlotPass1  {-locenv /LocEnv/} {-comp Proj1} {-lang Language}\n";
	print STDERR "AALocCommand -rerunAppleGlotPass1ForceUdate -glot /LocEnv/AppleGlot_Env/ {-comp Proj1} {-lang Language}\n";
	print STDERR "AALocCommand -rerunAppleGlotPass1ForceUpdate  {-locenv /LocEnv/} {-comp Proj1} {-lang Language}\n";
	print STDERR "AALocCommand -runAppleGlotPass1 -glot /LocEnv/AppleGlot_Env/ -lang Language {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass1 {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass1ForceUpdate -glot /LocEnv/AppleGlot_Env/ -lang Language {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass1ForceUpdate {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass2 -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass2 {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass3 -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass3 {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass2And3 -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -runAppleGlotPass2And3 {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -fixChangedOID -glot /LocEnv/AppleGlot_Env/  {-comp Proj1}\n";
	print STDERR "AALocCommand -fixChangedOID {-locenv /LocEnv/}  {-comp Proj1}\n";
	print STDERR "AALocCommand -fixDataDependency -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -fixDataDependency {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -autoLayout -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -autoLayout {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -aaCheckAll -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -aaCheckAll {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -flidentifier -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -flidentifier {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -flverifier -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -flverifier {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -aaflverifier -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -aaflverifier {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -aaflverifier {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -filterFLVerifierReport  {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -fwStringVerifier -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -updateflverifierLog -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -updateAutoLayoutAdjustLog -lkcx /LocEnv/LKCX_Env/\n";
	print STDERR "AALocCommand -extractWGNeedReview -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -createThinWG -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -filterCheckLocFilesReport -file /checklocfiles.txt\n";
	print STDERR "AALocCommand -checkAppleGlotLog -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -checkAppleGlotLog  {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -nibNewBaseScreenshot -glot /LocEnv/AppleGlot_Env/ \n";
	print STDERR "AALocCommand -nibNewBaseScreenshot {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -nibNewLocScreenshot -glot /LocEnv/AppleGlot_Env/ \n";
	print STDERR "AALocCommand -nibNewLocScreenshot {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -updatedNibNewBaseScreenshot -glot /LocEnv/AppleGlot_Env/ \n";
	print STDERR "AALocCommand -updatedNibNewBaseScreenshot {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -updatedNibNewLocScreenshot -glot /LocEnv/AppleGlot_Env/ \n";
	print STDERR "AALocCommand -updatedNibNewLocScreenshot {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -allNibScreenshot -glot /LocEnv/AppleGlot_Env/ \n";
	print STDERR "AALocCommand -allNibScreenshot {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -prepareTranslationKit {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -prepareTranslationKit -glot /LocEnv/AppleGlot_Env/ -translationKit /LocEnv/Translationkit\n";
	print STDERR "AALocCommand -splitTranslationKit {-locenv /LocEnv/} { -file componentList} \n";
	print STDERR "AALocCommand -splitTranslationKit -translationKit /LocEnv/Translationkit -file /LocEnv/ComponentList \n";
	print STDERR "AALocCommand -splitLocEnv {-locenv /LocEnv/}  { -file componentList} \n";
	print STDERR "AALocCommand -mergeLocEnv {-locenv /LocEnv/}  { -file locEnvList} \n";
	print STDERR "AALocCommand -receiveTranslationKit {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -receiveTranslationKit {-locenv /LocEnv/} { -file PathOfTranslationSubmission } { -file2 PathOfTranslationSubmission }\n";
	print STDERR "AALocCommand -receiveTranslationKit -glot /LocEnv/AppleGlot_Env/ -translationKit /LocEnv/Translationkit\n";
	print STDERR "AALocCommand -receiveTranslationKitWithAD {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -receiveTranslationKitWithAD {-locenv /LocEnv/} { -file PathOfTranslationSubmission } { -file2 PathOfTranslationSubmission }\n";
	print STDERR "AALocCommand -receiveTranslationKitWithAD -glot /LocEnv/AppleGlot_Env/ -translationKit /LocEnv/Translationkit\n";
	print STDERR "AALocCommand -aaCheckLocFiles -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -aaCheckLocFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkWGFiles -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -checkWGFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkADFiles -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -checkADFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkProblemNibs -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -checkProblemNibs {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -fixContaminatedNibs -glot /LocEnv/AppleGlot_Env/ {-comp Proj1}\n";
	print STDERR "AALocCommand -fixContaminatedNibs {-locenv /LocEnv/} {-comp Proj1}\n";
	print STDERR "AALocCommand -checkNibFiles -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -checkNibFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkUpdatedNibFiles -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -checkUpdatedNibFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -setLocEnv -locenv /LocEnv/\n";
	print STDERR "AALocCommand -setLocEnvForceUpdate -locenv /LocEnv/\n";
	print STDERR "AALocCommand -getLocEnv\n";
	print STDERR "AALocCommand -createLocEnv -locenv /LocEnv/\n";
	print STDERR "AALocCommand -copyLocKit -file locEnvDmg {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -copyLocKitDontRunFlidentifier -file locEnvDmg {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -copyLXRipEnv -folder LXRipFolder {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -copyBackupForBugFix -file backupZipFile {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -selectBugFixComponents -comps \"comp1,comp2\" {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -bugFixPreProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -verificator {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -verificator -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -removeComponent -comp componentName {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkLKCX {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkAllLocKitsComponentPlist -folder /PathOfLocKitsImage/}\n";
	print STDERR "AALocCommand -makeTranslationKitDmg {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -backupReviewedWG -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -backupReviewedWG {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -backupNewLoc -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -backupNewLoc {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -backupAGEnv {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -prepareLocEngDoneImage {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -backupLocEnv {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -extractNonGlotableFile -glot /LocEnv/AppleGlot_Env\n";
	print STDERR "AALocCommand -extractNonGlotableFile {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -extractAllNonGlotableFile -glot /LocEnv/AppleGlot_Env\n";
	print STDERR "AALocCommand -extractAllNonGlotableFile {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -restoreNonGlotableFiles -glot /LocEnv/AppleGlot_Env\n";
	print STDERR "AALocCommand -restoreNonGlotableFiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -locuntar {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -backupLocEnvInfo {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -restoreLocEnvInfo {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -localizeLocversionPlist -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -localizeLocversionPlist {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -dittoProj -glot /LocEnv/AppleGlot_Env/ {-locenv /LocEnv/} {-comp ComponentName}\n";
	print STDERR "AALocCommand -loctar {-locenv /LocEnv/} {-comp ComponentName}\n";
	print STDERR "AALocCommand -loctarBugFix {-locenv /LocEnv/} {-comp ComponentName} -locVer locVerNumber\n";
	print STDERR "AALocCommand -loctarWithGlossary {-locenv /LocEnv/} {-comp ComponentName}\n";
	print STDERR "AALocCommand -checkLocfiles {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkTarfile {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -checkTarballChecksum -file flverifierReportPath -folder tarballPath\n";
	print STDERR "AALocCommand -expandTar -file tarFilePath\n";
	print STDERR "AALocCommand -expandTar -folder tarFilesFolder/\n";
	print STDERR "AALocCommand -expandPackage -file packagePath\n";
	print STDERR "AALocCommand -copyLproj -lang zh_CN -folder sourceFolder -folder2 destFolder\n";
	print STDERR "AALocCommand -pseudoLoc {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -pseudoLoc -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -pseudoLoc -folder pathOfWGFolder\n";
	print STDERR "AALocCommand -makeDiskImage -folder sourcePath\n";
	print STDERR "AALocCommand -fcpPlistPreProcess -glot /LocEnv/AppleGlot_Env\n";
	print STDERR "AALocCommand -fcpPlistPreProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -fcpPlistPostProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -widgetJSPreProcess -glot /LocEnv/AppleGlot_Env\n";
	print STDERR "AALocCommand -widgetJSPreProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -widgetJSPostProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -javaPropertiesPreProcess -glot /LocEnv/AppleGlot_Env\n";
	print STDERR "AALocCommand -javaPropertiesPreProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -javaPropertiesPostProcess {-locenv /LocEnv/}\n";
	print STDERR "AALocCommand -findString -string 'string' -folder sourcePath\n";
	print STDERR "AALocCommand -preprocessKeynoteThemes -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -postprocessKeynoteThemes -glot /LocEnv/AppleGlot_Env/\n";
	print STDERR "AALocCommand -preprocessKeynoteSACountry -file /LocEnv/SACountry.strings\n";
	print STDERR "AALocCommand -postprocessKeynoteSACountry -file /LocEnv/SACountry.strings\n";
	print STDERR "AALocCommand -splitWGFile -file /LocEnv/WGFile.wg\n";
	print STDERR "AALocCommand -mergeSplittedWGFile -file /LocEnv/WGFile.wg\n";
	print STDERR "AALocCommand -split3WGFile -file /LocEnv/WGFile.wg\n";
	print STDERR "AALocCommand -merge3SplittedWGFile -file /LocEnv/WGFile.wg\n";
	print STDERR "AALocCommand -convertUTF8ToUTF16 -file /LocEnv/StringFile.strings\n";
	
	print STDERR "AALocCommand -checkXliffParameter -file/folder\n";
	
	print STDERR "\n";

	exit(2);
}


#---------------------------------------------------------------------------------------------
#	CheckConductorLocEnv
#---------------------------------------------------------------------------------------------
CheckXliff_Conductor
{



}




#=============================================================================================
#									E N D   O F   F I L E
#=============================================================================================
